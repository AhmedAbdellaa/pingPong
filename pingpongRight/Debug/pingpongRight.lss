
pingpongRight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000164  00800060  00004c6c  00004d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008001c4  008001c4  00004e64  2**0
                  ALLOC
  3 .stab         00005508  00000000  00000000  00004e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b66  00000000  00000000  0000a36c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ced2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000d072  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000d264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f66f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000109f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00012082  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000129f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <__vector_1>
       8:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__vector_2>
       c:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3c       	cpi	r26, 0xCB	; 203
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <main>
      8a:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e8       	ldi	r26, 0x8B	; 139
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 99 25 	jmp	0x4b32	; 0x4b32 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e8       	ldi	r24, 0x8B	; 139
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 99 25 	jmp	0x4b32	; 0x4b32 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e8       	ldi	r22, 0x8B	; 139
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8d 25 	jmp	0x4b1a	; 0x4b1a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 56       	subi	r30, 0x6D	; 109
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PP_u8initPlayer>:
#include "../../0-MCAL/3-EXTI/EXTI_interface.h"
#include "../../1-HAL/CLCD/CLCD_interface.h"

#include "PP_interface.h"

uint8 PP_u8initPlayer(PP_player_Config_t *ref_player){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <PP_u8initPlayer+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Error_state = OK;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01
	if (ref_player != NULL)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	e9 f0       	breq	.+58     	; 0xe84 <PP_u8initPlayer+0x56>
	{
		if (ref_player->screenPos == RIGHT)
     e4a:	ea 81       	ldd	r30, Y+2	; 0x02
     e4c:	fb 81       	ldd	r31, Y+3	; 0x03
     e4e:	81 81       	ldd	r24, Z+1	; 0x01
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	41 f4       	brne	.+16     	; 0xe64 <PP_u8initPlayer+0x36>
			CLCD_voidGoToXY(15,ref_player->pos);
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	90 81       	ld	r25, Z
     e5a:	8f e0       	ldi	r24, 0x0F	; 15
     e5c:	69 2f       	mov	r22, r25
     e5e:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
     e62:	0c c0       	rjmp	.+24     	; 0xe7c <PP_u8initPlayer+0x4e>
		else if (ref_player->screenPos == LEFT)
     e64:	ea 81       	ldd	r30, Y+2	; 0x02
     e66:	fb 81       	ldd	r31, Y+3	; 0x03
     e68:	81 81       	ldd	r24, Z+1	; 0x01
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	39 f4       	brne	.+14     	; 0xe7c <PP_u8initPlayer+0x4e>
			CLCD_voidGoToXY(0,ref_player->pos);
     e6e:	ea 81       	ldd	r30, Y+2	; 0x02
     e70:	fb 81       	ldd	r31, Y+3	; 0x03
     e72:	90 81       	ld	r25, Z
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	69 2f       	mov	r22, r25
     e78:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
		CLCD_VoidSendData('|');
     e7c:	8c e7       	ldi	r24, 0x7C	; 124
     e7e:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <PP_u8initPlayer+0x5a>
	}
	else
		Local_u8Error_state = NULL_PTR;
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Error_state;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <PP_u8BallMoving>:

uint8 PP_u8BallMoving(PP_ball_Config_t *ref_ball, PP_player_Config_t *ref_player)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	a3 97       	sbiw	r28, 0x23	; 35
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	99 a3       	std	Y+33, r25	; 0x21
     eac:	88 a3       	std	Y+32, r24	; 0x20
     eae:	7b a3       	std	Y+35, r23	; 0x23
     eb0:	6a a3       	std	Y+34, r22	; 0x22
	uint8 Local_u8Error_state = OK;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	8f 8f       	std	Y+31, r24	; 0x1f

	if (ref_ball != NULL && ref_player != NULL)
     eb6:	88 a1       	ldd	r24, Y+32	; 0x20
     eb8:	99 a1       	ldd	r25, Y+33	; 0x21
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	09 f4       	brne	.+2      	; 0xec0 <PP_u8BallMoving+0x2a>
     ebe:	c0 c1       	rjmp	.+896    	; 0x1240 <PP_u8BallMoving+0x3aa>
     ec0:	8a a1       	ldd	r24, Y+34	; 0x22
     ec2:	9b a1       	ldd	r25, Y+35	; 0x23
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	09 f4       	brne	.+2      	; 0xeca <PP_u8BallMoving+0x34>
     ec8:	bb c1       	rjmp	.+886    	; 0x1240 <PP_u8BallMoving+0x3aa>
	{
		if(ref_ball->flag == INSCREEN){
     eca:	e8 a1       	ldd	r30, Y+32	; 0x20
     ecc:	f9 a1       	ldd	r31, Y+33	; 0x21
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	09 f0       	breq	.+2      	; 0xed6 <PP_u8BallMoving+0x40>
     ed4:	b2 c1       	rjmp	.+868    	; 0x123a <PP_u8BallMoving+0x3a4>

			sint8 Local_s8_iter0=0;
     ed6:	1e 8e       	std	Y+30, r1	; 0x1e
			sint8 Local_s8EndLocation ;

			if (ref_ball->WalkDirection == LEFT)
     ed8:	e8 a1       	ldd	r30, Y+32	; 0x20
     eda:	f9 a1       	ldd	r31, Y+33	; 0x21
     edc:	87 81       	ldd	r24, Z+7	; 0x07
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	09 f0       	breq	.+2      	; 0xee4 <PP_u8BallMoving+0x4e>
     ee2:	d1 c0       	rjmp	.+418    	; 0x1086 <PP_u8BallMoving+0x1f0>
			{
				if (ref_player->screenPos==RIGHT)
     ee4:	ea a1       	ldd	r30, Y+34	; 0x22
     ee6:	fb a1       	ldd	r31, Y+35	; 0x23
     ee8:	81 81       	ldd	r24, Z+1	; 0x01
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	11 f4       	brne	.+4      	; 0xef2 <PP_u8BallMoving+0x5c>
					Local_s8EndLocation = 0;
     eee:	1d 8e       	std	Y+29, r1	; 0x1d
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <PP_u8BallMoving+0x60>
				else
					Local_s8EndLocation = 1;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	8d 8f       	std	Y+29, r24	; 0x1d
				// 15 : length of screen without player cell
				for (Local_s8_iter0 = ref_ball->posX; Local_s8_iter0 >=Local_s8EndLocation; Local_s8_iter0--)
     ef6:	e8 a1       	ldd	r30, Y+32	; 0x20
     ef8:	f9 a1       	ldd	r31, Y+33	; 0x21
     efa:	80 81       	ld	r24, Z
     efc:	8e 8f       	std	Y+30, r24	; 0x1e
     efe:	a7 c0       	rjmp	.+334    	; 0x104e <PP_u8BallMoving+0x1b8>
				{
					// clear old ball pos from screen
					CLCD_voidGoToXY(ref_ball->posX , ref_ball->posY);
     f00:	e8 a1       	ldd	r30, Y+32	; 0x20
     f02:	f9 a1       	ldd	r31, Y+33	; 0x21
     f04:	80 81       	ld	r24, Z
     f06:	e8 a1       	ldd	r30, Y+32	; 0x20
     f08:	f9 a1       	ldd	r31, Y+33	; 0x21
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	69 2f       	mov	r22, r25
     f0e:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
					CLCD_VoidSendData(' ');
     f12:	80 e2       	ldi	r24, 0x20	; 32
     f14:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
					// random flip ball pos up and down every 4 step
					if (Local_s8_iter0 % 4 == 0)
     f18:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1a:	83 70       	andi	r24, 0x03	; 3
     f1c:	88 23       	and	r24, r24
     f1e:	51 f4       	brne	.+20     	; 0xf34 <PP_u8BallMoving+0x9e>
						ref_ball->posY = rand() % 2; // return 0 or 1
     f20:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <rand>
     f24:	22 e0       	ldi	r18, 0x02	; 2
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	b9 01       	movw	r22, r18
     f2a:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__divmodhi4>
     f2e:	e8 a1       	ldd	r30, Y+32	; 0x20
     f30:	f9 a1       	ldd	r31, Y+33	; 0x21
     f32:	81 83       	std	Z+1, r24	; 0x01

					ref_ball->posX = Local_s8_iter0;
     f34:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f36:	e8 a1       	ldd	r30, Y+32	; 0x20
     f38:	f9 a1       	ldd	r31, Y+33	; 0x21
     f3a:	80 83       	st	Z, r24
					// put ball in the new pos on lcd
					CLCD_voidGoToXY(ref_ball->posX, ref_ball->posY);
     f3c:	e8 a1       	ldd	r30, Y+32	; 0x20
     f3e:	f9 a1       	ldd	r31, Y+33	; 0x21
     f40:	80 81       	ld	r24, Z
     f42:	e8 a1       	ldd	r30, Y+32	; 0x20
     f44:	f9 a1       	ldd	r31, Y+33	; 0x21
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	69 2f       	mov	r22, r25
     f4a:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
					CLCD_VoidSendData('*');
     f4e:	8a e2       	ldi	r24, 0x2A	; 42
     f50:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
					// how fast moving the ball
					_delay_ms(ref_ball->speed);
     f54:	e8 a1       	ldd	r30, Y+32	; 0x20
     f56:	f9 a1       	ldd	r31, Y+33	; 0x21
     f58:	83 81       	ldd	r24, Z+3	; 0x03
     f5a:	94 81       	ldd	r25, Z+4	; 0x04
     f5c:	a5 81       	ldd	r26, Z+5	; 0x05
     f5e:	b6 81       	ldd	r27, Z+6	; 0x06
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	89 8f       	std	Y+25, r24	; 0x19
     f6e:	9a 8f       	std	Y+26, r25	; 0x1a
     f70:	ab 8f       	std	Y+27, r26	; 0x1b
     f72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f74:	69 8d       	ldd	r22, Y+25	; 0x19
     f76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	4a e7       	ldi	r20, 0x7A	; 122
     f82:	55 e4       	ldi	r21, 0x45	; 69
     f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	8d 8b       	std	Y+21, r24	; 0x15
     f8e:	9e 8b       	std	Y+22, r25	; 0x16
     f90:	af 8b       	std	Y+23, r26	; 0x17
     f92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f94:	6d 89       	ldd	r22, Y+21	; 0x15
     f96:	7e 89       	ldd	r23, Y+22	; 0x16
     f98:	8f 89       	ldd	r24, Y+23	; 0x17
     f9a:	98 8d       	ldd	r25, Y+24	; 0x18
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	5f e3       	ldi	r21, 0x3F	; 63
     fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fa8:	88 23       	and	r24, r24
     faa:	2c f4       	brge	.+10     	; 0xfb6 <PP_u8BallMoving+0x120>
		__ticks = 1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9c 8b       	std	Y+20, r25	; 0x14
     fb2:	8b 8b       	std	Y+19, r24	; 0x13
     fb4:	3f c0       	rjmp	.+126    	; 0x1034 <PP_u8BallMoving+0x19e>
	else if (__tmp > 65535)
     fb6:	6d 89       	ldd	r22, Y+21	; 0x15
     fb8:	7e 89       	ldd	r23, Y+22	; 0x16
     fba:	8f 89       	ldd	r24, Y+23	; 0x17
     fbc:	98 8d       	ldd	r25, Y+24	; 0x18
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	3f ef       	ldi	r19, 0xFF	; 255
     fc2:	4f e7       	ldi	r20, 0x7F	; 127
     fc4:	57 e4       	ldi	r21, 0x47	; 71
     fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fca:	18 16       	cp	r1, r24
     fcc:	4c f5       	brge	.+82     	; 0x1020 <PP_u8BallMoving+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fce:	69 8d       	ldd	r22, Y+25	; 0x19
     fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e2       	ldi	r20, 0x20	; 32
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9c 8b       	std	Y+20, r25	; 0x14
     ff4:	8b 8b       	std	Y+19, r24	; 0x13
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <PP_u8BallMoving+0x180>
     ff8:	80 e9       	ldi	r24, 0x90	; 144
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	9a 8b       	std	Y+18, r25	; 0x12
     ffe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1000:	89 89       	ldd	r24, Y+17	; 0x11
    1002:	9a 89       	ldd	r25, Y+18	; 0x12
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <PP_u8BallMoving+0x16e>
    1008:	9a 8b       	std	Y+18, r25	; 0x12
    100a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100c:	8b 89       	ldd	r24, Y+19	; 0x13
    100e:	9c 89       	ldd	r25, Y+20	; 0x14
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	9c 8b       	std	Y+20, r25	; 0x14
    1014:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	8b 89       	ldd	r24, Y+19	; 0x13
    1018:	9c 89       	ldd	r25, Y+20	; 0x14
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	69 f7       	brne	.-38     	; 0xff8 <PP_u8BallMoving+0x162>
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <PP_u8BallMoving+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1020:	6d 89       	ldd	r22, Y+21	; 0x15
    1022:	7e 89       	ldd	r23, Y+22	; 0x16
    1024:	8f 89       	ldd	r24, Y+23	; 0x17
    1026:	98 8d       	ldd	r25, Y+24	; 0x18
    1028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	9c 8b       	std	Y+20, r25	; 0x14
    1032:	8b 8b       	std	Y+19, r24	; 0x13
    1034:	8b 89       	ldd	r24, Y+19	; 0x13
    1036:	9c 89       	ldd	r25, Y+20	; 0x14
    1038:	98 8b       	std	Y+16, r25	; 0x10
    103a:	8f 87       	std	Y+15, r24	; 0x0f
    103c:	8f 85       	ldd	r24, Y+15	; 0x0f
    103e:	98 89       	ldd	r25, Y+16	; 0x10
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <PP_u8BallMoving+0x1aa>
    1044:	98 8b       	std	Y+16, r25	; 0x10
    1046:	8f 87       	std	Y+15, r24	; 0x0f
				if (ref_player->screenPos==RIGHT)
					Local_s8EndLocation = 0;
				else
					Local_s8EndLocation = 1;
				// 15 : length of screen without player cell
				for (Local_s8_iter0 = ref_ball->posX; Local_s8_iter0 >=Local_s8EndLocation; Local_s8_iter0--)
    1048:	8e 8d       	ldd	r24, Y+30	; 0x1e
    104a:	81 50       	subi	r24, 0x01	; 1
    104c:	8e 8f       	std	Y+30, r24	; 0x1e
    104e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1050:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1052:	98 17       	cp	r25, r24
    1054:	0c f0       	brlt	.+2      	; 0x1058 <PP_u8BallMoving+0x1c2>
    1056:	54 cf       	rjmp	.-344    	; 0xf00 <PP_u8BallMoving+0x6a>
					CLCD_VoidSendData('*');
					// how fast moving the ball
					_delay_ms(ref_ball->speed);
				}

				if (ref_player->screenPos == RIGHT)
    1058:	ea a1       	ldd	r30, Y+34	; 0x22
    105a:	fb a1       	ldd	r31, Y+35	; 0x23
    105c:	81 81       	ldd	r24, Z+1	; 0x01
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	09 f0       	breq	.+2      	; 0x1064 <PP_u8BallMoving+0x1ce>
    1062:	f0 c0       	rjmp	.+480    	; 0x1244 <PP_u8BallMoving+0x3ae>
				{
					// finally ball out of screen : raising flag
					ref_ball->flag = OUTSCREEN;
    1064:	e8 a1       	ldd	r30, Y+32	; 0x20
    1066:	f9 a1       	ldd	r31, Y+33	; 0x21
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	82 83       	std	Z+2, r24	; 0x02
					// clear old ball pos from screen
					CLCD_voidGoToXY(ref_ball->posX , ref_ball->posY);
    106c:	e8 a1       	ldd	r30, Y+32	; 0x20
    106e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1070:	80 81       	ld	r24, Z
    1072:	e8 a1       	ldd	r30, Y+32	; 0x20
    1074:	f9 a1       	ldd	r31, Y+33	; 0x21
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	69 2f       	mov	r22, r25
    107a:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
					CLCD_VoidSendData(' ');
    107e:	80 e2       	ldi	r24, 0x20	; 32
    1080:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
    1084:	df c0       	rjmp	.+446    	; 0x1244 <PP_u8BallMoving+0x3ae>
				}else{
//
				}
			}
			else if (ref_ball->WalkDirection == RIGHT)
    1086:	e8 a1       	ldd	r30, Y+32	; 0x20
    1088:	f9 a1       	ldd	r31, Y+33	; 0x21
    108a:	87 81       	ldd	r24, Z+7	; 0x07
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	09 f0       	breq	.+2      	; 0x1092 <PP_u8BallMoving+0x1fc>
    1090:	d1 c0       	rjmp	.+418    	; 0x1234 <PP_u8BallMoving+0x39e>
			{
				if (ref_player->screenPos==RIGHT)
    1092:	ea a1       	ldd	r30, Y+34	; 0x22
    1094:	fb a1       	ldd	r31, Y+35	; 0x23
    1096:	81 81       	ldd	r24, Z+1	; 0x01
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	19 f4       	brne	.+6      	; 0x10a2 <PP_u8BallMoving+0x20c>
					Local_s8EndLocation = 14;
    109c:	8e e0       	ldi	r24, 0x0E	; 14
    109e:	8d 8f       	std	Y+29, r24	; 0x1d
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <PP_u8BallMoving+0x210>
				else
					Local_s8EndLocation = 15;
    10a2:	8f e0       	ldi	r24, 0x0F	; 15
    10a4:	8d 8f       	std	Y+29, r24	; 0x1d
				// 15 : Length of screen without player cell
				for (Local_s8_iter0 = ref_ball->posX ; Local_s8_iter0 <=Local_s8EndLocation; Local_s8_iter0++)
    10a6:	e8 a1       	ldd	r30, Y+32	; 0x20
    10a8:	f9 a1       	ldd	r31, Y+33	; 0x21
    10aa:	80 81       	ld	r24, Z
    10ac:	8e 8f       	std	Y+30, r24	; 0x1e
    10ae:	a7 c0       	rjmp	.+334    	; 0x11fe <PP_u8BallMoving+0x368>
				{
					// clear old ball pos from screen
					CLCD_voidGoToXY(ref_ball->posX , ref_ball->posY);
    10b0:	e8 a1       	ldd	r30, Y+32	; 0x20
    10b2:	f9 a1       	ldd	r31, Y+33	; 0x21
    10b4:	80 81       	ld	r24, Z
    10b6:	e8 a1       	ldd	r30, Y+32	; 0x20
    10b8:	f9 a1       	ldd	r31, Y+33	; 0x21
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	69 2f       	mov	r22, r25
    10be:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
					CLCD_VoidSendData(' ');
    10c2:	80 e2       	ldi	r24, 0x20	; 32
    10c4:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
					// random flip ball pos up and down every 4 step
					if (Local_s8_iter0 % 4 == 0)
    10c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ca:	83 70       	andi	r24, 0x03	; 3
    10cc:	88 23       	and	r24, r24
    10ce:	51 f4       	brne	.+20     	; 0x10e4 <PP_u8BallMoving+0x24e>
						ref_ball->posY = rand() % 2; // return 0 or 1
    10d0:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <rand>
    10d4:	22 e0       	ldi	r18, 0x02	; 2
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	b9 01       	movw	r22, r18
    10da:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__divmodhi4>
    10de:	e8 a1       	ldd	r30, Y+32	; 0x20
    10e0:	f9 a1       	ldd	r31, Y+33	; 0x21
    10e2:	81 83       	std	Z+1, r24	; 0x01
					ref_ball->posX = Local_s8_iter0;
    10e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e6:	e8 a1       	ldd	r30, Y+32	; 0x20
    10e8:	f9 a1       	ldd	r31, Y+33	; 0x21
    10ea:	80 83       	st	Z, r24
					// put ball in the new pos on lcd
					CLCD_voidGoToXY(ref_ball->posX, ref_ball->posY);
    10ec:	e8 a1       	ldd	r30, Y+32	; 0x20
    10ee:	f9 a1       	ldd	r31, Y+33	; 0x21
    10f0:	80 81       	ld	r24, Z
    10f2:	e8 a1       	ldd	r30, Y+32	; 0x20
    10f4:	f9 a1       	ldd	r31, Y+33	; 0x21
    10f6:	91 81       	ldd	r25, Z+1	; 0x01
    10f8:	69 2f       	mov	r22, r25
    10fa:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
					CLCD_VoidSendData('*');
    10fe:	8a e2       	ldi	r24, 0x2A	; 42
    1100:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>

					// how fast moving the ball
					_delay_ms(ref_ball->speed);
    1104:	e8 a1       	ldd	r30, Y+32	; 0x20
    1106:	f9 a1       	ldd	r31, Y+33	; 0x21
    1108:	83 81       	ldd	r24, Z+3	; 0x03
    110a:	94 81       	ldd	r25, Z+4	; 0x04
    110c:	a5 81       	ldd	r26, Z+5	; 0x05
    110e:	b6 81       	ldd	r27, Z+6	; 0x06
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	8b 87       	std	Y+11, r24	; 0x0b
    111e:	9c 87       	std	Y+12, r25	; 0x0c
    1120:	ad 87       	std	Y+13, r26	; 0x0d
    1122:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	6b 85       	ldd	r22, Y+11	; 0x0b
    1126:	7c 85       	ldd	r23, Y+12	; 0x0c
    1128:	8d 85       	ldd	r24, Y+13	; 0x0d
    112a:	9e 85       	ldd	r25, Y+14	; 0x0e
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	4a e7       	ldi	r20, 0x7A	; 122
    1132:	55 e4       	ldi	r21, 0x45	; 69
    1134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	8f 83       	std	Y+7, r24	; 0x07
    113e:	98 87       	std	Y+8, r25	; 0x08
    1140:	a9 87       	std	Y+9, r26	; 0x09
    1142:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1144:	6f 81       	ldd	r22, Y+7	; 0x07
    1146:	78 85       	ldd	r23, Y+8	; 0x08
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	9a 85       	ldd	r25, Y+10	; 0x0a
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	2c f4       	brge	.+10     	; 0x1166 <PP_u8BallMoving+0x2d0>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	3f c0       	rjmp	.+126    	; 0x11e4 <PP_u8BallMoving+0x34e>
	else if (__tmp > 65535)
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	3f ef       	ldi	r19, 0xFF	; 255
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	57 e4       	ldi	r21, 0x47	; 71
    1176:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    117a:	18 16       	cp	r1, r24
    117c:	4c f5       	brge	.+82     	; 0x11d0 <PP_u8BallMoving+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1180:	7c 85       	ldd	r23, Y+12	; 0x0c
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e2       	ldi	r20, 0x20	; 32
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9e 83       	std	Y+6, r25	; 0x06
    11a4:	8d 83       	std	Y+5, r24	; 0x05
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <PP_u8BallMoving+0x330>
    11a8:	80 e9       	ldi	r24, 0x90	; 144
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	8b 83       	std	Y+3, r24	; 0x03
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <PP_u8BallMoving+0x31e>
    11b8:	9c 83       	std	Y+4, r25	; 0x04
    11ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	9e 83       	std	Y+6, r25	; 0x06
    11c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f7       	brne	.-38     	; 0x11a8 <PP_u8BallMoving+0x312>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <PP_u8BallMoving+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d0:	6f 81       	ldd	r22, Y+7	; 0x07
    11d2:	78 85       	ldd	r23, Y+8	; 0x08
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9e 83       	std	Y+6, r25	; 0x06
    11e2:	8d 83       	std	Y+5, r24	; 0x05
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <PP_u8BallMoving+0x35a>
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
				if (ref_player->screenPos==RIGHT)
					Local_s8EndLocation = 14;
				else
					Local_s8EndLocation = 15;
				// 15 : Length of screen without player cell
				for (Local_s8_iter0 = ref_ball->posX ; Local_s8_iter0 <=Local_s8EndLocation; Local_s8_iter0++)
    11f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	8e 8f       	std	Y+30, r24	; 0x1e
    11fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1200:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1202:	89 17       	cp	r24, r25
    1204:	0c f0       	brlt	.+2      	; 0x1208 <PP_u8BallMoving+0x372>
    1206:	54 cf       	rjmp	.-344    	; 0x10b0 <PP_u8BallMoving+0x21a>
					CLCD_VoidSendData('*');

					// how fast moving the ball
					_delay_ms(ref_ball->speed);
				}
				if (ref_player->screenPos == LEFT)
    1208:	ea a1       	ldd	r30, Y+34	; 0x22
    120a:	fb a1       	ldd	r31, Y+35	; 0x23
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	c9 f4       	brne	.+50     	; 0x1244 <PP_u8BallMoving+0x3ae>
				{
					// finally ball out of screen : raising flag
					ref_ball->flag = OUTSCREEN;
    1212:	e8 a1       	ldd	r30, Y+32	; 0x20
    1214:	f9 a1       	ldd	r31, Y+33	; 0x21
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	82 83       	std	Z+2, r24	; 0x02

					CLCD_voidGoToXY(ref_ball->posX , ref_ball->posY);
    121a:	e8 a1       	ldd	r30, Y+32	; 0x20
    121c:	f9 a1       	ldd	r31, Y+33	; 0x21
    121e:	80 81       	ld	r24, Z
    1220:	e8 a1       	ldd	r30, Y+32	; 0x20
    1222:	f9 a1       	ldd	r31, Y+33	; 0x21
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	69 2f       	mov	r22, r25
    1228:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
					CLCD_VoidSendData(' ');
    122c:	80 e2       	ldi	r24, 0x20	; 32
    122e:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
    1232:	08 c0       	rjmp	.+16     	; 0x1244 <PP_u8BallMoving+0x3ae>
				}
			}

			else
			Local_u8Error_state = NOK;
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	8f 8f       	std	Y+31, r24	; 0x1f
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <PP_u8BallMoving+0x3ae>
		}
		else
		Local_u8Error_state = NOK;
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	8f 8f       	std	Y+31, r24	; 0x1f
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <PP_u8BallMoving+0x3ae>
	}
	else
	Local_u8Error_state = NULL_PTR;
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	8f 8f       	std	Y+31, r24	; 0x1f
	return Local_u8Error_state;
    1244:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    1246:	a3 96       	adiw	r28, 0x23	; 35
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <PP_u8PlayerToggle>:

uint8 PP_u8PlayerToggle(PP_player_Config_t *ref_player)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <PP_u8PlayerToggle+0x6>
    125e:	00 d0       	rcall	.+0      	; 0x1260 <PP_u8PlayerToggle+0x8>
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8Error_state = OK;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	8a 83       	std	Y+2, r24	; 0x02
	if (ref_player != NULL)
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	71 f1       	breq	.+92     	; 0x12d0 <PP_u8PlayerToggle+0x78>
	{

		uint8 Local_u8PosX;
		CLCD_VoidSendCommand(CLCD_CLEAR_CMD);
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	0e 94 ce 1a 	call	0x359c	; 0x359c <CLCD_VoidSendCommand>
		// get player x location
		if (ref_player->screenPos == LEFT)
    127a:	eb 81       	ldd	r30, Y+3	; 0x03
    127c:	fc 81       	ldd	r31, Y+4	; 0x04
    127e:	81 81       	ldd	r24, Z+1	; 0x01
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	11 f4       	brne	.+4      	; 0x1288 <PP_u8PlayerToggle+0x30>
		Local_u8PosX = 0;
    1284:	19 82       	std	Y+1, r1	; 0x01
    1286:	02 c0       	rjmp	.+4      	; 0x128c <PP_u8PlayerToggle+0x34>
		else
		Local_u8PosX = 15;
    1288:	8f e0       	ldi	r24, 0x0F	; 15
    128a:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidGoToXY(Local_u8PosX, ref_player->pos);
    128c:	eb 81       	ldd	r30, Y+3	; 0x03
    128e:	fc 81       	ldd	r31, Y+4	; 0x04
    1290:	90 81       	ld	r25, Z
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	69 2f       	mov	r22, r25
    1296:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
		CLCD_VoidSendData(' ');
    129a:	80 e2       	ldi	r24, 0x20	; 32
    129c:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
		// new pos
		if (ref_player->pos == 0)
    12a0:	eb 81       	ldd	r30, Y+3	; 0x03
    12a2:	fc 81       	ldd	r31, Y+4	; 0x04
    12a4:	80 81       	ld	r24, Z
    12a6:	88 23       	and	r24, r24
    12a8:	29 f4       	brne	.+10     	; 0x12b4 <PP_u8PlayerToggle+0x5c>

		ref_player->pos = 1;
    12aa:	eb 81       	ldd	r30, Y+3	; 0x03
    12ac:	fc 81       	ldd	r31, Y+4	; 0x04
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	80 83       	st	Z, r24
    12b2:	03 c0       	rjmp	.+6      	; 0x12ba <PP_u8PlayerToggle+0x62>

		else
		ref_player->pos = 0;
    12b4:	eb 81       	ldd	r30, Y+3	; 0x03
    12b6:	fc 81       	ldd	r31, Y+4	; 0x04
    12b8:	10 82       	st	Z, r1
		// display new pos
		CLCD_voidGoToXY(Local_u8PosX, ref_player->pos);
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04
    12be:	90 81       	ld	r25, Z
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	69 2f       	mov	r22, r25
    12c4:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
		CLCD_VoidSendData('|');
    12c8:	8c e7       	ldi	r24, 0x7C	; 124
    12ca:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <PP_u8PlayerToggle+0x7c>

	}
	else
	Local_u8Error_state = NULL_PTR;
    12d0:	83 e0       	ldi	r24, 0x03	; 3
    12d2:	8a 83       	std	Y+2, r24	; 0x02

	return Local_u8Error_state;
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <PP_u8BallArrive>:

uint8 PP_u8BallArrive(PP_ball_Config_t *ref_ball, PP_player_Config_t *ref_player, uint8 *ref_u8GameState)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	27 97       	sbiw	r28, 0x07	; 7
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	9b 83       	std	Y+3, r25	; 0x03
    12fa:	8a 83       	std	Y+2, r24	; 0x02
    12fc:	7d 83       	std	Y+5, r23	; 0x05
    12fe:	6c 83       	std	Y+4, r22	; 0x04
    1300:	5f 83       	std	Y+7, r21	; 0x07
    1302:	4e 83       	std	Y+6, r20	; 0x06
	uint8 Local_u8Error_state = OK;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	89 83       	std	Y+1, r24	; 0x01
	if (ref_ball != NULL && ref_player != NULL)
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	9b 81       	ldd	r25, Y+3	; 0x03
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	51 f1       	breq	.+84     	; 0x1364 <PP_u8BallArrive+0x80>
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	31 f1       	breq	.+76     	; 0x1364 <PP_u8BallArrive+0x80>
	{
		// player hit the ball
		if (ref_player->pos == ref_ball->posY)
    1318:	ec 81       	ldd	r30, Y+4	; 0x04
    131a:	fd 81       	ldd	r31, Y+5	; 0x05
    131c:	90 81       	ld	r25, Z
    131e:	ea 81       	ldd	r30, Y+2	; 0x02
    1320:	fb 81       	ldd	r31, Y+3	; 0x03
    1322:	81 81       	ldd	r24, Z+1	; 0x01
    1324:	98 17       	cp	r25, r24
    1326:	d1 f4       	brne	.+52     	; 0x135c <PP_u8BallArrive+0x78>
		{
			// toggle ball direction
			if (ref_ball->WalkDirection == RIGHT)
    1328:	ea 81       	ldd	r30, Y+2	; 0x02
    132a:	fb 81       	ldd	r31, Y+3	; 0x03
    132c:	87 81       	ldd	r24, Z+7	; 0x07
    132e:	82 30       	cpi	r24, 0x02	; 2
    1330:	29 f4       	brne	.+10     	; 0x133c <PP_u8BallArrive+0x58>
			ref_ball->WalkDirection = LEFT;
    1332:	ea 81       	ldd	r30, Y+2	; 0x02
    1334:	fb 81       	ldd	r31, Y+3	; 0x03
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	87 83       	std	Z+7, r24	; 0x07
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <PP_u8BallArrive+0x60>
			else
			ref_ball->WalkDirection = RIGHT;
    133c:	ea 81       	ldd	r30, Y+2	; 0x02
    133e:	fb 81       	ldd	r31, Y+3	; 0x03
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	87 83       	std	Z+7, r24	; 0x07
			//move the ball in opposite direction
			PP_u8BallMoving(ref_ball, ref_player);
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	9b 81       	ldd	r25, Y+3	; 0x03
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	b9 01       	movw	r22, r18
    134e:	0e 94 4b 07 	call	0xe96	; 0xe96 <PP_u8BallMoving>
			*ref_u8GameState = 1U; // game continue
    1352:	ee 81       	ldd	r30, Y+6	; 0x06
    1354:	ff 81       	ldd	r31, Y+7	; 0x07
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	80 83       	st	Z, r24
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <PP_u8BallArrive+0x84>
		}
		// player missed the ball
		else
		{
			*ref_u8GameState = 0U;
    135c:	ee 81       	ldd	r30, Y+6	; 0x06
    135e:	ff 81       	ldd	r31, Y+7	; 0x07
    1360:	10 82       	st	Z, r1
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <PP_u8BallArrive+0x84>
		}
	}
	else
	Local_u8Error_state = NULL_PTR;
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8Error_state;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	27 96       	adiw	r28, 0x07	; 7
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <PP_u8NotifyMC_ball>:

uint8 PP_u8NotifyMC_ball(PP_ball_Config_t* ref_ball){
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	e4 97       	sbiw	r28, 0x34	; 52
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	9c ab       	std	Y+52, r25	; 0x34
    1392:	8b ab       	std	Y+51, r24	; 0x33

	uint8 Local_u8Error_state = OK;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	8a ab       	std	Y+50, r24	; 0x32
	uint8 Local_u8Iter0 ;
	if (ref_ball != NULL )
    1398:	8b a9       	ldd	r24, Y+51	; 0x33
    139a:	9c a9       	ldd	r25, Y+52	; 0x34
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	09 f4       	brne	.+2      	; 0x13a2 <PP_u8NotifyMC_ball+0x26>
    13a0:	d3 c1       	rjmp	.+934    	; 0x1748 <PP_u8NotifyMC_ball+0x3cc>
	{
		//ball in pos 0 INT0=3
		if(ref_ball->posY == 0){
    13a2:	eb a9       	ldd	r30, Y+51	; 0x33
    13a4:	fc a9       	ldd	r31, Y+52	; 0x34
    13a6:	81 81       	ldd	r24, Z+1	; 0x01
    13a8:	88 23       	and	r24, r24
    13aa:	09 f0       	breq	.+2      	; 0x13ae <PP_u8NotifyMC_ball+0x32>
    13ac:	e2 c0       	rjmp	.+452    	; 0x1572 <PP_u8NotifyMC_ball+0x1f6>
			EXTI_u8IntDisable(INT0);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <EXTI_u8IntDisable>
			for(Local_u8Iter0=0;Local_u8Iter0<3;Local_u8Iter0++){
    13b4:	19 aa       	std	Y+49, r1	; 0x31
    13b6:	d5 c0       	rjmp	.+426    	; 0x1562 <PP_u8NotifyMC_ball+0x1e6>
				DIO_u8_SetPinDir(DIO_PORTD,DIO_PIN2,DIO_PIN_OUTPUT);
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	62 e0       	ldi	r22, 0x02	; 2
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	0e 94 39 20 	call	0x4072	; 0x4072 <DIO_u8_SetPinDir>
				DIO_u8_SetPinVal(DIO_PORTD,DIO_PIN2,DIO_PIN_HIGH);
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	62 e0       	ldi	r22, 0x02	; 2
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>

				DIO_u8_SetPinVal(DIO_PORTD,DIO_PIN2,DIO_PIN_LOW);
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	62 e0       	ldi	r22, 0x02	; 2
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
				DIO_u8_SetPinDir(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
    13d6:	83 e0       	ldi	r24, 0x03	; 3
    13d8:	62 e0       	ldi	r22, 0x02	; 2
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 39 20 	call	0x4072	; 0x4072 <DIO_u8_SetPinDir>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a8 e4       	ldi	r26, 0x48	; 72
    13e6:	b2 e4       	ldi	r27, 0x42	; 66
    13e8:	8d a7       	std	Y+45, r24	; 0x2d
    13ea:	9e a7       	std	Y+46, r25	; 0x2e
    13ec:	af a7       	std	Y+47, r26	; 0x2f
    13ee:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    13f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    13f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f6:	98 a9       	ldd	r25, Y+48	; 0x30
    13f8:	2b ea       	ldi	r18, 0xAB	; 171
    13fa:	3a ea       	ldi	r19, 0xAA	; 170
    13fc:	4a ea       	ldi	r20, 0xAA	; 170
    13fe:	50 e4       	ldi	r21, 0x40	; 64
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	89 a7       	std	Y+41, r24	; 0x29
    140a:	9a a7       	std	Y+42, r25	; 0x2a
    140c:	ab a7       	std	Y+43, r26	; 0x2b
    140e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1410:	69 a5       	ldd	r22, Y+41	; 0x29
    1412:	7a a5       	ldd	r23, Y+42	; 0x2a
    1414:	8b a5       	ldd	r24, Y+43	; 0x2b
    1416:	9c a5       	ldd	r25, Y+44	; 0x2c
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	1c f4       	brge	.+6      	; 0x142e <PP_u8NotifyMC_ball+0xb2>
		__ticks = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	88 a7       	std	Y+40, r24	; 0x28
    142c:	91 c0       	rjmp	.+290    	; 0x1550 <PP_u8NotifyMC_ball+0x1d4>
	else if (__tmp > 255)
    142e:	69 a5       	ldd	r22, Y+41	; 0x29
    1430:	7a a5       	ldd	r23, Y+42	; 0x2a
    1432:	8b a5       	ldd	r24, Y+43	; 0x2b
    1434:	9c a5       	ldd	r25, Y+44	; 0x2c
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	4f e7       	ldi	r20, 0x7F	; 127
    143c:	53 e4       	ldi	r21, 0x43	; 67
    143e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1442:	18 16       	cp	r1, r24
    1444:	0c f0       	brlt	.+2      	; 0x1448 <PP_u8NotifyMC_ball+0xcc>
    1446:	7b c0       	rjmp	.+246    	; 0x153e <PP_u8NotifyMC_ball+0x1c2>
	{
		_delay_ms(__us / 1000.0);
    1448:	6d a5       	ldd	r22, Y+45	; 0x2d
    144a:	7e a5       	ldd	r23, Y+46	; 0x2e
    144c:	8f a5       	ldd	r24, Y+47	; 0x2f
    144e:	98 a9       	ldd	r25, Y+48	; 0x30
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	4a e7       	ldi	r20, 0x7A	; 122
    1456:	54 e4       	ldi	r21, 0x44	; 68
    1458:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	8c a3       	std	Y+36, r24	; 0x24
    1462:	9d a3       	std	Y+37, r25	; 0x25
    1464:	ae a3       	std	Y+38, r26	; 0x26
    1466:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1468:	6c a1       	ldd	r22, Y+36	; 0x24
    146a:	7d a1       	ldd	r23, Y+37	; 0x25
    146c:	8e a1       	ldd	r24, Y+38	; 0x26
    146e:	9f a1       	ldd	r25, Y+39	; 0x27
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	4a e7       	ldi	r20, 0x7A	; 122
    1476:	55 e4       	ldi	r21, 0x45	; 69
    1478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	88 a3       	std	Y+32, r24	; 0x20
    1482:	99 a3       	std	Y+33, r25	; 0x21
    1484:	aa a3       	std	Y+34, r26	; 0x22
    1486:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1488:	68 a1       	ldd	r22, Y+32	; 0x20
    148a:	79 a1       	ldd	r23, Y+33	; 0x21
    148c:	8a a1       	ldd	r24, Y+34	; 0x22
    148e:	9b a1       	ldd	r25, Y+35	; 0x23
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    149c:	88 23       	and	r24, r24
    149e:	2c f4       	brge	.+10     	; 0x14aa <PP_u8NotifyMC_ball+0x12e>
		__ticks = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9f 8f       	std	Y+31, r25	; 0x1f
    14a6:	8e 8f       	std	Y+30, r24	; 0x1e
    14a8:	3f c0       	rjmp	.+126    	; 0x1528 <PP_u8NotifyMC_ball+0x1ac>
	else if (__tmp > 65535)
    14aa:	68 a1       	ldd	r22, Y+32	; 0x20
    14ac:	79 a1       	ldd	r23, Y+33	; 0x21
    14ae:	8a a1       	ldd	r24, Y+34	; 0x22
    14b0:	9b a1       	ldd	r25, Y+35	; 0x23
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	4f e7       	ldi	r20, 0x7F	; 127
    14b8:	57 e4       	ldi	r21, 0x47	; 71
    14ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14be:	18 16       	cp	r1, r24
    14c0:	4c f5       	brge	.+82     	; 0x1514 <PP_u8NotifyMC_ball+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c2:	6c a1       	ldd	r22, Y+36	; 0x24
    14c4:	7d a1       	ldd	r23, Y+37	; 0x25
    14c6:	8e a1       	ldd	r24, Y+38	; 0x26
    14c8:	9f a1       	ldd	r25, Y+39	; 0x27
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9f 8f       	std	Y+31, r25	; 0x1f
    14e8:	8e 8f       	std	Y+30, r24	; 0x1e
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <PP_u8NotifyMC_ball+0x18e>
    14ec:	80 e9       	ldi	r24, 0x90	; 144
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	9d 8f       	std	Y+29, r25	; 0x1d
    14f2:	8c 8f       	std	Y+28, r24	; 0x1c
    14f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <PP_u8NotifyMC_ball+0x17c>
    14fc:	9d 8f       	std	Y+29, r25	; 0x1d
    14fe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1500:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1502:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	9f 8f       	std	Y+31, r25	; 0x1f
    1508:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    150c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	69 f7       	brne	.-38     	; 0x14ec <PP_u8NotifyMC_ball+0x170>
    1512:	24 c0       	rjmp	.+72     	; 0x155c <PP_u8NotifyMC_ball+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1514:	68 a1       	ldd	r22, Y+32	; 0x20
    1516:	79 a1       	ldd	r23, Y+33	; 0x21
    1518:	8a a1       	ldd	r24, Y+34	; 0x22
    151a:	9b a1       	ldd	r25, Y+35	; 0x23
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9f 8f       	std	Y+31, r25	; 0x1f
    1526:	8e 8f       	std	Y+30, r24	; 0x1e
    1528:	8e 8d       	ldd	r24, Y+30	; 0x1e
    152a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    152c:	9b 8f       	std	Y+27, r25	; 0x1b
    152e:	8a 8f       	std	Y+26, r24	; 0x1a
    1530:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1532:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <PP_u8NotifyMC_ball+0x1b8>
    1538:	9b 8f       	std	Y+27, r25	; 0x1b
    153a:	8a 8f       	std	Y+26, r24	; 0x1a
    153c:	0f c0       	rjmp	.+30     	; 0x155c <PP_u8NotifyMC_ball+0x1e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    153e:	69 a5       	ldd	r22, Y+41	; 0x29
    1540:	7a a5       	ldd	r23, Y+42	; 0x2a
    1542:	8b a5       	ldd	r24, Y+43	; 0x2b
    1544:	9c a5       	ldd	r25, Y+44	; 0x2c
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	88 a7       	std	Y+40, r24	; 0x28
    1550:	88 a5       	ldd	r24, Y+40	; 0x28
    1552:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1554:	89 8d       	ldd	r24, Y+25	; 0x19
    1556:	8a 95       	dec	r24
    1558:	f1 f7       	brne	.-4      	; 0x1556 <PP_u8NotifyMC_ball+0x1da>
    155a:	89 8f       	std	Y+25, r24	; 0x19
	if (ref_ball != NULL )
	{
		//ball in pos 0 INT0=3
		if(ref_ball->posY == 0){
			EXTI_u8IntDisable(INT0);
			for(Local_u8Iter0=0;Local_u8Iter0<3;Local_u8Iter0++){
    155c:	89 a9       	ldd	r24, Y+49	; 0x31
    155e:	8f 5f       	subi	r24, 0xFF	; 255
    1560:	89 ab       	std	Y+49, r24	; 0x31
    1562:	89 a9       	ldd	r24, Y+49	; 0x31
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	08 f4       	brcc	.+2      	; 0x156a <PP_u8NotifyMC_ball+0x1ee>
    1568:	27 cf       	rjmp	.-434    	; 0x13b8 <PP_u8NotifyMC_ball+0x3c>
				DIO_u8_SetPinVal(DIO_PORTD,DIO_PIN2,DIO_PIN_LOW);
				DIO_u8_SetPinDir(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
				_delay_us(50);
			}

			EXTI_u8IntEnable(INT0);
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <EXTI_u8IntEnable>
    1570:	ed c0       	rjmp	.+474    	; 0x174c <PP_u8NotifyMC_ball+0x3d0>
		}
		else if(ref_ball->posY == 1){
    1572:	eb a9       	ldd	r30, Y+51	; 0x33
    1574:	fc a9       	ldd	r31, Y+52	; 0x34
    1576:	81 81       	ldd	r24, Z+1	; 0x01
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	09 f0       	breq	.+2      	; 0x157e <PP_u8NotifyMC_ball+0x202>
    157c:	e2 c0       	rjmp	.+452    	; 0x1742 <PP_u8NotifyMC_ball+0x3c6>
			//ball in pos 1 INT0=2
			EXTI_u8IntDisable(INT0);
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <EXTI_u8IntDisable>
			for(Local_u8Iter0=0;Local_u8Iter0<2;Local_u8Iter0++){
    1584:	19 aa       	std	Y+49, r1	; 0x31
    1586:	d5 c0       	rjmp	.+426    	; 0x1732 <PP_u8NotifyMC_ball+0x3b6>
				DIO_u8_SetPinDir(DIO_PORTD,DIO_PIN2,DIO_PIN_OUTPUT);
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	0e 94 39 20 	call	0x4072	; 0x4072 <DIO_u8_SetPinDir>
				DIO_u8_SetPinVal(DIO_PORTD,DIO_PIN2,DIO_PIN_HIGH);
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	62 e0       	ldi	r22, 0x02	; 2
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>

				DIO_u8_SetPinVal(DIO_PORTD,DIO_PIN2,DIO_PIN_LOW);
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	62 e0       	ldi	r22, 0x02	; 2
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
				DIO_u8_SetPinDir(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
    15a6:	83 e0       	ldi	r24, 0x03	; 3
    15a8:	62 e0       	ldi	r22, 0x02	; 2
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	0e 94 39 20 	call	0x4072	; 0x4072 <DIO_u8_SetPinDir>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a8 e4       	ldi	r26, 0x48	; 72
    15b6:	b2 e4       	ldi	r27, 0x42	; 66
    15b8:	8d 8b       	std	Y+21, r24	; 0x15
    15ba:	9e 8b       	std	Y+22, r25	; 0x16
    15bc:	af 8b       	std	Y+23, r26	; 0x17
    15be:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15c0:	6d 89       	ldd	r22, Y+21	; 0x15
    15c2:	7e 89       	ldd	r23, Y+22	; 0x16
    15c4:	8f 89       	ldd	r24, Y+23	; 0x17
    15c6:	98 8d       	ldd	r25, Y+24	; 0x18
    15c8:	2b ea       	ldi	r18, 0xAB	; 171
    15ca:	3a ea       	ldi	r19, 0xAA	; 170
    15cc:	4a ea       	ldi	r20, 0xAA	; 170
    15ce:	50 e4       	ldi	r21, 0x40	; 64
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	89 8b       	std	Y+17, r24	; 0x11
    15da:	9a 8b       	std	Y+18, r25	; 0x12
    15dc:	ab 8b       	std	Y+19, r26	; 0x13
    15de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15e0:	69 89       	ldd	r22, Y+17	; 0x11
    15e2:	7a 89       	ldd	r23, Y+18	; 0x12
    15e4:	8b 89       	ldd	r24, Y+19	; 0x13
    15e6:	9c 89       	ldd	r25, Y+20	; 0x14
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e8       	ldi	r20, 0x80	; 128
    15ee:	5f e3       	ldi	r21, 0x3F	; 63
    15f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f4:	88 23       	and	r24, r24
    15f6:	1c f4       	brge	.+6      	; 0x15fe <PP_u8NotifyMC_ball+0x282>
		__ticks = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	88 8b       	std	Y+16, r24	; 0x10
    15fc:	91 c0       	rjmp	.+290    	; 0x1720 <PP_u8NotifyMC_ball+0x3a4>
	else if (__tmp > 255)
    15fe:	69 89       	ldd	r22, Y+17	; 0x11
    1600:	7a 89       	ldd	r23, Y+18	; 0x12
    1602:	8b 89       	ldd	r24, Y+19	; 0x13
    1604:	9c 89       	ldd	r25, Y+20	; 0x14
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	53 e4       	ldi	r21, 0x43	; 67
    160e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1612:	18 16       	cp	r1, r24
    1614:	0c f0       	brlt	.+2      	; 0x1618 <PP_u8NotifyMC_ball+0x29c>
    1616:	7b c0       	rjmp	.+246    	; 0x170e <PP_u8NotifyMC_ball+0x392>
	{
		_delay_ms(__us / 1000.0);
    1618:	6d 89       	ldd	r22, Y+21	; 0x15
    161a:	7e 89       	ldd	r23, Y+22	; 0x16
    161c:	8f 89       	ldd	r24, Y+23	; 0x17
    161e:	98 8d       	ldd	r25, Y+24	; 0x18
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a e7       	ldi	r20, 0x7A	; 122
    1626:	54 e4       	ldi	r21, 0x44	; 68
    1628:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	8c 87       	std	Y+12, r24	; 0x0c
    1632:	9d 87       	std	Y+13, r25	; 0x0d
    1634:	ae 87       	std	Y+14, r26	; 0x0e
    1636:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1638:	6c 85       	ldd	r22, Y+12	; 0x0c
    163a:	7d 85       	ldd	r23, Y+13	; 0x0d
    163c:	8e 85       	ldd	r24, Y+14	; 0x0e
    163e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4a e7       	ldi	r20, 0x7A	; 122
    1646:	55 e4       	ldi	r21, 0x45	; 69
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	88 87       	std	Y+8, r24	; 0x08
    1652:	99 87       	std	Y+9, r25	; 0x09
    1654:	aa 87       	std	Y+10, r26	; 0x0a
    1656:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1658:	68 85       	ldd	r22, Y+8	; 0x08
    165a:	79 85       	ldd	r23, Y+9	; 0x09
    165c:	8a 85       	ldd	r24, Y+10	; 0x0a
    165e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    166c:	88 23       	and	r24, r24
    166e:	2c f4       	brge	.+10     	; 0x167a <PP_u8NotifyMC_ball+0x2fe>
		__ticks = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9f 83       	std	Y+7, r25	; 0x07
    1676:	8e 83       	std	Y+6, r24	; 0x06
    1678:	3f c0       	rjmp	.+126    	; 0x16f8 <PP_u8NotifyMC_ball+0x37c>
	else if (__tmp > 65535)
    167a:	68 85       	ldd	r22, Y+8	; 0x08
    167c:	79 85       	ldd	r23, Y+9	; 0x09
    167e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1680:	9b 85       	ldd	r25, Y+11	; 0x0b
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	3f ef       	ldi	r19, 0xFF	; 255
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	57 e4       	ldi	r21, 0x47	; 71
    168a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    168e:	18 16       	cp	r1, r24
    1690:	4c f5       	brge	.+82     	; 0x16e4 <PP_u8NotifyMC_ball+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1692:	6c 85       	ldd	r22, Y+12	; 0x0c
    1694:	7d 85       	ldd	r23, Y+13	; 0x0d
    1696:	8e 85       	ldd	r24, Y+14	; 0x0e
    1698:	9f 85       	ldd	r25, Y+15	; 0x0f
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e2       	ldi	r20, 0x20	; 32
    16a0:	51 e4       	ldi	r21, 0x41	; 65
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9f 83       	std	Y+7, r25	; 0x07
    16b8:	8e 83       	std	Y+6, r24	; 0x06
    16ba:	0f c0       	rjmp	.+30     	; 0x16da <PP_u8NotifyMC_ball+0x35e>
    16bc:	80 e9       	ldi	r24, 0x90	; 144
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	9d 83       	std	Y+5, r25	; 0x05
    16c2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <PP_u8NotifyMC_ball+0x34c>
    16cc:	9d 83       	std	Y+5, r25	; 0x05
    16ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d0:	8e 81       	ldd	r24, Y+6	; 0x06
    16d2:	9f 81       	ldd	r25, Y+7	; 0x07
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9f 83       	std	Y+7, r25	; 0x07
    16d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16da:	8e 81       	ldd	r24, Y+6	; 0x06
    16dc:	9f 81       	ldd	r25, Y+7	; 0x07
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	69 f7       	brne	.-38     	; 0x16bc <PP_u8NotifyMC_ball+0x340>
    16e2:	24 c0       	rjmp	.+72     	; 0x172c <PP_u8NotifyMC_ball+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e4:	68 85       	ldd	r22, Y+8	; 0x08
    16e6:	79 85       	ldd	r23, Y+9	; 0x09
    16e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9f 83       	std	Y+7, r25	; 0x07
    16f6:	8e 83       	std	Y+6, r24	; 0x06
    16f8:	8e 81       	ldd	r24, Y+6	; 0x06
    16fa:	9f 81       	ldd	r25, Y+7	; 0x07
    16fc:	9b 83       	std	Y+3, r25	; 0x03
    16fe:	8a 83       	std	Y+2, r24	; 0x02
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	9b 81       	ldd	r25, Y+3	; 0x03
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <PP_u8NotifyMC_ball+0x388>
    1708:	9b 83       	std	Y+3, r25	; 0x03
    170a:	8a 83       	std	Y+2, r24	; 0x02
    170c:	0f c0       	rjmp	.+30     	; 0x172c <PP_u8NotifyMC_ball+0x3b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    170e:	69 89       	ldd	r22, Y+17	; 0x11
    1710:	7a 89       	ldd	r23, Y+18	; 0x12
    1712:	8b 89       	ldd	r24, Y+19	; 0x13
    1714:	9c 89       	ldd	r25, Y+20	; 0x14
    1716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	88 8b       	std	Y+16, r24	; 0x10
    1720:	88 89       	ldd	r24, Y+16	; 0x10
    1722:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	8a 95       	dec	r24
    1728:	f1 f7       	brne	.-4      	; 0x1726 <PP_u8NotifyMC_ball+0x3aa>
    172a:	89 83       	std	Y+1, r24	; 0x01
			EXTI_u8IntEnable(INT0);
		}
		else if(ref_ball->posY == 1){
			//ball in pos 1 INT0=2
			EXTI_u8IntDisable(INT0);
			for(Local_u8Iter0=0;Local_u8Iter0<2;Local_u8Iter0++){
    172c:	89 a9       	ldd	r24, Y+49	; 0x31
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	89 ab       	std	Y+49, r24	; 0x31
    1732:	89 a9       	ldd	r24, Y+49	; 0x31
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	08 f4       	brcc	.+2      	; 0x173a <PP_u8NotifyMC_ball+0x3be>
    1738:	27 cf       	rjmp	.-434    	; 0x1588 <PP_u8NotifyMC_ball+0x20c>

				DIO_u8_SetPinVal(DIO_PORTD,DIO_PIN2,DIO_PIN_LOW);
				DIO_u8_SetPinDir(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
				_delay_us(50);
			}
			EXTI_u8IntEnable(INT0);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <EXTI_u8IntEnable>
    1740:	05 c0       	rjmp	.+10     	; 0x174c <PP_u8NotifyMC_ball+0x3d0>
		}
		else
		Local_u8Error_state = NOK;
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	8a ab       	std	Y+50, r24	; 0x32
    1746:	02 c0       	rjmp	.+4      	; 0x174c <PP_u8NotifyMC_ball+0x3d0>
	}
	else
	Local_u8Error_state = NULL_PTR;
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	8a ab       	std	Y+50, r24	; 0x32

	return Local_u8Error_state;
    174c:	8a a9       	ldd	r24, Y+50	; 0x32
}
    174e:	e4 96       	adiw	r28, 0x34	; 52
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <PP_voidNotifyMCGameEnd>:

void PP_voidNotifyMCGameEnd(){
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
	// game end INT0=1
	EXTI_u8IntDisable(INT0);
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <EXTI_u8IntDisable>
	DIO_u8_SetPinDir(DIO_PORTD,DIO_PIN2,DIO_PIN_OUTPUT);
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	62 e0       	ldi	r22, 0x02	; 2
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	0e 94 39 20 	call	0x4072	; 0x4072 <DIO_u8_SetPinDir>
	DIO_u8_SetPinVal(DIO_PORTD,DIO_PIN2,DIO_PIN_HIGH);
    1778:	83 e0       	ldi	r24, 0x03	; 3
    177a:	62 e0       	ldi	r22, 0x02	; 2
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>

	DIO_u8_SetPinVal(DIO_PORTD,DIO_PIN2,DIO_PIN_LOW);
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
	DIO_u8_SetPinDir(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	62 e0       	ldi	r22, 0x02	; 2
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	0e 94 39 20 	call	0x4072	; 0x4072 <DIO_u8_SetPinDir>
	EXTI_u8IntEnable(INT0);
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <EXTI_u8IntEnable>
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <PP_voidGameEnd>:

void PP_voidGameEnd(uint8 copy_winStatus){
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	ea 97       	sbiw	r28, 0x3a	; 58
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	8a af       	std	Y+58, r24	; 0x3a
	//lose
	uint8 Local_u8Iter0;
	if (copy_winStatus == 0){
    17b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    17ba:	88 23       	and	r24, r24
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <PP_voidGameEnd+0x1e>
    17be:	01 c1       	rjmp	.+514    	; 0x19c2 <PP_voidGameEnd+0x220>
		for (Local_u8Iter0 = 0; Local_u8Iter0 < 5; Local_u8Iter0++)
    17c0:	19 ae       	std	Y+57, r1	; 0x39
    17c2:	fa c0       	rjmp	.+500    	; 0x19b8 <PP_voidGameEnd+0x216>
		{
			// clear screen
			CLCD_VoidSendCommand(CLCD_CLEAR_CMD);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 ce 1a 	call	0x359c	; 0x359c <CLCD_VoidSendCommand>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a8 ec       	ldi	r26, 0xC8	; 200
    17d0:	b2 e4       	ldi	r27, 0x42	; 66
    17d2:	8d ab       	std	Y+53, r24	; 0x35
    17d4:	9e ab       	std	Y+54, r25	; 0x36
    17d6:	af ab       	std	Y+55, r26	; 0x37
    17d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17da:	6d a9       	ldd	r22, Y+53	; 0x35
    17dc:	7e a9       	ldd	r23, Y+54	; 0x36
    17de:	8f a9       	ldd	r24, Y+55	; 0x37
    17e0:	98 ad       	ldd	r25, Y+56	; 0x38
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a e7       	ldi	r20, 0x7A	; 122
    17e8:	55 e4       	ldi	r21, 0x45	; 69
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	89 ab       	std	Y+49, r24	; 0x31
    17f4:	9a ab       	std	Y+50, r25	; 0x32
    17f6:	ab ab       	std	Y+51, r26	; 0x33
    17f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17fa:	69 a9       	ldd	r22, Y+49	; 0x31
    17fc:	7a a9       	ldd	r23, Y+50	; 0x32
    17fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1800:	9c a9       	ldd	r25, Y+52	; 0x34
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	2c f4       	brge	.+10     	; 0x181c <PP_voidGameEnd+0x7a>
		__ticks = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	98 ab       	std	Y+48, r25	; 0x30
    1818:	8f a7       	std	Y+47, r24	; 0x2f
    181a:	3f c0       	rjmp	.+126    	; 0x189a <PP_voidGameEnd+0xf8>
	else if (__tmp > 65535)
    181c:	69 a9       	ldd	r22, Y+49	; 0x31
    181e:	7a a9       	ldd	r23, Y+50	; 0x32
    1820:	8b a9       	ldd	r24, Y+51	; 0x33
    1822:	9c a9       	ldd	r25, Y+52	; 0x34
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	3f ef       	ldi	r19, 0xFF	; 255
    1828:	4f e7       	ldi	r20, 0x7F	; 127
    182a:	57 e4       	ldi	r21, 0x47	; 71
    182c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1830:	18 16       	cp	r1, r24
    1832:	4c f5       	brge	.+82     	; 0x1886 <PP_voidGameEnd+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1834:	6d a9       	ldd	r22, Y+53	; 0x35
    1836:	7e a9       	ldd	r23, Y+54	; 0x36
    1838:	8f a9       	ldd	r24, Y+55	; 0x37
    183a:	98 ad       	ldd	r25, Y+56	; 0x38
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e2       	ldi	r20, 0x20	; 32
    1842:	51 e4       	ldi	r21, 0x41	; 65
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	98 ab       	std	Y+48, r25	; 0x30
    185a:	8f a7       	std	Y+47, r24	; 0x2f
    185c:	0f c0       	rjmp	.+30     	; 0x187c <PP_voidGameEnd+0xda>
    185e:	80 e9       	ldi	r24, 0x90	; 144
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	9e a7       	std	Y+46, r25	; 0x2e
    1864:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1866:	8d a5       	ldd	r24, Y+45	; 0x2d
    1868:	9e a5       	ldd	r25, Y+46	; 0x2e
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <PP_voidGameEnd+0xc8>
    186e:	9e a7       	std	Y+46, r25	; 0x2e
    1870:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	8f a5       	ldd	r24, Y+47	; 0x2f
    1874:	98 a9       	ldd	r25, Y+48	; 0x30
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	98 ab       	std	Y+48, r25	; 0x30
    187a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	8f a5       	ldd	r24, Y+47	; 0x2f
    187e:	98 a9       	ldd	r25, Y+48	; 0x30
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	69 f7       	brne	.-38     	; 0x185e <PP_voidGameEnd+0xbc>
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <PP_voidGameEnd+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	69 a9       	ldd	r22, Y+49	; 0x31
    1888:	7a a9       	ldd	r23, Y+50	; 0x32
    188a:	8b a9       	ldd	r24, Y+51	; 0x33
    188c:	9c a9       	ldd	r25, Y+52	; 0x34
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	98 ab       	std	Y+48, r25	; 0x30
    1898:	8f a7       	std	Y+47, r24	; 0x2f
    189a:	8f a5       	ldd	r24, Y+47	; 0x2f
    189c:	98 a9       	ldd	r25, Y+48	; 0x30
    189e:	9c a7       	std	Y+44, r25	; 0x2c
    18a0:	8b a7       	std	Y+43, r24	; 0x2b
    18a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <PP_voidGameEnd+0x104>
    18aa:	9c a7       	std	Y+44, r25	; 0x2c
    18ac:	8b a7       	std	Y+43, r24	; 0x2b

			// flashing player loos
			_delay_ms(100);
			CLCD_voidGoToXY(0u, 0u);
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
			CLCD_VoidPrintChars("  game over ...");
    18b6:	80 e6       	ldi	r24, 0x60	; 96
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <CLCD_VoidPrintChars>
			CLCD_voidGoToXY(0u, 1u);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
			CLCD_VoidPrintChars(" you loss _-_");
    18c6:	80 e7       	ldi	r24, 0x70	; 112
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <CLCD_VoidPrintChars>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a8 ec       	ldi	r26, 0xC8	; 200
    18d4:	b2 e4       	ldi	r27, 0x42	; 66
    18d6:	8f a3       	std	Y+39, r24	; 0x27
    18d8:	98 a7       	std	Y+40, r25	; 0x28
    18da:	a9 a7       	std	Y+41, r26	; 0x29
    18dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18de:	6f a1       	ldd	r22, Y+39	; 0x27
    18e0:	78 a5       	ldd	r23, Y+40	; 0x28
    18e2:	89 a5       	ldd	r24, Y+41	; 0x29
    18e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4a e7       	ldi	r20, 0x7A	; 122
    18ec:	55 e4       	ldi	r21, 0x45	; 69
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	8b a3       	std	Y+35, r24	; 0x23
    18f8:	9c a3       	std	Y+36, r25	; 0x24
    18fa:	ad a3       	std	Y+37, r26	; 0x25
    18fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1900:	7c a1       	ldd	r23, Y+36	; 0x24
    1902:	8d a1       	ldd	r24, Y+37	; 0x25
    1904:	9e a1       	ldd	r25, Y+38	; 0x26
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e8       	ldi	r20, 0x80	; 128
    190c:	5f e3       	ldi	r21, 0x3F	; 63
    190e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1912:	88 23       	and	r24, r24
    1914:	2c f4       	brge	.+10     	; 0x1920 <PP_voidGameEnd+0x17e>
		__ticks = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9a a3       	std	Y+34, r25	; 0x22
    191c:	89 a3       	std	Y+33, r24	; 0x21
    191e:	3f c0       	rjmp	.+126    	; 0x199e <PP_voidGameEnd+0x1fc>
	else if (__tmp > 65535)
    1920:	6b a1       	ldd	r22, Y+35	; 0x23
    1922:	7c a1       	ldd	r23, Y+36	; 0x24
    1924:	8d a1       	ldd	r24, Y+37	; 0x25
    1926:	9e a1       	ldd	r25, Y+38	; 0x26
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	4f e7       	ldi	r20, 0x7F	; 127
    192e:	57 e4       	ldi	r21, 0x47	; 71
    1930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1934:	18 16       	cp	r1, r24
    1936:	4c f5       	brge	.+82     	; 0x198a <PP_voidGameEnd+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1938:	6f a1       	ldd	r22, Y+39	; 0x27
    193a:	78 a5       	ldd	r23, Y+40	; 0x28
    193c:	89 a5       	ldd	r24, Y+41	; 0x29
    193e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9a a3       	std	Y+34, r25	; 0x22
    195e:	89 a3       	std	Y+33, r24	; 0x21
    1960:	0f c0       	rjmp	.+30     	; 0x1980 <PP_voidGameEnd+0x1de>
    1962:	80 e9       	ldi	r24, 0x90	; 144
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	98 a3       	std	Y+32, r25	; 0x20
    1968:	8f 8f       	std	Y+31, r24	; 0x1f
    196a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    196c:	98 a1       	ldd	r25, Y+32	; 0x20
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <PP_voidGameEnd+0x1cc>
    1972:	98 a3       	std	Y+32, r25	; 0x20
    1974:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	9a a3       	std	Y+34, r25	; 0x22
    197e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1980:	89 a1       	ldd	r24, Y+33	; 0x21
    1982:	9a a1       	ldd	r25, Y+34	; 0x22
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	69 f7       	brne	.-38     	; 0x1962 <PP_voidGameEnd+0x1c0>
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <PP_voidGameEnd+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198a:	6b a1       	ldd	r22, Y+35	; 0x23
    198c:	7c a1       	ldd	r23, Y+36	; 0x24
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9a a3       	std	Y+34, r25	; 0x22
    199c:	89 a3       	std	Y+33, r24	; 0x21
    199e:	89 a1       	ldd	r24, Y+33	; 0x21
    19a0:	9a a1       	ldd	r25, Y+34	; 0x22
    19a2:	9e 8f       	std	Y+30, r25	; 0x1e
    19a4:	8d 8f       	std	Y+29, r24	; 0x1d
    19a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <PP_voidGameEnd+0x208>
    19ae:	9e 8f       	std	Y+30, r25	; 0x1e
    19b0:	8d 8f       	std	Y+29, r24	; 0x1d

void PP_voidGameEnd(uint8 copy_winStatus){
	//lose
	uint8 Local_u8Iter0;
	if (copy_winStatus == 0){
		for (Local_u8Iter0 = 0; Local_u8Iter0 < 5; Local_u8Iter0++)
    19b2:	89 ad       	ldd	r24, Y+57	; 0x39
    19b4:	8f 5f       	subi	r24, 0xFF	; 255
    19b6:	89 af       	std	Y+57, r24	; 0x39
    19b8:	89 ad       	ldd	r24, Y+57	; 0x39
    19ba:	85 30       	cpi	r24, 0x05	; 5
    19bc:	08 f4       	brcc	.+2      	; 0x19c0 <PP_voidGameEnd+0x21e>
    19be:	02 cf       	rjmp	.-508    	; 0x17c4 <PP_voidGameEnd+0x22>
    19c0:	00 c1       	rjmp	.+512    	; 0x1bc2 <PP_voidGameEnd+0x420>
			_delay_ms(100);
		}
	}
	//win
	else{
		for (Local_u8Iter0 = 0; Local_u8Iter0 < 5; Local_u8Iter0++)
    19c2:	19 ae       	std	Y+57, r1	; 0x39
    19c4:	fa c0       	rjmp	.+500    	; 0x1bba <PP_voidGameEnd+0x418>
		{
			// clear screen
			CLCD_VoidSendCommand(CLCD_CLEAR_CMD);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	0e 94 ce 1a 	call	0x359c	; 0x359c <CLCD_VoidSendCommand>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	a8 ec       	ldi	r26, 0xC8	; 200
    19d2:	b2 e4       	ldi	r27, 0x42	; 66
    19d4:	89 8f       	std	Y+25, r24	; 0x19
    19d6:	9a 8f       	std	Y+26, r25	; 0x1a
    19d8:	ab 8f       	std	Y+27, r26	; 0x1b
    19da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19dc:	69 8d       	ldd	r22, Y+25	; 0x19
    19de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	4a e7       	ldi	r20, 0x7A	; 122
    19ea:	55 e4       	ldi	r21, 0x45	; 69
    19ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	8d 8b       	std	Y+21, r24	; 0x15
    19f6:	9e 8b       	std	Y+22, r25	; 0x16
    19f8:	af 8b       	std	Y+23, r26	; 0x17
    19fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19fc:	6d 89       	ldd	r22, Y+21	; 0x15
    19fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1a00:	8f 89       	ldd	r24, Y+23	; 0x17
    1a02:	98 8d       	ldd	r25, Y+24	; 0x18
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	5f e3       	ldi	r21, 0x3F	; 63
    1a0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a10:	88 23       	and	r24, r24
    1a12:	2c f4       	brge	.+10     	; 0x1a1e <PP_voidGameEnd+0x27c>
		__ticks = 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9c 8b       	std	Y+20, r25	; 0x14
    1a1a:	8b 8b       	std	Y+19, r24	; 0x13
    1a1c:	3f c0       	rjmp	.+126    	; 0x1a9c <PP_voidGameEnd+0x2fa>
	else if (__tmp > 65535)
    1a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a20:	7e 89       	ldd	r23, Y+22	; 0x16
    1a22:	8f 89       	ldd	r24, Y+23	; 0x17
    1a24:	98 8d       	ldd	r25, Y+24	; 0x18
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	3f ef       	ldi	r19, 0xFF	; 255
    1a2a:	4f e7       	ldi	r20, 0x7F	; 127
    1a2c:	57 e4       	ldi	r21, 0x47	; 71
    1a2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a32:	18 16       	cp	r1, r24
    1a34:	4c f5       	brge	.+82     	; 0x1a88 <PP_voidGameEnd+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a36:	69 8d       	ldd	r22, Y+25	; 0x19
    1a38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e2       	ldi	r20, 0x20	; 32
    1a44:	51 e4       	ldi	r21, 0x41	; 65
    1a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	9c 8b       	std	Y+20, r25	; 0x14
    1a5c:	8b 8b       	std	Y+19, r24	; 0x13
    1a5e:	0f c0       	rjmp	.+30     	; 0x1a7e <PP_voidGameEnd+0x2dc>
    1a60:	80 e9       	ldi	r24, 0x90	; 144
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	9a 8b       	std	Y+18, r25	; 0x12
    1a66:	89 8b       	std	Y+17, r24	; 0x11
    1a68:	89 89       	ldd	r24, Y+17	; 0x11
    1a6a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <PP_voidGameEnd+0x2ca>
    1a70:	9a 8b       	std	Y+18, r25	; 0x12
    1a72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a74:	8b 89       	ldd	r24, Y+19	; 0x13
    1a76:	9c 89       	ldd	r25, Y+20	; 0x14
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a80:	9c 89       	ldd	r25, Y+20	; 0x14
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	69 f7       	brne	.-38     	; 0x1a60 <PP_voidGameEnd+0x2be>
    1a86:	14 c0       	rjmp	.+40     	; 0x1ab0 <PP_voidGameEnd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a88:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9c 8b       	std	Y+20, r25	; 0x14
    1a9a:	8b 8b       	std	Y+19, r24	; 0x13
    1a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa0:	98 8b       	std	Y+16, r25	; 0x10
    1aa2:	8f 87       	std	Y+15, r24	; 0x0f
    1aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa6:	98 89       	ldd	r25, Y+16	; 0x10
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <PP_voidGameEnd+0x306>
    1aac:	98 8b       	std	Y+16, r25	; 0x10
    1aae:	8f 87       	std	Y+15, r24	; 0x0f

			// flashing player loos
			_delay_ms(100);
			CLCD_voidGoToXY(0u, 0u);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
			CLCD_VoidPrintChars("  game over ...");
    1ab8:	80 e6       	ldi	r24, 0x60	; 96
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <CLCD_VoidPrintChars>
			CLCD_voidGoToXY(0u, 1u);
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	61 e0       	ldi	r22, 0x01	; 1
    1ac4:	0e 94 8e 1c 	call	0x391c	; 0x391c <CLCD_voidGoToXY>
			CLCD_VoidPrintChars(" you win *_*");
    1ac8:	8e e7       	ldi	r24, 0x7E	; 126
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <CLCD_VoidPrintChars>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a8 ec       	ldi	r26, 0xC8	; 200
    1ad6:	b2 e4       	ldi	r27, 0x42	; 66
    1ad8:	8b 87       	std	Y+11, r24	; 0x0b
    1ada:	9c 87       	std	Y+12, r25	; 0x0c
    1adc:	ad 87       	std	Y+13, r26	; 0x0d
    1ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4a e7       	ldi	r20, 0x7A	; 122
    1aee:	55 e4       	ldi	r21, 0x45	; 69
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8f 83       	std	Y+7, r24	; 0x07
    1afa:	98 87       	std	Y+8, r25	; 0x08
    1afc:	a9 87       	std	Y+9, r26	; 0x09
    1afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b00:	6f 81       	ldd	r22, Y+7	; 0x07
    1b02:	78 85       	ldd	r23, Y+8	; 0x08
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e8       	ldi	r20, 0x80	; 128
    1b0e:	5f e3       	ldi	r21, 0x3F	; 63
    1b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b14:	88 23       	and	r24, r24
    1b16:	2c f4       	brge	.+10     	; 0x1b22 <PP_voidGameEnd+0x380>
		__ticks = 1;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	3f c0       	rjmp	.+126    	; 0x1ba0 <PP_voidGameEnd+0x3fe>
	else if (__tmp > 65535)
    1b22:	6f 81       	ldd	r22, Y+7	; 0x07
    1b24:	78 85       	ldd	r23, Y+8	; 0x08
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	3f ef       	ldi	r19, 0xFF	; 255
    1b2e:	4f e7       	ldi	r20, 0x7F	; 127
    1b30:	57 e4       	ldi	r21, 0x47	; 71
    1b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	4c f5       	brge	.+82     	; 0x1b8c <PP_voidGameEnd+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e2       	ldi	r20, 0x20	; 32
    1b48:	51 e4       	ldi	r21, 0x41	; 65
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	0f c0       	rjmp	.+30     	; 0x1b82 <PP_voidGameEnd+0x3e0>
    1b64:	80 e9       	ldi	r24, 0x90	; 144
    1b66:	91 e0       	ldi	r25, 0x01	; 1
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <PP_voidGameEnd+0x3ce>
    1b74:	9c 83       	std	Y+4, r25	; 0x04
    1b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	9e 83       	std	Y+6, r25	; 0x06
    1b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	69 f7       	brne	.-38     	; 0x1b64 <PP_voidGameEnd+0x3c2>
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <PP_voidGameEnd+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	78 85       	ldd	r23, Y+8	; 0x08
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <PP_voidGameEnd+0x40a>
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
		}
	}
	//win
	else{
		for (Local_u8Iter0 = 0; Local_u8Iter0 < 5; Local_u8Iter0++)
    1bb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb6:	8f 5f       	subi	r24, 0xFF	; 255
    1bb8:	89 af       	std	Y+57, r24	; 0x39
    1bba:	89 ad       	ldd	r24, Y+57	; 0x39
    1bbc:	85 30       	cpi	r24, 0x05	; 5
    1bbe:	08 f4       	brcc	.+2      	; 0x1bc2 <PP_voidGameEnd+0x420>
    1bc0:	02 cf       	rjmp	.-508    	; 0x19c6 <PP_voidGameEnd+0x224>
			CLCD_voidGoToXY(0u, 1u);
			CLCD_VoidPrintChars(" you win *_*");
			_delay_ms(100);
		}
	}
}
    1bc2:	ea 96       	adiw	r28, 0x3a	; 58
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <PP_voidCheckINTFlag>:

uint8 PP_voidCheckINTFlag(uint8* ref_Flag,PP_ball_Config_t* ref_ball,PP_player_Config_t* ref_player){
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	67 97       	sbiw	r28, 0x17	; 23
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	99 8b       	std	Y+17, r25	; 0x11
    1bea:	88 8b       	std	Y+16, r24	; 0x10
    1bec:	7b 8b       	std	Y+19, r23	; 0x13
    1bee:	6a 8b       	std	Y+18, r22	; 0x12
    1bf0:	5d 8b       	std	Y+21, r21	; 0x15
    1bf2:	4c 8b       	std	Y+20, r20	; 0x14
	 * INT0
	 * 3 ball in posY0
	 * 2 ball in posY1
	 * 1 game end
	 *  */
	uint8 Local_u8Error_state = OK;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	8f 87       	std	Y+15, r24	; 0x0f
		if ((ref_ball != NULL  )&& (*ref_Flag!=NULL) &&(ref_player !=NULL))
    1bf8:	8a 89       	ldd	r24, Y+18	; 0x12
    1bfa:	9b 89       	ldd	r25, Y+19	; 0x13
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <PP_voidCheckINTFlag+0x2e>
    1c00:	d0 c0       	rjmp	.+416    	; 0x1da2 <PP_voidCheckINTFlag+0x1ce>
    1c02:	e8 89       	ldd	r30, Y+16	; 0x10
    1c04:	f9 89       	ldd	r31, Y+17	; 0x11
    1c06:	80 81       	ld	r24, Z
    1c08:	88 23       	and	r24, r24
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <PP_voidCheckINTFlag+0x3a>
    1c0c:	ca c0       	rjmp	.+404    	; 0x1da2 <PP_voidCheckINTFlag+0x1ce>
    1c0e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c10:	9d 89       	ldd	r25, Y+21	; 0x15
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <PP_voidCheckINTFlag+0x44>
    1c16:	c5 c0       	rjmp	.+394    	; 0x1da2 <PP_voidCheckINTFlag+0x1ce>
		{
			if (*ref_Flag== 1){
    1c18:	e8 89       	ldd	r30, Y+16	; 0x10
    1c1a:	f9 89       	ldd	r31, Y+17	; 0x11
    1c1c:	80 81       	ld	r24, Z
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <PP_voidCheckINTFlag+0x50>
    1c22:	c1 c0       	rjmp	.+386    	; 0x1da6 <PP_voidCheckINTFlag+0x1d2>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a8 e4       	ldi	r26, 0x48	; 72
    1c2a:	b2 e4       	ldi	r27, 0x42	; 66
    1c2c:	8b 87       	std	Y+11, r24	; 0x0b
    1c2e:	9c 87       	std	Y+12, r25	; 0x0c
    1c30:	ad 87       	std	Y+13, r26	; 0x0d
    1c32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a e7       	ldi	r20, 0x7A	; 122
    1c42:	55 e4       	ldi	r21, 0x45	; 69
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8f 83       	std	Y+7, r24	; 0x07
    1c4e:	98 87       	std	Y+8, r25	; 0x08
    1c50:	a9 87       	std	Y+9, r26	; 0x09
    1c52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c54:	6f 81       	ldd	r22, Y+7	; 0x07
    1c56:	78 85       	ldd	r23, Y+8	; 0x08
    1c58:	89 85       	ldd	r24, Y+9	; 0x09
    1c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e8       	ldi	r20, 0x80	; 128
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <PP_voidCheckINTFlag+0xa2>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <PP_voidCheckINTFlag+0x120>
	else if (__tmp > 65535)
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <PP_voidCheckINTFlag+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <PP_voidCheckINTFlag+0x102>
    1cb8:	80 e9       	ldi	r24, 0x90	; 144
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <PP_voidCheckINTFlag+0xf0>
    1cc8:	9c 83       	std	Y+4, r25	; 0x04
    1cca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	9e 83       	std	Y+6, r25	; 0x06
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <PP_voidCheckINTFlag+0xe4>
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <PP_voidCheckINTFlag+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce2:	78 85       	ldd	r23, Y+8	; 0x08
    1ce4:	89 85       	ldd	r24, Y+9	; 0x09
    1ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <PP_voidCheckINTFlag+0x12c>
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				switch(*ref_Flag){
    1d08:	e8 89       	ldd	r30, Y+16	; 0x10
    1d0a:	f9 89       	ldd	r31, Y+17	; 0x11
    1d0c:	80 81       	ld	r24, Z
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3f 8b       	std	Y+23, r19	; 0x17
    1d14:	2e 8b       	std	Y+22, r18	; 0x16
    1d16:	8e 89       	ldd	r24, Y+22	; 0x16
    1d18:	9f 89       	ldd	r25, Y+23	; 0x17
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	a9 f0       	breq	.+42     	; 0x1d4a <PP_voidCheckINTFlag+0x176>
    1d20:	2e 89       	ldd	r18, Y+22	; 0x16
    1d22:	3f 89       	ldd	r19, Y+23	; 0x17
    1d24:	23 30       	cpi	r18, 0x03	; 3
    1d26:	31 05       	cpc	r19, r1
    1d28:	e1 f0       	breq	.+56     	; 0x1d62 <PP_voidCheckINTFlag+0x18e>
    1d2a:	8e 89       	ldd	r24, Y+22	; 0x16
    1d2c:	9f 89       	ldd	r25, Y+23	; 0x17
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	91 05       	cpc	r25, r1
    1d32:	09 f5       	brne	.+66     	; 0x1d76 <PP_voidCheckINTFlag+0x1a2>
				case 1:
					//reset flag to 0;
					*ref_Flag= 0;
    1d34:	e8 89       	ldd	r30, Y+16	; 0x10
    1d36:	f9 89       	ldd	r31, Y+17	; 0x11
    1d38:	10 82       	st	Z, r1
					ref_ball->flag= OUTSCREEN;
    1d3a:	ea 89       	ldd	r30, Y+18	; 0x12
    1d3c:	fb 89       	ldd	r31, Y+19	; 0x13
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	82 83       	std	Z+2, r24	; 0x02
					PP_voidGameEnd(1);
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <PP_voidGameEnd>
    1d48:	16 c0       	rjmp	.+44     	; 0x1d76 <PP_voidCheckINTFlag+0x1a2>
					break;
				case 2:
					// reset flag to 0;
					*ref_Flag= 0;
    1d4a:	e8 89       	ldd	r30, Y+16	; 0x10
    1d4c:	f9 89       	ldd	r31, Y+17	; 0x11
    1d4e:	10 82       	st	Z, r1
					ref_ball->posY = 1;
    1d50:	ea 89       	ldd	r30, Y+18	; 0x12
    1d52:	fb 89       	ldd	r31, Y+19	; 0x13
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	81 83       	std	Z+1, r24	; 0x01
					ref_ball->flag = INSCREEN;
    1d58:	ea 89       	ldd	r30, Y+18	; 0x12
    1d5a:	fb 89       	ldd	r31, Y+19	; 0x13
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	82 83       	std	Z+2, r24	; 0x02
    1d60:	0a c0       	rjmp	.+20     	; 0x1d76 <PP_voidCheckINTFlag+0x1a2>

					break;
				case 3:
					// reset flag to 0;
					*ref_Flag = 0;
    1d62:	e8 89       	ldd	r30, Y+16	; 0x10
    1d64:	f9 89       	ldd	r31, Y+17	; 0x11
    1d66:	10 82       	st	Z, r1
					ref_ball->posY =0;
    1d68:	ea 89       	ldd	r30, Y+18	; 0x12
    1d6a:	fb 89       	ldd	r31, Y+19	; 0x13
    1d6c:	11 82       	std	Z+1, r1	; 0x01
					ref_ball->flag = INSCREEN;
    1d6e:	ea 89       	ldd	r30, Y+18	; 0x12
    1d70:	fb 89       	ldd	r31, Y+19	; 0x13
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	82 83       	std	Z+2, r24	; 0x02

					break;
				default: break;
				}
				//load ball data
				if(ref_player->screenPos == LEFT){
    1d76:	ec 89       	ldd	r30, Y+20	; 0x14
    1d78:	fd 89       	ldd	r31, Y+21	; 0x15
    1d7a:	81 81       	ldd	r24, Z+1	; 0x01
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	49 f4       	brne	.+18     	; 0x1d92 <PP_voidCheckINTFlag+0x1be>
					ref_ball->WalkDirection = LEFT;
    1d80:	ea 89       	ldd	r30, Y+18	; 0x12
    1d82:	fb 89       	ldd	r31, Y+19	; 0x13
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	87 83       	std	Z+7, r24	; 0x07
					ref_ball->posX = 15;
    1d88:	ea 89       	ldd	r30, Y+18	; 0x12
    1d8a:	fb 89       	ldd	r31, Y+19	; 0x13
    1d8c:	8f e0       	ldi	r24, 0x0F	; 15
    1d8e:	80 83       	st	Z, r24
    1d90:	0a c0       	rjmp	.+20     	; 0x1da6 <PP_voidCheckINTFlag+0x1d2>
				}
				else{
					ref_ball->WalkDirection = RIGHT;
    1d92:	ea 89       	ldd	r30, Y+18	; 0x12
    1d94:	fb 89       	ldd	r31, Y+19	; 0x13
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	87 83       	std	Z+7, r24	; 0x07
					ref_ball->posX = 0;
    1d9a:	ea 89       	ldd	r30, Y+18	; 0x12
    1d9c:	fb 89       	ldd	r31, Y+19	; 0x13
    1d9e:	10 82       	st	Z, r1
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <PP_voidCheckINTFlag+0x1d2>
				}

		}
		}else
			Local_u8Error_state = NULL_PTR;
    1da2:	83 e0       	ldi	r24, 0x03	; 3
    1da4:	8f 87       	std	Y+15, r24	; 0x0f
		return Local_u8Error_state;
    1da6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1da8:	67 96       	adiw	r28, 0x17	; 23
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <PP_u8GameRun>:

uint8 PP_u8GameRun(PP_ball_Config_t *ref_ball, PP_player_Config_t *ref_player){
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <PP_u8GameRun+0x6>
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <PP_u8GameRun+0x8>
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <PP_u8GameRun+0xa>
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	9c 83       	std	Y+4, r25	; 0x04
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    1dcc:	7e 83       	std	Y+6, r23	; 0x06
    1dce:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_u8Error_state = OK;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	89 83       	std	Y+1, r24	; 0x01
	if (ref_ball != NULL && ref_player != NULL)
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	09 f4       	brne	.+2      	; 0x1dde <PP_u8GameRun+0x24>
    1ddc:	4a c0       	rjmp	.+148    	; 0x1e72 <PP_u8GameRun+0xb8>
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <PP_u8GameRun+0x2e>
    1de6:	45 c0       	rjmp	.+138    	; 0x1e72 <PP_u8GameRun+0xb8>
	{
		uint8 Local_u8GameState = 0;
    1de8:	1a 82       	std	Y+2, r1	; 0x02
		if (PP_u8BallMoving(ref_ball, ref_player) == OK)
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	2d 81       	ldd	r18, Y+5	; 0x05
    1df0:	3e 81       	ldd	r19, Y+6	; 0x06
    1df2:	b9 01       	movw	r22, r18
    1df4:	0e 94 4b 07 	call	0xe96	; 0xe96 <PP_u8BallMoving>
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	e9 f5       	brne	.+122    	; 0x1e76 <PP_u8GameRun+0xbc>
		{
			// check if the ball arrive to the end of screen
			if (PP_u8BallArrive(ref_ball, ref_player, &Local_u8GameState) == OK)
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	2d 81       	ldd	r18, Y+5	; 0x05
    1e02:	3e 81       	ldd	r19, Y+6	; 0x06
    1e04:	ae 01       	movw	r20, r28
    1e06:	4e 5f       	subi	r20, 0xFE	; 254
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0a:	b9 01       	movw	r22, r18
    1e0c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <PP_u8BallArrive>
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	89 f5       	brne	.+98     	; 0x1e76 <PP_u8GameRun+0xbc>
			{
				//player hit the ball and return it
				if (Local_u8GameState == 1U)
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	81 30       	cpi	r24, 0x01	; 1
    1e18:	f9 f4       	brne	.+62     	; 0x1e58 <PP_u8GameRun+0x9e>
				{
					PP_u8NotifyMC_ball(ref_ball);
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	0e 94 be 09 	call	0x137c	; 0x137c <PP_u8NotifyMC_ball>
					//increase playing level by increasing the speed
					if(ref_ball->speed-25 >0)
    1e22:	eb 81       	ldd	r30, Y+3	; 0x03
    1e24:	fc 81       	ldd	r31, Y+4	; 0x04
    1e26:	83 81       	ldd	r24, Z+3	; 0x03
    1e28:	94 81       	ldd	r25, Z+4	; 0x04
    1e2a:	a5 81       	ldd	r26, Z+5	; 0x05
    1e2c:	b6 81       	ldd	r27, Z+6	; 0x06
    1e2e:	89 31       	cpi	r24, 0x19	; 25
    1e30:	91 05       	cpc	r25, r1
    1e32:	a1 05       	cpc	r26, r1
    1e34:	b1 05       	cpc	r27, r1
    1e36:	f9 f0       	breq	.+62     	; 0x1e76 <PP_u8GameRun+0xbc>
						ref_ball->speed -=25;
    1e38:	eb 81       	ldd	r30, Y+3	; 0x03
    1e3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e3c:	83 81       	ldd	r24, Z+3	; 0x03
    1e3e:	94 81       	ldd	r25, Z+4	; 0x04
    1e40:	a5 81       	ldd	r26, Z+5	; 0x05
    1e42:	b6 81       	ldd	r27, Z+6	; 0x06
    1e44:	49 97       	sbiw	r24, 0x19	; 25
    1e46:	a1 09       	sbc	r26, r1
    1e48:	b1 09       	sbc	r27, r1
    1e4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e4e:	83 83       	std	Z+3, r24	; 0x03
    1e50:	94 83       	std	Z+4, r25	; 0x04
    1e52:	a5 83       	std	Z+5, r26	; 0x05
    1e54:	b6 83       	std	Z+6, r27	; 0x06
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <PP_u8GameRun+0xbc>
				}
				// player missed the ball
				else if (Local_u8GameState == 0U)
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	88 23       	and	r24, r24
    1e5c:	61 f4       	brne	.+24     	; 0x1e76 <PP_u8GameRun+0xbc>
				{
					ref_ball->flag= OUTSCREEN;
    1e5e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e60:	fc 81       	ldd	r31, Y+4	; 0x04
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	82 83       	std	Z+2, r24	; 0x02
					PP_voidNotifyMCGameEnd();
    1e66:	0e 94 b0 0b 	call	0x1760	; 0x1760 <PP_voidNotifyMCGameEnd>
					PP_voidGameEnd(0);
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <PP_voidGameEnd>
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <PP_u8GameRun+0xbc>

				}
			}
		}
	}else
		Local_u8Error_state = NULL_PTR;
    1e72:	83 e0       	ldi	r24, 0x03	; 3
    1e74:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Error_state;
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e78:	26 96       	adiw	r28, 0x06	; 6
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <STM_u8Rotate>:
#include "../../libraries/ErrType.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"
#include "STM_interface.h"

uint8 STM_u8Rotate(const STM_CONFIG_t *referance_stepper, uint16 copy_u16Angle, STM_DIRECTION_t copy_STMdirection)
{
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	ca 57       	subi	r28, 0x7A	; 122
    1e98:	d0 40       	sbci	r29, 0x00	; 0
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ea 58       	subi	r30, 0x8A	; 138
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e8 58       	subi	r30, 0x88	; 136
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	71 83       	std	Z+1, r23	; 0x01
    1eb6:	60 83       	st	Z, r22
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e6 58       	subi	r30, 0x86	; 134
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	40 83       	st	Z, r20
    uint8 Local_u8ErrorType = OK;
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	eb 58       	subi	r30, 0x8B	; 139
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	80 83       	st	Z, r24
    if (referance_stepper != NULL)
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ea 58       	subi	r30, 0x8A	; 138
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <STM_u8Rotate+0x50>
    1ed8:	4f c6       	rjmp	.+3230   	; 0x2b78 <STM_u8Rotate+0xcee>
    {


        /*360(full roatate)/0.1758(full step degree) ) = 2048 (full step counts)*/
        uint16 local_u16steps = ((uint32)copy_u16Angle * 2048UL) / 360UL; // convert degree to number of full step
    1eda:	fe 01       	movw	r30, r28
    1edc:	e8 58       	subi	r30, 0x88	; 136
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	91 81       	ldd	r25, Z+1	; 0x01
    1ee4:	cc 01       	movw	r24, r24
    1ee6:	a0 e0       	ldi	r26, 0x00	; 0
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	07 2e       	mov	r0, r23
    1eec:	7b e0       	ldi	r23, 0x0B	; 11
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	aa 1f       	adc	r26, r26
    1ef4:	bb 1f       	adc	r27, r27
    1ef6:	7a 95       	dec	r23
    1ef8:	d1 f7       	brne	.-12     	; 0x1eee <STM_u8Rotate+0x64>
    1efa:	70 2d       	mov	r23, r0
    1efc:	28 e6       	ldi	r18, 0x68	; 104
    1efe:	31 e0       	ldi	r19, 0x01	; 1
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <__udivmodsi4>
    1f0c:	da 01       	movw	r26, r20
    1f0e:	c9 01       	movw	r24, r18
    1f10:	fe 01       	movw	r30, r28
    1f12:	ed 58       	subi	r30, 0x8D	; 141
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
        uint16 local_u16Iter = 0;
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	ef 58       	subi	r30, 0x8F	; 143
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	11 82       	std	Z+1, r1	; 0x01
    1f22:	10 82       	st	Z, r1
        if (copy_STMdirection == STM_COUNTER_CLOCK_WISE)
    1f24:	fe 01       	movw	r30, r28
    1f26:	e6 58       	subi	r30, 0x86	; 134
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 81       	ld	r24, Z
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <STM_u8Rotate+0xa8>
    1f30:	74 c3       	rjmp	.+1768   	; 0x261a <STM_u8Rotate+0x790>
    1f32:	63 c3       	rjmp	.+1734   	; 0x25fa <STM_u8Rotate+0x770>
        {
        	for (; local_u16Iter < local_u16steps; local_u16Iter++)
			{
				if (local_u16Iter % 4 == 0)
    1f34:	fe 01       	movw	r30, r28
    1f36:	ef 58       	subi	r30, 0x8F	; 143
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	91 81       	ldd	r25, Z+1	; 0x01
    1f3e:	83 70       	andi	r24, 0x03	; 3
    1f40:	90 70       	andi	r25, 0x00	; 0
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	91 f4       	brne	.+36     	; 0x1f6a <STM_u8Rotate+0xe0>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_HIGH);
    1f46:	fe 01       	movw	r30, r28
    1f48:	ea 58       	subi	r30, 0x8A	; 138
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	01 90       	ld	r0, Z+
    1f4e:	f0 81       	ld	r31, Z
    1f50:	e0 2d       	mov	r30, r0
    1f52:	80 81       	ld	r24, Z
    1f54:	fe 01       	movw	r30, r28
    1f56:	ea 58       	subi	r30, 0x8A	; 138
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	01 90       	ld	r0, Z+
    1f5c:	f0 81       	ld	r31, Z
    1f5e:	e0 2d       	mov	r30, r0
    1f60:	93 81       	ldd	r25, Z+3	; 0x03
    1f62:	69 2f       	mov	r22, r25
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_LOW); // activate this pin in uln2003a
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ea 58       	subi	r30, 0x8A	; 138
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	01 90       	ld	r0, Z+
    1f72:	f0 81       	ld	r31, Z
    1f74:	e0 2d       	mov	r30, r0
    1f76:	80 81       	ld	r24, Z
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ea 58       	subi	r30, 0x8A	; 138
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	01 90       	ld	r0, Z+
    1f80:	f0 81       	ld	r31, Z
    1f82:	e0 2d       	mov	r30, r0
    1f84:	94 81       	ldd	r25, Z+4	; 0x04
    1f86:	69 2f       	mov	r22, r25
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e3 59       	subi	r30, 0x93	; 147
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 e4       	ldi	r26, 0x40	; 64
    1f9a:	b0 e4       	ldi	r27, 0x40	; 64
    1f9c:	80 83       	st	Z, r24
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	a2 83       	std	Z+2, r26	; 0x02
    1fa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	8e 01       	movw	r16, r28
    1fa6:	07 59       	subi	r16, 0x97	; 151
    1fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1faa:	fe 01       	movw	r30, r28
    1fac:	e3 59       	subi	r30, 0x93	; 147
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	60 81       	ld	r22, Z
    1fb2:	71 81       	ldd	r23, Z+1	; 0x01
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	93 81       	ldd	r25, Z+3	; 0x03
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a e7       	ldi	r20, 0x7A	; 122
    1fbe:	55 e4       	ldi	r21, 0x45	; 69
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	f8 01       	movw	r30, r16
    1fca:	80 83       	st	Z, r24
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	a2 83       	std	Z+2, r26	; 0x02
    1fd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e7 59       	subi	r30, 0x97	; 151
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	44 f4       	brge	.+16     	; 0x2000 <STM_u8Rotate+0x176>
		__ticks = 1;
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e9 59       	subi	r30, 0x99	; 153
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	91 83       	std	Z+1, r25	; 0x01
    1ffc:	80 83       	st	Z, r24
    1ffe:	64 c0       	rjmp	.+200    	; 0x20c8 <STM_u8Rotate+0x23e>
	else if (__tmp > 65535)
    2000:	fe 01       	movw	r30, r28
    2002:	e7 59       	subi	r30, 0x97	; 151
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	60 81       	ld	r22, Z
    2008:	71 81       	ldd	r23, Z+1	; 0x01
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	3f ef       	ldi	r19, 0xFF	; 255
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	57 e4       	ldi	r21, 0x47	; 71
    2016:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	0c f0       	brlt	.+2      	; 0x2020 <STM_u8Rotate+0x196>
    201e:	43 c0       	rjmp	.+134    	; 0x20a6 <STM_u8Rotate+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	fe 01       	movw	r30, r28
    2022:	e3 59       	subi	r30, 0x93	; 147
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e2       	ldi	r20, 0x20	; 32
    2034:	51 e4       	ldi	r21, 0x41	; 65
    2036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	8e 01       	movw	r16, r28
    2040:	09 59       	subi	r16, 0x99	; 153
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	f8 01       	movw	r30, r16
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	80 83       	st	Z, r24
    2056:	1f c0       	rjmp	.+62     	; 0x2096 <STM_u8Rotate+0x20c>
    2058:	fe 01       	movw	r30, r28
    205a:	eb 59       	subi	r30, 0x9B	; 155
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 e9       	ldi	r24, 0x90	; 144
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
    2066:	fe 01       	movw	r30, r28
    2068:	eb 59       	subi	r30, 0x9B	; 155
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <STM_u8Rotate+0x1e6>
    2074:	fe 01       	movw	r30, r28
    2076:	eb 59       	subi	r30, 0x9B	; 155
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207e:	de 01       	movw	r26, r28
    2080:	a9 59       	subi	r26, 0x99	; 153
    2082:	bf 4f       	sbci	r27, 0xFF	; 255
    2084:	fe 01       	movw	r30, r28
    2086:	e9 59       	subi	r30, 0x99	; 153
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	11 96       	adiw	r26, 0x01	; 1
    2092:	9c 93       	st	X, r25
    2094:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	fe 01       	movw	r30, r28
    2098:	e9 59       	subi	r30, 0x99	; 153
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	91 81       	ldd	r25, Z+1	; 0x01
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	d1 f6       	brne	.-76     	; 0x2058 <STM_u8Rotate+0x1ce>
    20a4:	28 c0       	rjmp	.+80     	; 0x20f6 <STM_u8Rotate+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	8e 01       	movw	r16, r28
    20a8:	09 59       	subi	r16, 0x99	; 153
    20aa:	1f 4f       	sbci	r17, 0xFF	; 255
    20ac:	fe 01       	movw	r30, r28
    20ae:	e7 59       	subi	r30, 0x97	; 151
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	60 81       	ld	r22, Z
    20b4:	71 81       	ldd	r23, Z+1	; 0x01
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	f8 01       	movw	r30, r16
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	80 83       	st	Z, r24
    20c8:	de 01       	movw	r26, r28
    20ca:	ad 59       	subi	r26, 0x9D	; 157
    20cc:	bf 4f       	sbci	r27, 0xFF	; 255
    20ce:	fe 01       	movw	r30, r28
    20d0:	e9 59       	subi	r30, 0x99	; 153
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 81       	ld	r24, Z
    20d6:	91 81       	ldd	r25, Z+1	; 0x01
    20d8:	11 96       	adiw	r26, 0x01	; 1
    20da:	9c 93       	st	X, r25
    20dc:	8e 93       	st	-X, r24
    20de:	fe 01       	movw	r30, r28
    20e0:	ed 59       	subi	r30, 0x9D	; 157
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <STM_u8Rotate+0x25e>
    20ec:	fe 01       	movw	r30, r28
    20ee:	ed 59       	subi	r30, 0x9D	; 157
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	80 83       	st	Z, r24
				_delay_ms(3);
				if (local_u16Iter % 4 == 1)
    20f6:	fe 01       	movw	r30, r28
    20f8:	ef 58       	subi	r30, 0x8F	; 143
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	83 70       	andi	r24, 0x03	; 3
    2102:	90 70       	andi	r25, 0x00	; 0
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	91 05       	cpc	r25, r1
    2108:	91 f4       	brne	.+36     	; 0x212e <STM_u8Rotate+0x2a4>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_HIGH);
    210a:	fe 01       	movw	r30, r28
    210c:	ea 58       	subi	r30, 0x8A	; 138
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	01 90       	ld	r0, Z+
    2112:	f0 81       	ld	r31, Z
    2114:	e0 2d       	mov	r30, r0
    2116:	80 81       	ld	r24, Z
    2118:	fe 01       	movw	r30, r28
    211a:	ea 58       	subi	r30, 0x8A	; 138
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	01 90       	ld	r0, Z+
    2120:	f0 81       	ld	r31, Z
    2122:	e0 2d       	mov	r30, r0
    2124:	92 81       	ldd	r25, Z+2	; 0x02
    2126:	69 2f       	mov	r22, r25
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_LOW); // activate this pin in uln2003a
    212e:	fe 01       	movw	r30, r28
    2130:	ea 58       	subi	r30, 0x8A	; 138
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	01 90       	ld	r0, Z+
    2136:	f0 81       	ld	r31, Z
    2138:	e0 2d       	mov	r30, r0
    213a:	80 81       	ld	r24, Z
    213c:	fe 01       	movw	r30, r28
    213e:	ea 58       	subi	r30, 0x8A	; 138
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	01 90       	ld	r0, Z+
    2144:	f0 81       	ld	r31, Z
    2146:	e0 2d       	mov	r30, r0
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	69 2f       	mov	r22, r25
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2152:	fe 01       	movw	r30, r28
    2154:	e1 5a       	subi	r30, 0xA1	; 161
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e4       	ldi	r26, 0x40	; 64
    215e:	b0 e4       	ldi	r27, 0x40	; 64
    2160:	80 83       	st	Z, r24
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	a2 83       	std	Z+2, r26	; 0x02
    2166:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2168:	8e 01       	movw	r16, r28
    216a:	05 5a       	subi	r16, 0xA5	; 165
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
    216e:	fe 01       	movw	r30, r28
    2170:	e1 5a       	subi	r30, 0xA1	; 161
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	60 81       	ld	r22, Z
    2176:	71 81       	ldd	r23, Z+1	; 0x01
    2178:	82 81       	ldd	r24, Z+2	; 0x02
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a e7       	ldi	r20, 0x7A	; 122
    2182:	55 e4       	ldi	r21, 0x45	; 69
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	f8 01       	movw	r30, r16
    218e:	80 83       	st	Z, r24
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	a2 83       	std	Z+2, r26	; 0x02
    2194:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2196:	fe 01       	movw	r30, r28
    2198:	e5 5a       	subi	r30, 0xA5	; 165
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	44 f4       	brge	.+16     	; 0x21c4 <STM_u8Rotate+0x33a>
		__ticks = 1;
    21b4:	fe 01       	movw	r30, r28
    21b6:	e7 5a       	subi	r30, 0xA7	; 167
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	80 83       	st	Z, r24
    21c2:	64 c0       	rjmp	.+200    	; 0x228c <STM_u8Rotate+0x402>
	else if (__tmp > 65535)
    21c4:	fe 01       	movw	r30, r28
    21c6:	e5 5a       	subi	r30, 0xA5	; 165
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	3f ef       	ldi	r19, 0xFF	; 255
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	57 e4       	ldi	r21, 0x47	; 71
    21da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <STM_u8Rotate+0x35a>
    21e2:	43 c0       	rjmp	.+134    	; 0x226a <STM_u8Rotate+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	fe 01       	movw	r30, r28
    21e6:	e1 5a       	subi	r30, 0xA1	; 161
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	60 81       	ld	r22, Z
    21ec:	71 81       	ldd	r23, Z+1	; 0x01
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8e 01       	movw	r16, r28
    2204:	07 5a       	subi	r16, 0xA7	; 167
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	f8 01       	movw	r30, r16
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
    221a:	1f c0       	rjmp	.+62     	; 0x225a <STM_u8Rotate+0x3d0>
    221c:	fe 01       	movw	r30, r28
    221e:	e9 5a       	subi	r30, 0xA9	; 169
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	80 e9       	ldi	r24, 0x90	; 144
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	fe 01       	movw	r30, r28
    222c:	e9 5a       	subi	r30, 0xA9	; 169
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 81       	ld	r24, Z
    2232:	91 81       	ldd	r25, Z+1	; 0x01
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <STM_u8Rotate+0x3aa>
    2238:	fe 01       	movw	r30, r28
    223a:	e9 5a       	subi	r30, 0xA9	; 169
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2242:	de 01       	movw	r26, r28
    2244:	a7 5a       	subi	r26, 0xA7	; 167
    2246:	bf 4f       	sbci	r27, 0xFF	; 255
    2248:	fe 01       	movw	r30, r28
    224a:	e7 5a       	subi	r30, 0xA7	; 167
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	9c 93       	st	X, r25
    2258:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225a:	fe 01       	movw	r30, r28
    225c:	e7 5a       	subi	r30, 0xA7	; 167
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	d1 f6       	brne	.-76     	; 0x221c <STM_u8Rotate+0x392>
    2268:	28 c0       	rjmp	.+80     	; 0x22ba <STM_u8Rotate+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226a:	8e 01       	movw	r16, r28
    226c:	07 5a       	subi	r16, 0xA7	; 167
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	fe 01       	movw	r30, r28
    2272:	e5 5a       	subi	r30, 0xA5	; 165
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	60 81       	ld	r22, Z
    2278:	71 81       	ldd	r23, Z+1	; 0x01
    227a:	82 81       	ldd	r24, Z+2	; 0x02
    227c:	93 81       	ldd	r25, Z+3	; 0x03
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	f8 01       	movw	r30, r16
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	80 83       	st	Z, r24
    228c:	de 01       	movw	r26, r28
    228e:	ab 5a       	subi	r26, 0xAB	; 171
    2290:	bf 4f       	sbci	r27, 0xFF	; 255
    2292:	fe 01       	movw	r30, r28
    2294:	e7 5a       	subi	r30, 0xA7	; 167
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	11 96       	adiw	r26, 0x01	; 1
    229e:	9c 93       	st	X, r25
    22a0:	8e 93       	st	-X, r24
    22a2:	fe 01       	movw	r30, r28
    22a4:	eb 5a       	subi	r30, 0xAB	; 171
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <STM_u8Rotate+0x422>
    22b0:	fe 01       	movw	r30, r28
    22b2:	eb 5a       	subi	r30, 0xAB	; 171
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
				_delay_ms(3);
				if (local_u16Iter % 4 == 2)
    22ba:	fe 01       	movw	r30, r28
    22bc:	ef 58       	subi	r30, 0x8F	; 143
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	80 81       	ld	r24, Z
    22c2:	91 81       	ldd	r25, Z+1	; 0x01
    22c4:	83 70       	andi	r24, 0x03	; 3
    22c6:	90 70       	andi	r25, 0x00	; 0
    22c8:	82 30       	cpi	r24, 0x02	; 2
    22ca:	91 05       	cpc	r25, r1
    22cc:	91 f4       	brne	.+36     	; 0x22f2 <STM_u8Rotate+0x468>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_HIGH);
    22ce:	fe 01       	movw	r30, r28
    22d0:	ea 58       	subi	r30, 0x8A	; 138
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	01 90       	ld	r0, Z+
    22d6:	f0 81       	ld	r31, Z
    22d8:	e0 2d       	mov	r30, r0
    22da:	80 81       	ld	r24, Z
    22dc:	fe 01       	movw	r30, r28
    22de:	ea 58       	subi	r30, 0x8A	; 138
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	01 90       	ld	r0, Z+
    22e4:	f0 81       	ld	r31, Z
    22e6:	e0 2d       	mov	r30, r0
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	69 2f       	mov	r22, r25
    22ec:	41 e0       	ldi	r20, 0x01	; 1
    22ee:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_LOW); // activate this pin in uln2003a
    22f2:	fe 01       	movw	r30, r28
    22f4:	ea 58       	subi	r30, 0x8A	; 138
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	01 90       	ld	r0, Z+
    22fa:	f0 81       	ld	r31, Z
    22fc:	e0 2d       	mov	r30, r0
    22fe:	80 81       	ld	r24, Z
    2300:	fe 01       	movw	r30, r28
    2302:	ea 58       	subi	r30, 0x8A	; 138
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	01 90       	ld	r0, Z+
    2308:	f0 81       	ld	r31, Z
    230a:	e0 2d       	mov	r30, r0
    230c:	92 81       	ldd	r25, Z+2	; 0x02
    230e:	69 2f       	mov	r22, r25
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2316:	fe 01       	movw	r30, r28
    2318:	ef 5a       	subi	r30, 0xAF	; 175
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a0 e4       	ldi	r26, 0x40	; 64
    2322:	b0 e4       	ldi	r27, 0x40	; 64
    2324:	80 83       	st	Z, r24
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	a2 83       	std	Z+2, r26	; 0x02
    232a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	8e 01       	movw	r16, r28
    232e:	03 5b       	subi	r16, 0xB3	; 179
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	fe 01       	movw	r30, r28
    2334:	ef 5a       	subi	r30, 0xAF	; 175
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a e7       	ldi	r20, 0x7A	; 122
    2346:	55 e4       	ldi	r21, 0x45	; 69
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	f8 01       	movw	r30, r16
    2352:	80 83       	st	Z, r24
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	a2 83       	std	Z+2, r26	; 0x02
    2358:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    235a:	fe 01       	movw	r30, r28
    235c:	e3 5b       	subi	r30, 0xB3	; 179
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e8       	ldi	r20, 0x80	; 128
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2374:	88 23       	and	r24, r24
    2376:	44 f4       	brge	.+16     	; 0x2388 <STM_u8Rotate+0x4fe>
		__ticks = 1;
    2378:	fe 01       	movw	r30, r28
    237a:	e5 5b       	subi	r30, 0xB5	; 181
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	80 83       	st	Z, r24
    2386:	64 c0       	rjmp	.+200    	; 0x2450 <STM_u8Rotate+0x5c6>
	else if (__tmp > 65535)
    2388:	fe 01       	movw	r30, r28
    238a:	e3 5b       	subi	r30, 0xB3	; 179
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	3f ef       	ldi	r19, 0xFF	; 255
    239a:	4f e7       	ldi	r20, 0x7F	; 127
    239c:	57 e4       	ldi	r21, 0x47	; 71
    239e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a2:	18 16       	cp	r1, r24
    23a4:	0c f0       	brlt	.+2      	; 0x23a8 <STM_u8Rotate+0x51e>
    23a6:	43 c0       	rjmp	.+134    	; 0x242e <STM_u8Rotate+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	fe 01       	movw	r30, r28
    23aa:	ef 5a       	subi	r30, 0xAF	; 175
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e2       	ldi	r20, 0x20	; 32
    23bc:	51 e4       	ldi	r21, 0x41	; 65
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8e 01       	movw	r16, r28
    23c8:	05 5b       	subi	r16, 0xB5	; 181
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	f8 01       	movw	r30, r16
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	80 83       	st	Z, r24
    23de:	1f c0       	rjmp	.+62     	; 0x241e <STM_u8Rotate+0x594>
    23e0:	fe 01       	movw	r30, r28
    23e2:	e7 5b       	subi	r30, 0xB7	; 183
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 e9       	ldi	r24, 0x90	; 144
    23e8:	91 e0       	ldi	r25, 0x01	; 1
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	80 83       	st	Z, r24
    23ee:	fe 01       	movw	r30, r28
    23f0:	e7 5b       	subi	r30, 0xB7	; 183
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <STM_u8Rotate+0x56e>
    23fc:	fe 01       	movw	r30, r28
    23fe:	e7 5b       	subi	r30, 0xB7	; 183
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2406:	de 01       	movw	r26, r28
    2408:	a5 5b       	subi	r26, 0xB5	; 181
    240a:	bf 4f       	sbci	r27, 0xFF	; 255
    240c:	fe 01       	movw	r30, r28
    240e:	e5 5b       	subi	r30, 0xB5	; 181
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	11 96       	adiw	r26, 0x01	; 1
    241a:	9c 93       	st	X, r25
    241c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241e:	fe 01       	movw	r30, r28
    2420:	e5 5b       	subi	r30, 0xB5	; 181
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	d1 f6       	brne	.-76     	; 0x23e0 <STM_u8Rotate+0x556>
    242c:	28 c0       	rjmp	.+80     	; 0x247e <STM_u8Rotate+0x5f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242e:	8e 01       	movw	r16, r28
    2430:	05 5b       	subi	r16, 0xB5	; 181
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	fe 01       	movw	r30, r28
    2436:	e3 5b       	subi	r30, 0xB3	; 179
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	60 81       	ld	r22, Z
    243c:	71 81       	ldd	r23, Z+1	; 0x01
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	93 81       	ldd	r25, Z+3	; 0x03
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	f8 01       	movw	r30, r16
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	80 83       	st	Z, r24
    2450:	de 01       	movw	r26, r28
    2452:	a9 5b       	subi	r26, 0xB9	; 185
    2454:	bf 4f       	sbci	r27, 0xFF	; 255
    2456:	fe 01       	movw	r30, r28
    2458:	e5 5b       	subi	r30, 0xB5	; 181
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	91 81       	ldd	r25, Z+1	; 0x01
    2460:	11 96       	adiw	r26, 0x01	; 1
    2462:	9c 93       	st	X, r25
    2464:	8e 93       	st	-X, r24
    2466:	fe 01       	movw	r30, r28
    2468:	e9 5b       	subi	r30, 0xB9	; 185
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <STM_u8Rotate+0x5e6>
    2474:	fe 01       	movw	r30, r28
    2476:	e9 5b       	subi	r30, 0xB9	; 185
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
				_delay_ms(3);
				if (local_u16Iter % 4 == 3)
    247e:	fe 01       	movw	r30, r28
    2480:	ef 58       	subi	r30, 0x8F	; 143
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	83 70       	andi	r24, 0x03	; 3
    248a:	90 70       	andi	r25, 0x00	; 0
    248c:	83 30       	cpi	r24, 0x03	; 3
    248e:	91 05       	cpc	r25, r1
    2490:	91 f4       	brne	.+36     	; 0x24b6 <STM_u8Rotate+0x62c>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_HIGH);
    2492:	fe 01       	movw	r30, r28
    2494:	ea 58       	subi	r30, 0x8A	; 138
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	01 90       	ld	r0, Z+
    249a:	f0 81       	ld	r31, Z
    249c:	e0 2d       	mov	r30, r0
    249e:	80 81       	ld	r24, Z
    24a0:	fe 01       	movw	r30, r28
    24a2:	ea 58       	subi	r30, 0x8A	; 138
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	01 90       	ld	r0, Z+
    24a8:	f0 81       	ld	r31, Z
    24aa:	e0 2d       	mov	r30, r0
    24ac:	94 81       	ldd	r25, Z+4	; 0x04
    24ae:	69 2f       	mov	r22, r25
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_LOW); // activate this pin in uln2003a
    24b6:	fe 01       	movw	r30, r28
    24b8:	ea 58       	subi	r30, 0x8A	; 138
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	01 90       	ld	r0, Z+
    24be:	f0 81       	ld	r31, Z
    24c0:	e0 2d       	mov	r30, r0
    24c2:	80 81       	ld	r24, Z
    24c4:	fe 01       	movw	r30, r28
    24c6:	ea 58       	subi	r30, 0x8A	; 138
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	01 90       	ld	r0, Z+
    24cc:	f0 81       	ld	r31, Z
    24ce:	e0 2d       	mov	r30, r0
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	69 2f       	mov	r22, r25
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    24da:	fe 01       	movw	r30, r28
    24dc:	ed 5b       	subi	r30, 0xBD	; 189
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a0 e4       	ldi	r26, 0x40	; 64
    24e6:	b0 e4       	ldi	r27, 0x40	; 64
    24e8:	80 83       	st	Z, r24
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	a2 83       	std	Z+2, r26	; 0x02
    24ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f0:	8e 01       	movw	r16, r28
    24f2:	01 5c       	subi	r16, 0xC1	; 193
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	fe 01       	movw	r30, r28
    24f8:	ed 5b       	subi	r30, 0xBD	; 189
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a e7       	ldi	r20, 0x7A	; 122
    250a:	55 e4       	ldi	r21, 0x45	; 69
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	f8 01       	movw	r30, r16
    2516:	80 83       	st	Z, r24
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	a2 83       	std	Z+2, r26	; 0x02
    251c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    251e:	fe 01       	movw	r30, r28
    2520:	ff 96       	adiw	r30, 0x3f	; 63
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2536:	88 23       	and	r24, r24
    2538:	2c f4       	brge	.+10     	; 0x2544 <STM_u8Rotate+0x6ba>
		__ticks = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e af       	std	Y+62, r25	; 0x3e
    2540:	8d af       	std	Y+61, r24	; 0x3d
    2542:	46 c0       	rjmp	.+140    	; 0x25d0 <STM_u8Rotate+0x746>
	else if (__tmp > 65535)
    2544:	fe 01       	movw	r30, r28
    2546:	ff 96       	adiw	r30, 0x3f	; 63
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	64 f5       	brge	.+88     	; 0x25b8 <STM_u8Rotate+0x72e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	fe 01       	movw	r30, r28
    2562:	ed 5b       	subi	r30, 0xBD	; 189
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e2       	ldi	r20, 0x20	; 32
    2574:	51 e4       	ldi	r21, 0x41	; 65
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9e af       	std	Y+62, r25	; 0x3e
    258c:	8d af       	std	Y+61, r24	; 0x3d
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <STM_u8Rotate+0x724>
    2590:	80 e9       	ldi	r24, 0x90	; 144
    2592:	91 e0       	ldi	r25, 0x01	; 1
    2594:	9c af       	std	Y+60, r25	; 0x3c
    2596:	8b af       	std	Y+59, r24	; 0x3b
    2598:	8b ad       	ldd	r24, Y+59	; 0x3b
    259a:	9c ad       	ldd	r25, Y+60	; 0x3c
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <STM_u8Rotate+0x712>
    25a0:	9c af       	std	Y+60, r25	; 0x3c
    25a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9e af       	std	Y+62, r25	; 0x3e
    25ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    25b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	69 f7       	brne	.-38     	; 0x2590 <STM_u8Rotate+0x706>
    25b6:	16 c0       	rjmp	.+44     	; 0x25e4 <STM_u8Rotate+0x75a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	fe 01       	movw	r30, r28
    25ba:	ff 96       	adiw	r30, 0x3f	; 63
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9e af       	std	Y+62, r25	; 0x3e
    25ce:	8d af       	std	Y+61, r24	; 0x3d
    25d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25d4:	9a af       	std	Y+58, r25	; 0x3a
    25d6:	89 af       	std	Y+57, r24	; 0x39
    25d8:	89 ad       	ldd	r24, Y+57	; 0x39
    25da:	9a ad       	ldd	r25, Y+58	; 0x3a
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <STM_u8Rotate+0x752>
    25e0:	9a af       	std	Y+58, r25	; 0x3a
    25e2:	89 af       	std	Y+57, r24	; 0x39
        /*360(full roatate)/0.1758(full step degree) ) = 2048 (full step counts)*/
        uint16 local_u16steps = ((uint32)copy_u16Angle * 2048UL) / 360UL; // convert degree to number of full step
        uint16 local_u16Iter = 0;
        if (copy_STMdirection == STM_COUNTER_CLOCK_WISE)
        {
        	for (; local_u16Iter < local_u16steps; local_u16Iter++)
    25e4:	de 01       	movw	r26, r28
    25e6:	af 58       	subi	r26, 0x8F	; 143
    25e8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ea:	fe 01       	movw	r30, r28
    25ec:	ef 58       	subi	r30, 0x8F	; 143
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	01 96       	adiw	r24, 0x01	; 1
    25f6:	8d 93       	st	X+, r24
    25f8:	9c 93       	st	X, r25
    25fa:	fe 01       	movw	r30, r28
    25fc:	ef 58       	subi	r30, 0x8F	; 143
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	de 01       	movw	r26, r28
    2602:	ad 58       	subi	r26, 0x8D	; 141
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	20 81       	ld	r18, Z
    2608:	31 81       	ldd	r19, Z+1	; 0x01
    260a:	8d 91       	ld	r24, X+
    260c:	9c 91       	ld	r25, X
    260e:	11 97       	sbiw	r26, 0x01	; 1
    2610:	28 17       	cp	r18, r24
    2612:	39 07       	cpc	r19, r25
    2614:	08 f4       	brcc	.+2      	; 0x2618 <STM_u8Rotate+0x78e>
    2616:	8e cc       	rjmp	.-1764   	; 0x1f34 <STM_u8Rotate+0xaa>
    2618:	b4 c2       	rjmp	.+1384   	; 0x2b82 <STM_u8Rotate+0xcf8>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_HIGH);
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_LOW); // activate this pin in uln2003a
				_delay_ms(3);
			}
        }
        else if (copy_STMdirection == STM_CLOCK_WISE)
    261a:	fe 01       	movw	r30, r28
    261c:	e6 58       	subi	r30, 0x86	; 134
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	88 23       	and	r24, r24
    2624:	09 f0       	breq	.+2      	; 0x2628 <STM_u8Rotate+0x79e>
    2626:	a2 c2       	rjmp	.+1348   	; 0x2b6c <STM_u8Rotate+0xce2>
    2628:	91 c2       	rjmp	.+1314   	; 0x2b4c <STM_u8Rotate+0xcc2>
        {
        	for (; local_u16Iter < local_u16steps; local_u16Iter++)
			{
				if (local_u16Iter % 4 == 0)
    262a:	fe 01       	movw	r30, r28
    262c:	ef 58       	subi	r30, 0x8F	; 143
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	91 81       	ldd	r25, Z+1	; 0x01
    2634:	83 70       	andi	r24, 0x03	; 3
    2636:	90 70       	andi	r25, 0x00	; 0
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	09 f0       	breq	.+2      	; 0x263e <STM_u8Rotate+0x7b4>
    263c:	97 c0       	rjmp	.+302    	; 0x276c <STM_u8Rotate+0x8e2>
				{
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_HIGH);
    263e:	fe 01       	movw	r30, r28
    2640:	ea 58       	subi	r30, 0x8A	; 138
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	01 90       	ld	r0, Z+
    2646:	f0 81       	ld	r31, Z
    2648:	e0 2d       	mov	r30, r0
    264a:	80 81       	ld	r24, Z
    264c:	fe 01       	movw	r30, r28
    264e:	ea 58       	subi	r30, 0x8A	; 138
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	01 90       	ld	r0, Z+
    2654:	f0 81       	ld	r31, Z
    2656:	e0 2d       	mov	r30, r0
    2658:	94 81       	ldd	r25, Z+4	; 0x04
    265a:	69 2f       	mov	r22, r25
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
					// _delay_ms(10);
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_LOW); // activate this pin in uln2003a
    2662:	fe 01       	movw	r30, r28
    2664:	ea 58       	subi	r30, 0x8A	; 138
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	01 90       	ld	r0, Z+
    266a:	f0 81       	ld	r31, Z
    266c:	e0 2d       	mov	r30, r0
    266e:	80 81       	ld	r24, Z
    2670:	fe 01       	movw	r30, r28
    2672:	ea 58       	subi	r30, 0x8A	; 138
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	01 90       	ld	r0, Z+
    2678:	f0 81       	ld	r31, Z
    267a:	e0 2d       	mov	r30, r0
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	69 2f       	mov	r22, r25
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	a0 e4       	ldi	r26, 0x40	; 64
    268c:	b0 e4       	ldi	r27, 0x40	; 64
    268e:	8d ab       	std	Y+53, r24	; 0x35
    2690:	9e ab       	std	Y+54, r25	; 0x36
    2692:	af ab       	std	Y+55, r26	; 0x37
    2694:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2696:	6d a9       	ldd	r22, Y+53	; 0x35
    2698:	7e a9       	ldd	r23, Y+54	; 0x36
    269a:	8f a9       	ldd	r24, Y+55	; 0x37
    269c:	98 ad       	ldd	r25, Y+56	; 0x38
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a e7       	ldi	r20, 0x7A	; 122
    26a4:	55 e4       	ldi	r21, 0x45	; 69
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	89 ab       	std	Y+49, r24	; 0x31
    26b0:	9a ab       	std	Y+50, r25	; 0x32
    26b2:	ab ab       	std	Y+51, r26	; 0x33
    26b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26b6:	69 a9       	ldd	r22, Y+49	; 0x31
    26b8:	7a a9       	ldd	r23, Y+50	; 0x32
    26ba:	8b a9       	ldd	r24, Y+51	; 0x33
    26bc:	9c a9       	ldd	r25, Y+52	; 0x34
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <STM_u8Rotate+0x84e>
		__ticks = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	98 ab       	std	Y+48, r25	; 0x30
    26d4:	8f a7       	std	Y+47, r24	; 0x2f
    26d6:	3f c0       	rjmp	.+126    	; 0x2756 <STM_u8Rotate+0x8cc>
	else if (__tmp > 65535)
    26d8:	69 a9       	ldd	r22, Y+49	; 0x31
    26da:	7a a9       	ldd	r23, Y+50	; 0x32
    26dc:	8b a9       	ldd	r24, Y+51	; 0x33
    26de:	9c a9       	ldd	r25, Y+52	; 0x34
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	4c f5       	brge	.+82     	; 0x2742 <STM_u8Rotate+0x8b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f0:	6d a9       	ldd	r22, Y+53	; 0x35
    26f2:	7e a9       	ldd	r23, Y+54	; 0x36
    26f4:	8f a9       	ldd	r24, Y+55	; 0x37
    26f6:	98 ad       	ldd	r25, Y+56	; 0x38
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	98 ab       	std	Y+48, r25	; 0x30
    2716:	8f a7       	std	Y+47, r24	; 0x2f
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <STM_u8Rotate+0x8ae>
    271a:	80 e9       	ldi	r24, 0x90	; 144
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	9e a7       	std	Y+46, r25	; 0x2e
    2720:	8d a7       	std	Y+45, r24	; 0x2d
    2722:	8d a5       	ldd	r24, Y+45	; 0x2d
    2724:	9e a5       	ldd	r25, Y+46	; 0x2e
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <STM_u8Rotate+0x89c>
    272a:	9e a7       	std	Y+46, r25	; 0x2e
    272c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2730:	98 a9       	ldd	r25, Y+48	; 0x30
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	98 ab       	std	Y+48, r25	; 0x30
    2736:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	8f a5       	ldd	r24, Y+47	; 0x2f
    273a:	98 a9       	ldd	r25, Y+48	; 0x30
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <STM_u8Rotate+0x890>
    2740:	fa c1       	rjmp	.+1012   	; 0x2b36 <STM_u8Rotate+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	69 a9       	ldd	r22, Y+49	; 0x31
    2744:	7a a9       	ldd	r23, Y+50	; 0x32
    2746:	8b a9       	ldd	r24, Y+51	; 0x33
    2748:	9c a9       	ldd	r25, Y+52	; 0x34
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	98 ab       	std	Y+48, r25	; 0x30
    2754:	8f a7       	std	Y+47, r24	; 0x2f
    2756:	8f a5       	ldd	r24, Y+47	; 0x2f
    2758:	98 a9       	ldd	r25, Y+48	; 0x30
    275a:	9c a7       	std	Y+44, r25	; 0x2c
    275c:	8b a7       	std	Y+43, r24	; 0x2b
    275e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2760:	9c a5       	ldd	r25, Y+44	; 0x2c
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <STM_u8Rotate+0x8d8>
    2766:	9c a7       	std	Y+44, r25	; 0x2c
    2768:	8b a7       	std	Y+43, r24	; 0x2b
    276a:	e5 c1       	rjmp	.+970    	; 0x2b36 <STM_u8Rotate+0xcac>
					_delay_ms(3);
				}
				else if (local_u16Iter % 4 == 1)
    276c:	fe 01       	movw	r30, r28
    276e:	ef 58       	subi	r30, 0x8F	; 143
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	83 70       	andi	r24, 0x03	; 3
    2778:	90 70       	andi	r25, 0x00	; 0
    277a:	81 30       	cpi	r24, 0x01	; 1
    277c:	91 05       	cpc	r25, r1
    277e:	09 f0       	breq	.+2      	; 0x2782 <STM_u8Rotate+0x8f8>
    2780:	97 c0       	rjmp	.+302    	; 0x28b0 <STM_u8Rotate+0xa26>
				{
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_HIGH);
    2782:	fe 01       	movw	r30, r28
    2784:	ea 58       	subi	r30, 0x8A	; 138
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	01 90       	ld	r0, Z+
    278a:	f0 81       	ld	r31, Z
    278c:	e0 2d       	mov	r30, r0
    278e:	80 81       	ld	r24, Z
    2790:	fe 01       	movw	r30, r28
    2792:	ea 58       	subi	r30, 0x8A	; 138
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	01 90       	ld	r0, Z+
    2798:	f0 81       	ld	r31, Z
    279a:	e0 2d       	mov	r30, r0
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	69 2f       	mov	r22, r25
    27a0:	41 e0       	ldi	r20, 0x01	; 1
    27a2:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
					// _delay_ms(10);
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_LOW); // activate this pin in uln2003a
    27a6:	fe 01       	movw	r30, r28
    27a8:	ea 58       	subi	r30, 0x8A	; 138
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	01 90       	ld	r0, Z+
    27ae:	f0 81       	ld	r31, Z
    27b0:	e0 2d       	mov	r30, r0
    27b2:	80 81       	ld	r24, Z
    27b4:	fe 01       	movw	r30, r28
    27b6:	ea 58       	subi	r30, 0x8A	; 138
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	01 90       	ld	r0, Z+
    27bc:	f0 81       	ld	r31, Z
    27be:	e0 2d       	mov	r30, r0
    27c0:	92 81       	ldd	r25, Z+2	; 0x02
    27c2:	69 2f       	mov	r22, r25
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	a0 e4       	ldi	r26, 0x40	; 64
    27d0:	b0 e4       	ldi	r27, 0x40	; 64
    27d2:	8f a3       	std	Y+39, r24	; 0x27
    27d4:	98 a7       	std	Y+40, r25	; 0x28
    27d6:	a9 a7       	std	Y+41, r26	; 0x29
    27d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27da:	6f a1       	ldd	r22, Y+39	; 0x27
    27dc:	78 a5       	ldd	r23, Y+40	; 0x28
    27de:	89 a5       	ldd	r24, Y+41	; 0x29
    27e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4a e7       	ldi	r20, 0x7A	; 122
    27e8:	55 e4       	ldi	r21, 0x45	; 69
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	8b a3       	std	Y+35, r24	; 0x23
    27f4:	9c a3       	std	Y+36, r25	; 0x24
    27f6:	ad a3       	std	Y+37, r26	; 0x25
    27f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27fa:	6b a1       	ldd	r22, Y+35	; 0x23
    27fc:	7c a1       	ldd	r23, Y+36	; 0x24
    27fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2800:	9e a1       	ldd	r25, Y+38	; 0x26
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e8       	ldi	r20, 0x80	; 128
    2808:	5f e3       	ldi	r21, 0x3F	; 63
    280a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    280e:	88 23       	and	r24, r24
    2810:	2c f4       	brge	.+10     	; 0x281c <STM_u8Rotate+0x992>
		__ticks = 1;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9a a3       	std	Y+34, r25	; 0x22
    2818:	89 a3       	std	Y+33, r24	; 0x21
    281a:	3f c0       	rjmp	.+126    	; 0x289a <STM_u8Rotate+0xa10>
	else if (__tmp > 65535)
    281c:	6b a1       	ldd	r22, Y+35	; 0x23
    281e:	7c a1       	ldd	r23, Y+36	; 0x24
    2820:	8d a1       	ldd	r24, Y+37	; 0x25
    2822:	9e a1       	ldd	r25, Y+38	; 0x26
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	3f ef       	ldi	r19, 0xFF	; 255
    2828:	4f e7       	ldi	r20, 0x7F	; 127
    282a:	57 e4       	ldi	r21, 0x47	; 71
    282c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2830:	18 16       	cp	r1, r24
    2832:	4c f5       	brge	.+82     	; 0x2886 <STM_u8Rotate+0x9fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2834:	6f a1       	ldd	r22, Y+39	; 0x27
    2836:	78 a5       	ldd	r23, Y+40	; 0x28
    2838:	89 a5       	ldd	r24, Y+41	; 0x29
    283a:	9a a5       	ldd	r25, Y+42	; 0x2a
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e2       	ldi	r20, 0x20	; 32
    2842:	51 e4       	ldi	r21, 0x41	; 65
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9a a3       	std	Y+34, r25	; 0x22
    285a:	89 a3       	std	Y+33, r24	; 0x21
    285c:	0f c0       	rjmp	.+30     	; 0x287c <STM_u8Rotate+0x9f2>
    285e:	80 e9       	ldi	r24, 0x90	; 144
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	98 a3       	std	Y+32, r25	; 0x20
    2864:	8f 8f       	std	Y+31, r24	; 0x1f
    2866:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2868:	98 a1       	ldd	r25, Y+32	; 0x20
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <STM_u8Rotate+0x9e0>
    286e:	98 a3       	std	Y+32, r25	; 0x20
    2870:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2872:	89 a1       	ldd	r24, Y+33	; 0x21
    2874:	9a a1       	ldd	r25, Y+34	; 0x22
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	9a a3       	std	Y+34, r25	; 0x22
    287a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287c:	89 a1       	ldd	r24, Y+33	; 0x21
    287e:	9a a1       	ldd	r25, Y+34	; 0x22
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	69 f7       	brne	.-38     	; 0x285e <STM_u8Rotate+0x9d4>
    2884:	58 c1       	rjmp	.+688    	; 0x2b36 <STM_u8Rotate+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2886:	6b a1       	ldd	r22, Y+35	; 0x23
    2888:	7c a1       	ldd	r23, Y+36	; 0x24
    288a:	8d a1       	ldd	r24, Y+37	; 0x25
    288c:	9e a1       	ldd	r25, Y+38	; 0x26
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9a a3       	std	Y+34, r25	; 0x22
    2898:	89 a3       	std	Y+33, r24	; 0x21
    289a:	89 a1       	ldd	r24, Y+33	; 0x21
    289c:	9a a1       	ldd	r25, Y+34	; 0x22
    289e:	9e 8f       	std	Y+30, r25	; 0x1e
    28a0:	8d 8f       	std	Y+29, r24	; 0x1d
    28a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <STM_u8Rotate+0xa1c>
    28aa:	9e 8f       	std	Y+30, r25	; 0x1e
    28ac:	8d 8f       	std	Y+29, r24	; 0x1d
    28ae:	43 c1       	rjmp	.+646    	; 0x2b36 <STM_u8Rotate+0xcac>
					_delay_ms(3);
				}
				else if (local_u16Iter % 4 == 2)
    28b0:	fe 01       	movw	r30, r28
    28b2:	ef 58       	subi	r30, 0x8F	; 143
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	83 70       	andi	r24, 0x03	; 3
    28bc:	90 70       	andi	r25, 0x00	; 0
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	91 05       	cpc	r25, r1
    28c2:	09 f0       	breq	.+2      	; 0x28c6 <STM_u8Rotate+0xa3c>
    28c4:	97 c0       	rjmp	.+302    	; 0x29f4 <STM_u8Rotate+0xb6a>
				{
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_HIGH);
    28c6:	fe 01       	movw	r30, r28
    28c8:	ea 58       	subi	r30, 0x8A	; 138
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	01 90       	ld	r0, Z+
    28ce:	f0 81       	ld	r31, Z
    28d0:	e0 2d       	mov	r30, r0
    28d2:	80 81       	ld	r24, Z
    28d4:	fe 01       	movw	r30, r28
    28d6:	ea 58       	subi	r30, 0x8A	; 138
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	01 90       	ld	r0, Z+
    28dc:	f0 81       	ld	r31, Z
    28de:	e0 2d       	mov	r30, r0
    28e0:	92 81       	ldd	r25, Z+2	; 0x02
    28e2:	69 2f       	mov	r22, r25
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
					// _delay_ms(10);
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_LOW); // activate this pin in uln2003a
    28ea:	fe 01       	movw	r30, r28
    28ec:	ea 58       	subi	r30, 0x8A	; 138
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	01 90       	ld	r0, Z+
    28f2:	f0 81       	ld	r31, Z
    28f4:	e0 2d       	mov	r30, r0
    28f6:	80 81       	ld	r24, Z
    28f8:	fe 01       	movw	r30, r28
    28fa:	ea 58       	subi	r30, 0x8A	; 138
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	01 90       	ld	r0, Z+
    2900:	f0 81       	ld	r31, Z
    2902:	e0 2d       	mov	r30, r0
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	69 2f       	mov	r22, r25
    2908:	40 e0       	ldi	r20, 0x00	; 0
    290a:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	a0 e4       	ldi	r26, 0x40	; 64
    2914:	b0 e4       	ldi	r27, 0x40	; 64
    2916:	89 8f       	std	Y+25, r24	; 0x19
    2918:	9a 8f       	std	Y+26, r25	; 0x1a
    291a:	ab 8f       	std	Y+27, r26	; 0x1b
    291c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291e:	69 8d       	ldd	r22, Y+25	; 0x19
    2920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a e7       	ldi	r20, 0x7A	; 122
    292c:	55 e4       	ldi	r21, 0x45	; 69
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	8d 8b       	std	Y+21, r24	; 0x15
    2938:	9e 8b       	std	Y+22, r25	; 0x16
    293a:	af 8b       	std	Y+23, r26	; 0x17
    293c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    293e:	6d 89       	ldd	r22, Y+21	; 0x15
    2940:	7e 89       	ldd	r23, Y+22	; 0x16
    2942:	8f 89       	ldd	r24, Y+23	; 0x17
    2944:	98 8d       	ldd	r25, Y+24	; 0x18
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e8       	ldi	r20, 0x80	; 128
    294c:	5f e3       	ldi	r21, 0x3F	; 63
    294e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2952:	88 23       	and	r24, r24
    2954:	2c f4       	brge	.+10     	; 0x2960 <STM_u8Rotate+0xad6>
		__ticks = 1;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9c 8b       	std	Y+20, r25	; 0x14
    295c:	8b 8b       	std	Y+19, r24	; 0x13
    295e:	3f c0       	rjmp	.+126    	; 0x29de <STM_u8Rotate+0xb54>
	else if (__tmp > 65535)
    2960:	6d 89       	ldd	r22, Y+21	; 0x15
    2962:	7e 89       	ldd	r23, Y+22	; 0x16
    2964:	8f 89       	ldd	r24, Y+23	; 0x17
    2966:	98 8d       	ldd	r25, Y+24	; 0x18
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3f ef       	ldi	r19, 0xFF	; 255
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	57 e4       	ldi	r21, 0x47	; 71
    2970:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2974:	18 16       	cp	r1, r24
    2976:	4c f5       	brge	.+82     	; 0x29ca <STM_u8Rotate+0xb40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2978:	69 8d       	ldd	r22, Y+25	; 0x19
    297a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    297c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	51 e4       	ldi	r21, 0x41	; 65
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9c 8b       	std	Y+20, r25	; 0x14
    299e:	8b 8b       	std	Y+19, r24	; 0x13
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <STM_u8Rotate+0xb36>
    29a2:	80 e9       	ldi	r24, 0x90	; 144
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	9a 8b       	std	Y+18, r25	; 0x12
    29a8:	89 8b       	std	Y+17, r24	; 0x11
    29aa:	89 89       	ldd	r24, Y+17	; 0x11
    29ac:	9a 89       	ldd	r25, Y+18	; 0x12
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <STM_u8Rotate+0xb24>
    29b2:	9a 8b       	std	Y+18, r25	; 0x12
    29b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b6:	8b 89       	ldd	r24, Y+19	; 0x13
    29b8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	9c 8b       	std	Y+20, r25	; 0x14
    29be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	8b 89       	ldd	r24, Y+19	; 0x13
    29c2:	9c 89       	ldd	r25, Y+20	; 0x14
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	69 f7       	brne	.-38     	; 0x29a2 <STM_u8Rotate+0xb18>
    29c8:	b6 c0       	rjmp	.+364    	; 0x2b36 <STM_u8Rotate+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ca:	6d 89       	ldd	r22, Y+21	; 0x15
    29cc:	7e 89       	ldd	r23, Y+22	; 0x16
    29ce:	8f 89       	ldd	r24, Y+23	; 0x17
    29d0:	98 8d       	ldd	r25, Y+24	; 0x18
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9c 8b       	std	Y+20, r25	; 0x14
    29dc:	8b 8b       	std	Y+19, r24	; 0x13
    29de:	8b 89       	ldd	r24, Y+19	; 0x13
    29e0:	9c 89       	ldd	r25, Y+20	; 0x14
    29e2:	98 8b       	std	Y+16, r25	; 0x10
    29e4:	8f 87       	std	Y+15, r24	; 0x0f
    29e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e8:	98 89       	ldd	r25, Y+16	; 0x10
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <STM_u8Rotate+0xb60>
    29ee:	98 8b       	std	Y+16, r25	; 0x10
    29f0:	8f 87       	std	Y+15, r24	; 0x0f
    29f2:	a1 c0       	rjmp	.+322    	; 0x2b36 <STM_u8Rotate+0xcac>
					_delay_ms(3);
				}
				else if (local_u16Iter % 4 == 3)
    29f4:	fe 01       	movw	r30, r28
    29f6:	ef 58       	subi	r30, 0x8F	; 143
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	91 81       	ldd	r25, Z+1	; 0x01
    29fe:	83 70       	andi	r24, 0x03	; 3
    2a00:	90 70       	andi	r25, 0x00	; 0
    2a02:	83 30       	cpi	r24, 0x03	; 3
    2a04:	91 05       	cpc	r25, r1
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <STM_u8Rotate+0xb80>
    2a08:	96 c0       	rjmp	.+300    	; 0x2b36 <STM_u8Rotate+0xcac>
				{
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_HIGH);
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ea 58       	subi	r30, 0x8A	; 138
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	01 90       	ld	r0, Z+
    2a12:	f0 81       	ld	r31, Z
    2a14:	e0 2d       	mov	r30, r0
    2a16:	80 81       	ld	r24, Z
    2a18:	fe 01       	movw	r30, r28
    2a1a:	ea 58       	subi	r30, 0x8A	; 138
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	01 90       	ld	r0, Z+
    2a20:	f0 81       	ld	r31, Z
    2a22:	e0 2d       	mov	r30, r0
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	69 2f       	mov	r22, r25
    2a28:	41 e0       	ldi	r20, 0x01	; 1
    2a2a:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
					// _delay_ms(10);
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_LOW); // activate this pin in uln2003a
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ea 58       	subi	r30, 0x8A	; 138
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	01 90       	ld	r0, Z+
    2a36:	f0 81       	ld	r31, Z
    2a38:	e0 2d       	mov	r30, r0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ea 58       	subi	r30, 0x8A	; 138
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	01 90       	ld	r0, Z+
    2a44:	f0 81       	ld	r31, Z
    2a46:	e0 2d       	mov	r30, r0
    2a48:	94 81       	ldd	r25, Z+4	; 0x04
    2a4a:	69 2f       	mov	r22, r25
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	a0 e4       	ldi	r26, 0x40	; 64
    2a58:	b0 e4       	ldi	r27, 0x40	; 64
    2a5a:	8b 87       	std	Y+11, r24	; 0x0b
    2a5c:	9c 87       	std	Y+12, r25	; 0x0c
    2a5e:	ad 87       	std	Y+13, r26	; 0x0d
    2a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	4a e7       	ldi	r20, 0x7A	; 122
    2a70:	55 e4       	ldi	r21, 0x45	; 69
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	8f 83       	std	Y+7, r24	; 0x07
    2a7c:	98 87       	std	Y+8, r25	; 0x08
    2a7e:	a9 87       	std	Y+9, r26	; 0x09
    2a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	2c f4       	brge	.+10     	; 0x2aa4 <STM_u8Rotate+0xc1a>
		__ticks = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	3f c0       	rjmp	.+126    	; 0x2b22 <STM_u8Rotate+0xc98>
	else if (__tmp > 65535)
    2aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa6:	78 85       	ldd	r23, Y+8	; 0x08
    2aa8:	89 85       	ldd	r24, Y+9	; 0x09
    2aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	3f ef       	ldi	r19, 0xFF	; 255
    2ab0:	4f e7       	ldi	r20, 0x7F	; 127
    2ab2:	57 e4       	ldi	r21, 0x47	; 71
    2ab4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab8:	18 16       	cp	r1, r24
    2aba:	4c f5       	brge	.+82     	; 0x2b0e <STM_u8Rotate+0xc84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e2       	ldi	r20, 0x20	; 32
    2aca:	51 e4       	ldi	r21, 0x41	; 65
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9e 83       	std	Y+6, r25	; 0x06
    2ae2:	8d 83       	std	Y+5, r24	; 0x05
    2ae4:	0f c0       	rjmp	.+30     	; 0x2b04 <STM_u8Rotate+0xc7a>
    2ae6:	80 e9       	ldi	r24, 0x90	; 144
    2ae8:	91 e0       	ldi	r25, 0x01	; 1
    2aea:	9c 83       	std	Y+4, r25	; 0x04
    2aec:	8b 83       	std	Y+3, r24	; 0x03
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <STM_u8Rotate+0xc68>
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	69 f7       	brne	.-38     	; 0x2ae6 <STM_u8Rotate+0xc5c>
    2b0c:	14 c0       	rjmp	.+40     	; 0x2b36 <STM_u8Rotate+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b10:	78 85       	ldd	r23, Y+8	; 0x08
    2b12:	89 85       	ldd	r24, Y+9	; 0x09
    2b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	9a 83       	std	Y+2, r25	; 0x02
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <STM_u8Rotate+0xca4>
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(3);
			}
        }
        else if (copy_STMdirection == STM_CLOCK_WISE)
        {
        	for (; local_u16Iter < local_u16steps; local_u16Iter++)
    2b36:	de 01       	movw	r26, r28
    2b38:	af 58       	subi	r26, 0x8F	; 143
    2b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ef 58       	subi	r30, 0x8F	; 143
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	01 96       	adiw	r24, 0x01	; 1
    2b48:	8d 93       	st	X+, r24
    2b4a:	9c 93       	st	X, r25
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ef 58       	subi	r30, 0x8F	; 143
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	de 01       	movw	r26, r28
    2b54:	ad 58       	subi	r26, 0x8D	; 141
    2b56:	bf 4f       	sbci	r27, 0xFF	; 255
    2b58:	20 81       	ld	r18, Z
    2b5a:	31 81       	ldd	r19, Z+1	; 0x01
    2b5c:	8d 91       	ld	r24, X+
    2b5e:	9c 91       	ld	r25, X
    2b60:	11 97       	sbiw	r26, 0x01	; 1
    2b62:	28 17       	cp	r18, r24
    2b64:	39 07       	cpc	r19, r25
    2b66:	08 f4       	brcc	.+2      	; 0x2b6a <STM_u8Rotate+0xce0>
    2b68:	60 cd       	rjmp	.-1344   	; 0x262a <STM_u8Rotate+0x7a0>
    2b6a:	0b c0       	rjmp	.+22     	; 0x2b82 <STM_u8Rotate+0xcf8>
				}
			}

        }
        else
            Local_u8ErrorType = NOK;
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	eb 58       	subi	r30, 0x8B	; 139
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	82 e0       	ldi	r24, 0x02	; 2
    2b74:	80 83       	st	Z, r24
    2b76:	05 c0       	rjmp	.+10     	; 0x2b82 <STM_u8Rotate+0xcf8>
    }
    else
        Local_u8ErrorType = NULL_PTR;
    2b78:	fe 01       	movw	r30, r28
    2b7a:	eb 58       	subi	r30, 0x8B	; 139
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	83 e0       	ldi	r24, 0x03	; 3
    2b80:	80 83       	st	Z, r24
    if (Local_u8ErrorType == OK){
    2b82:	fe 01       	movw	r30, r28
    2b84:	eb 58       	subi	r30, 0x8B	; 139
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	09 f0       	breq	.+2      	; 0x2b90 <STM_u8Rotate+0xd06>
    2b8e:	48 c0       	rjmp	.+144    	; 0x2c20 <STM_u8Rotate+0xd96>
    	//
//    	_delay_ms(10);
		DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_HIGH);
    2b90:	fe 01       	movw	r30, r28
    2b92:	ea 58       	subi	r30, 0x8A	; 138
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	01 90       	ld	r0, Z+
    2b98:	f0 81       	ld	r31, Z
    2b9a:	e0 2d       	mov	r30, r0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	ea 58       	subi	r30, 0x8A	; 138
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	01 90       	ld	r0, Z+
    2ba6:	f0 81       	ld	r31, Z
    2ba8:	e0 2d       	mov	r30, r0
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	69 2f       	mov	r22, r25
    2bae:	41 e0       	ldi	r20, 0x01	; 1
    2bb0:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
		DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_HIGH);
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ea 58       	subi	r30, 0x8A	; 138
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	01 90       	ld	r0, Z+
    2bbc:	f0 81       	ld	r31, Z
    2bbe:	e0 2d       	mov	r30, r0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ea 58       	subi	r30, 0x8A	; 138
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	01 90       	ld	r0, Z+
    2bca:	f0 81       	ld	r31, Z
    2bcc:	e0 2d       	mov	r30, r0
    2bce:	92 81       	ldd	r25, Z+2	; 0x02
    2bd0:	69 2f       	mov	r22, r25
    2bd2:	41 e0       	ldi	r20, 0x01	; 1
    2bd4:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
		DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_HIGH);
    2bd8:	fe 01       	movw	r30, r28
    2bda:	ea 58       	subi	r30, 0x8A	; 138
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	01 90       	ld	r0, Z+
    2be0:	f0 81       	ld	r31, Z
    2be2:	e0 2d       	mov	r30, r0
    2be4:	80 81       	ld	r24, Z
    2be6:	fe 01       	movw	r30, r28
    2be8:	ea 58       	subi	r30, 0x8A	; 138
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	01 90       	ld	r0, Z+
    2bee:	f0 81       	ld	r31, Z
    2bf0:	e0 2d       	mov	r30, r0
    2bf2:	93 81       	ldd	r25, Z+3	; 0x03
    2bf4:	69 2f       	mov	r22, r25
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
		DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_HIGH);
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	ea 58       	subi	r30, 0x8A	; 138
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	01 90       	ld	r0, Z+
    2c04:	f0 81       	ld	r31, Z
    2c06:	e0 2d       	mov	r30, r0
    2c08:	80 81       	ld	r24, Z
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	ea 58       	subi	r30, 0x8A	; 138
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	01 90       	ld	r0, Z+
    2c12:	f0 81       	ld	r31, Z
    2c14:	e0 2d       	mov	r30, r0
    2c16:	94 81       	ldd	r25, Z+4	; 0x04
    2c18:	69 2f       	mov	r22, r25
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>

    }
    return Local_u8ErrorType;
    2c20:	fe 01       	movw	r30, r28
    2c22:	eb 58       	subi	r30, 0x8B	; 139
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 81       	ld	r24, Z
}
    2c28:	c6 58       	subi	r28, 0x86	; 134
    2c2a:	df 4f       	sbci	r29, 0xFF	; 255
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	08 95       	ret

00002c40 <SWITCH_u8GetState>:
#include "../../libraries/ErrType.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"

#include "SWITCH_interface.h"

uint8 SWITCH_u8GetState(SWITCH_Config_t* copy_Switch_Object){
    2c40:	df 93       	push	r29
    2c42:	cf 93       	push	r28
    2c44:	00 d0       	rcall	.+0      	; 0x2c46 <SWITCH_u8GetState+0x6>
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <SWITCH_u8GetState+0x8>
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	9c 83       	std	Y+4, r25	; 0x04
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
    uint8 Local_u8ErrorState = OK;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	89 83       	std	Y+1, r24	; 0x01
    uint8 Local_u8SwitchState=1;
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	8a 83       	std	Y+2, r24	; 0x02
//    uint8 Local_u8SwitchStatePrev=0;
    if(copy_Switch_Object != NULL){
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <SWITCH_u8GetState+0x22>
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <SWITCH_u8GetState+0xa0>
        if(copy_Switch_Object->PullType== SWITCH_PULL_UP){
    2c62:	eb 81       	ldd	r30, Y+3	; 0x03
    2c64:	fc 81       	ldd	r31, Y+4	; 0x04
    2c66:	80 81       	ld	r24, Z
    2c68:	88 23       	and	r24, r24
    2c6a:	c9 f4       	brne	.+50     	; 0x2c9e <SWITCH_u8GetState+0x5e>
        	DIO_u8_GetPinVal(copy_Switch_Object->port,copy_Switch_Object->Pin,&Local_u8SwitchState);
    2c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c70:	81 81       	ldd	r24, Z+1	; 0x01
    2c72:	eb 81       	ldd	r30, Y+3	; 0x03
    2c74:	fc 81       	ldd	r31, Y+4	; 0x04
    2c76:	92 81       	ldd	r25, Z+2	; 0x02
    2c78:	9e 01       	movw	r18, r28
    2c7a:	2e 5f       	subi	r18, 0xFE	; 254
    2c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7e:	69 2f       	mov	r22, r25
    2c80:	a9 01       	movw	r20, r18
    2c82:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <DIO_u8_GetPinVal>
            if(Local_u8SwitchState == 0)
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	88 23       	and	r24, r24
    2c8a:	29 f4       	brne	.+10     	; 0x2c96 <SWITCH_u8GetState+0x56>
            	copy_Switch_Object->state =SWITCH_PRESSED;
    2c8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	83 83       	std	Z+3, r24	; 0x03
    2c94:	27 c0       	rjmp	.+78     	; 0x2ce4 <SWITCH_u8GetState+0xa4>
            else
            	copy_Switch_Object->state =SWITCH_RELEASED;
    2c96:	eb 81       	ldd	r30, Y+3	; 0x03
    2c98:	fc 81       	ldd	r31, Y+4	; 0x04
    2c9a:	13 82       	std	Z+3, r1	; 0x03
    2c9c:	23 c0       	rjmp	.+70     	; 0x2ce4 <SWITCH_u8GetState+0xa4>

        }else if(copy_Switch_Object->PullType== SWITCH_PULL_UP){
    2c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca2:	80 81       	ld	r24, Z
    2ca4:	88 23       	and	r24, r24
    2ca6:	c9 f4       	brne	.+50     	; 0x2cda <SWITCH_u8GetState+0x9a>
            DIO_u8_GetPinVal(copy_Switch_Object->port,copy_Switch_Object->Pin,&Local_u8SwitchState);
    2ca8:	eb 81       	ldd	r30, Y+3	; 0x03
    2caa:	fc 81       	ldd	r31, Y+4	; 0x04
    2cac:	81 81       	ldd	r24, Z+1	; 0x01
    2cae:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cb2:	92 81       	ldd	r25, Z+2	; 0x02
    2cb4:	9e 01       	movw	r18, r28
    2cb6:	2e 5f       	subi	r18, 0xFE	; 254
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	69 2f       	mov	r22, r25
    2cbc:	a9 01       	movw	r20, r18
    2cbe:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <DIO_u8_GetPinVal>
            if(Local_u8SwitchState == 1)
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	81 30       	cpi	r24, 0x01	; 1
    2cc6:	29 f4       	brne	.+10     	; 0x2cd2 <SWITCH_u8GetState+0x92>
            	copy_Switch_Object->state =SWITCH_PRESSED;
    2cc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2cca:	fc 81       	ldd	r31, Y+4	; 0x04
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	83 83       	std	Z+3, r24	; 0x03
    2cd0:	09 c0       	rjmp	.+18     	; 0x2ce4 <SWITCH_u8GetState+0xa4>
            else
            	copy_Switch_Object->state =SWITCH_RELEASED;
    2cd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cd6:	13 82       	std	Z+3, r1	; 0x03
    2cd8:	05 c0       	rjmp	.+10     	; 0x2ce4 <SWITCH_u8GetState+0xa4>
        }else{
          Local_u8ErrorState = NOK;
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <SWITCH_u8GetState+0xa4>

        }


    }else
        Local_u8ErrorState = NULL_PTR;
    2ce0:	83 e0       	ldi	r24, 0x03	; 3
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <_SSD_VoidcustomPortValue>:

#include "SSD_interface.h"
#include "SSD_prv.h"

void _SSD_VoidcustomPortValue(DIO_port_t copy_Port, DIO_pin_t copy_Pin, uint8 copy_u8PortVal)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <_SSD_VoidcustomPortValue+0x6>
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <_SSD_VoidcustomPortValue+0x8>
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	8a 83       	std	Y+2, r24	; 0x02
    2d02:	6b 83       	std	Y+3, r22	; 0x03
    2d04:	4c 83       	std	Y+4, r20	; 0x04
    uint8 Local_u8PortValue;
    DIO_u8_GetPinVal(copy_Port, copy_Pin, &Local_u8PortValue);
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	6b 81       	ldd	r22, Y+3	; 0x03
    2d0a:	9e 01       	movw	r18, r28
    2d0c:	2f 5f       	subi	r18, 0xFF	; 255
    2d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d10:	a9 01       	movw	r20, r18
    2d12:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <DIO_u8_GetPinVal>
    Local_u8PortValue |= copy_u8PortVal;
    2d16:	99 81       	ldd	r25, Y+1	; 0x01
    2d18:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1a:	89 2b       	or	r24, r25
    2d1c:	89 83       	std	Y+1, r24	; 0x01

    DIO_u8_SetPortVal(copy_Port, Local_u8PortValue);
    2d1e:	99 81       	ldd	r25, Y+1	; 0x01
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	69 2f       	mov	r22, r25
    2d24:	0e 94 a8 22 	call	0x4550	; 0x4550 <DIO_u8_SetPortVal>
}
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <SSD_u8SetNumber>:

uint8 SSD_u8SetNumber(const SSD_Config_t *copy_SSD_Object, uint8 copy_u8Number)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	00 d0       	rcall	.+0      	; 0x2d3c <SSD_u8SetNumber+0x6>
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <SSD_u8SetNumber+0x8>
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	9b 83       	std	Y+3, r25	; 0x03
    2d44:	8a 83       	std	Y+2, r24	; 0x02
    2d46:	6c 83       	std	Y+4, r22	; 0x04
    uint8 Local_u8ErrorState = OK;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    const static uint8 SSD_u8p_NumArr[10] = {0x7E, 0x0C, 0xB6, 0x9E, 0xCC, 0xDA, 0xFA, 0x0E, 0xFE, 0xDE};

    if (copy_SSD_Object != NULL)
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <SSD_u8SetNumber+0x20>
    2d54:	6e c0       	rjmp	.+220    	; 0x2e32 <SSD_u8SetNumber+0xfc>
    {

        if (copy_SSD_Object->type == SSD_ComCathod)
    2d56:	ea 81       	ldd	r30, Y+2	; 0x02
    2d58:	fb 81       	ldd	r31, Y+3	; 0x03
    2d5a:	80 81       	ld	r24, Z
    2d5c:	88 23       	and	r24, r24
    2d5e:	79 f5       	brne	.+94     	; 0x2dbe <SSD_u8SetNumber+0x88>
        {

            if (copy_SSD_Object->LEDAPin == 0)
    2d60:	ea 81       	ldd	r30, Y+2	; 0x02
    2d62:	fb 81       	ldd	r31, Y+3	; 0x03
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	88 23       	and	r24, r24
    2d68:	91 f4       	brne	.+36     	; 0x2d8e <SSD_u8SetNumber+0x58>
            {
                // set pins from bin0->bin6 value to high depends on the given number
                _SSD_VoidcustomPortValue(copy_SSD_Object->port, 7, (SSD_u8p_NumArr[copy_u8Number]) >> 1);
    2d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d6e:	21 81       	ldd	r18, Z+1	; 0x01
    2d70:	8c 81       	ldd	r24, Y+4	; 0x04
    2d72:	88 2f       	mov	r24, r24
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	fc 01       	movw	r30, r24
    2d78:	e7 54       	subi	r30, 0x47	; 71
    2d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d7c:	80 81       	ld	r24, Z
    2d7e:	98 2f       	mov	r25, r24
    2d80:	96 95       	lsr	r25
    2d82:	82 2f       	mov	r24, r18
    2d84:	67 e0       	ldi	r22, 0x07	; 7
    2d86:	49 2f       	mov	r20, r25
    2d88:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <_SSD_VoidcustomPortValue>
    2d8c:	54 c0       	rjmp	.+168    	; 0x2e36 <SSD_u8SetNumber+0x100>
            }
            else if (copy_SSD_Object->LEDAPin == 1)
    2d8e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d90:	fb 81       	ldd	r31, Y+3	; 0x03
    2d92:	82 81       	ldd	r24, Z+2	; 0x02
    2d94:	81 30       	cpi	r24, 0x01	; 1
    2d96:	81 f4       	brne	.+32     	; 0x2db8 <SSD_u8SetNumber+0x82>
            {
                // set pins from bin1->bin7 value to high depends on the given number
                _SSD_VoidcustomPortValue(copy_SSD_Object->port, 0, SSD_u8p_NumArr[copy_u8Number]);
    2d98:	ea 81       	ldd	r30, Y+2	; 0x02
    2d9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9c:	21 81       	ldd	r18, Z+1	; 0x01
    2d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2da0:	88 2f       	mov	r24, r24
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	fc 01       	movw	r30, r24
    2da6:	e7 54       	subi	r30, 0x47	; 71
    2da8:	fe 4f       	sbci	r31, 0xFE	; 254
    2daa:	90 81       	ld	r25, Z
    2dac:	82 2f       	mov	r24, r18
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	49 2f       	mov	r20, r25
    2db2:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <_SSD_VoidcustomPortValue>
    2db6:	3f c0       	rjmp	.+126    	; 0x2e36 <SSD_u8SetNumber+0x100>
            }
            else
                Local_u8ErrorState = NOK;
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	3c c0       	rjmp	.+120    	; 0x2e36 <SSD_u8SetNumber+0x100>
        }
        else if (copy_SSD_Object->type == SSD_ComAnod)
    2dbe:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc0:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc2:	80 81       	ld	r24, Z
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	91 f5       	brne	.+100    	; 0x2e2c <SSD_u8SetNumber+0xf6>
        {
            if (copy_SSD_Object->LEDAPin == 0)
    2dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dca:	fb 81       	ldd	r31, Y+3	; 0x03
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	88 23       	and	r24, r24
    2dd0:	99 f4       	brne	.+38     	; 0x2df8 <SSD_u8SetNumber+0xc2>
            {
                // set pins from bin0->bin6 value to high depends on the given number
                _SSD_VoidcustomPortValue(copy_SSD_Object->port, 7, ~((SSD_u8p_NumArr[copy_u8Number]) >> 1));
    2dd2:	ea 81       	ldd	r30, Y+2	; 0x02
    2dd4:	fb 81       	ldd	r31, Y+3	; 0x03
    2dd6:	21 81       	ldd	r18, Z+1	; 0x01
    2dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dda:	88 2f       	mov	r24, r24
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	fc 01       	movw	r30, r24
    2de0:	e7 54       	subi	r30, 0x47	; 71
    2de2:	fe 4f       	sbci	r31, 0xFE	; 254
    2de4:	80 81       	ld	r24, Z
    2de6:	86 95       	lsr	r24
    2de8:	98 2f       	mov	r25, r24
    2dea:	90 95       	com	r25
    2dec:	82 2f       	mov	r24, r18
    2dee:	67 e0       	ldi	r22, 0x07	; 7
    2df0:	49 2f       	mov	r20, r25
    2df2:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <_SSD_VoidcustomPortValue>
    2df6:	1f c0       	rjmp	.+62     	; 0x2e36 <SSD_u8SetNumber+0x100>
            }
            else if (copy_SSD_Object->LEDAPin == 1)
    2df8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dfa:	fb 81       	ldd	r31, Y+3	; 0x03
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	81 30       	cpi	r24, 0x01	; 1
    2e00:	91 f4       	brne	.+36     	; 0x2e26 <SSD_u8SetNumber+0xf0>
            {
                // set pins from bin1->bin7 value to high depends on the given number
                _SSD_VoidcustomPortValue(copy_SSD_Object->port, 7, ~(SSD_u8p_NumArr[copy_u8Number]));
    2e02:	ea 81       	ldd	r30, Y+2	; 0x02
    2e04:	fb 81       	ldd	r31, Y+3	; 0x03
    2e06:	21 81       	ldd	r18, Z+1	; 0x01
    2e08:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	fc 01       	movw	r30, r24
    2e10:	e7 54       	subi	r30, 0x47	; 71
    2e12:	fe 4f       	sbci	r31, 0xFE	; 254
    2e14:	80 81       	ld	r24, Z
    2e16:	98 2f       	mov	r25, r24
    2e18:	90 95       	com	r25
    2e1a:	82 2f       	mov	r24, r18
    2e1c:	67 e0       	ldi	r22, 0x07	; 7
    2e1e:	49 2f       	mov	r20, r25
    2e20:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <_SSD_VoidcustomPortValue>
    2e24:	08 c0       	rjmp	.+16     	; 0x2e36 <SSD_u8SetNumber+0x100>
            }
            else
                Local_u8ErrorState = NOK;
    2e26:	82 e0       	ldi	r24, 0x02	; 2
    2e28:	89 83       	std	Y+1, r24	; 0x01
    2e2a:	05 c0       	rjmp	.+10     	; 0x2e36 <SSD_u8SetNumber+0x100>
        }
        else
            Local_u8ErrorState = NOK;
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <SSD_u8SetNumber+0x100>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    2e32:	83 e0       	ldi	r24, 0x03	; 3
    2e34:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8ErrorState;
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <SSD_u8Enable>:
uint8 SSD_u8Enable(const SSD_Config_t *copy_SSD_Object)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <SSD_u8Enable+0x6>
    2e4c:	0f 92       	push	r0
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	9b 83       	std	Y+3, r25	; 0x03
    2e54:	8a 83       	std	Y+2, r24	; 0x02

    uint8 Local_u8ErrorState = OK;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	89 83       	std	Y+1, r24	; 0x01

    if (copy_SSD_Object != NULL)
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	99 f1       	breq	.+102    	; 0x2ec8 <SSD_u8Enable+0x82>
    {
        if (copy_SSD_Object->type == SSD_ETA_KIT)
    2e62:	ea 81       	ldd	r30, Y+2	; 0x02
    2e64:	fb 81       	ldd	r31, Y+3	; 0x03
    2e66:	80 81       	ld	r24, Z
    2e68:	82 30       	cpi	r24, 0x02	; 2
    2e6a:	59 f4       	brne	.+22     	; 0x2e82 <SSD_u8Enable+0x3c>
        {
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_HIGH);
    2e6c:	ea 81       	ldd	r30, Y+2	; 0x02
    2e6e:	fb 81       	ldd	r31, Y+3	; 0x03
    2e70:	83 81       	ldd	r24, Z+3	; 0x03
    2e72:	ea 81       	ldd	r30, Y+2	; 0x02
    2e74:	fb 81       	ldd	r31, Y+3	; 0x03
    2e76:	94 81       	ldd	r25, Z+4	; 0x04
    2e78:	69 2f       	mov	r22, r25
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2e80:	25 c0       	rjmp	.+74     	; 0x2ecc <SSD_u8Enable+0x86>
        }
        else if(copy_SSD_Object->type == SSD_ComCathod){
    2e82:	ea 81       	ldd	r30, Y+2	; 0x02
    2e84:	fb 81       	ldd	r31, Y+3	; 0x03
    2e86:	80 81       	ld	r24, Z
    2e88:	88 23       	and	r24, r24
    2e8a:	59 f4       	brne	.+22     	; 0x2ea2 <SSD_u8Enable+0x5c>
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_LOW);
    2e8c:	ea 81       	ldd	r30, Y+2	; 0x02
    2e8e:	fb 81       	ldd	r31, Y+3	; 0x03
    2e90:	83 81       	ldd	r24, Z+3	; 0x03
    2e92:	ea 81       	ldd	r30, Y+2	; 0x02
    2e94:	fb 81       	ldd	r31, Y+3	; 0x03
    2e96:	94 81       	ldd	r25, Z+4	; 0x04
    2e98:	69 2f       	mov	r22, r25
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2ea0:	15 c0       	rjmp	.+42     	; 0x2ecc <SSD_u8Enable+0x86>
        }else if(copy_SSD_Object->type == SSD_ComAnod){
    2ea2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ea4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ea6:	80 81       	ld	r24, Z
    2ea8:	81 30       	cpi	r24, 0x01	; 1
    2eaa:	59 f4       	brne	.+22     	; 0x2ec2 <SSD_u8Enable+0x7c>
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_HIGH);
    2eac:	ea 81       	ldd	r30, Y+2	; 0x02
    2eae:	fb 81       	ldd	r31, Y+3	; 0x03
    2eb0:	83 81       	ldd	r24, Z+3	; 0x03
    2eb2:	ea 81       	ldd	r30, Y+2	; 0x02
    2eb4:	fb 81       	ldd	r31, Y+3	; 0x03
    2eb6:	94 81       	ldd	r25, Z+4	; 0x04
    2eb8:	69 2f       	mov	r22, r25
    2eba:	41 e0       	ldi	r20, 0x01	; 1
    2ebc:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2ec0:	05 c0       	rjmp	.+10     	; 0x2ecc <SSD_u8Enable+0x86>
        }else
            Local_u8ErrorState = NOK;
    2ec2:	82 e0       	ldi	r24, 0x02	; 2
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <SSD_u8Enable+0x86>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    2ec8:	83 e0       	ldi	r24, 0x03	; 3
    2eca:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8ErrorState;
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <SSD_u8Disable>:
uint8 SSD_u8Disable(const SSD_Config_t *copy_SSD_Object)
{
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <SSD_u8Disable+0x6>
    2ee0:	0f 92       	push	r0
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	9b 83       	std	Y+3, r25	; 0x03
    2ee8:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Local_u8ErrorState = OK;
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	89 83       	std	Y+1, r24	; 0x01

    if (copy_SSD_Object != NULL)
    2eee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	99 f1       	breq	.+102    	; 0x2f5c <SSD_u8Disable+0x82>
    {
        if (copy_SSD_Object->type == SSD_ETA_KIT)
    2ef6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ef8:	fb 81       	ldd	r31, Y+3	; 0x03
    2efa:	80 81       	ld	r24, Z
    2efc:	82 30       	cpi	r24, 0x02	; 2
    2efe:	59 f4       	brne	.+22     	; 0x2f16 <SSD_u8Disable+0x3c>
        {
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_LOW);
    2f00:	ea 81       	ldd	r30, Y+2	; 0x02
    2f02:	fb 81       	ldd	r31, Y+3	; 0x03
    2f04:	83 81       	ldd	r24, Z+3	; 0x03
    2f06:	ea 81       	ldd	r30, Y+2	; 0x02
    2f08:	fb 81       	ldd	r31, Y+3	; 0x03
    2f0a:	94 81       	ldd	r25, Z+4	; 0x04
    2f0c:	69 2f       	mov	r22, r25
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2f14:	25 c0       	rjmp	.+74     	; 0x2f60 <SSD_u8Disable+0x86>
        }
        else if(copy_SSD_Object->type == SSD_ComCathod){
    2f16:	ea 81       	ldd	r30, Y+2	; 0x02
    2f18:	fb 81       	ldd	r31, Y+3	; 0x03
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 23       	and	r24, r24
    2f1e:	59 f4       	brne	.+22     	; 0x2f36 <SSD_u8Disable+0x5c>
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_HIGH);
    2f20:	ea 81       	ldd	r30, Y+2	; 0x02
    2f22:	fb 81       	ldd	r31, Y+3	; 0x03
    2f24:	83 81       	ldd	r24, Z+3	; 0x03
    2f26:	ea 81       	ldd	r30, Y+2	; 0x02
    2f28:	fb 81       	ldd	r31, Y+3	; 0x03
    2f2a:	94 81       	ldd	r25, Z+4	; 0x04
    2f2c:	69 2f       	mov	r22, r25
    2f2e:	41 e0       	ldi	r20, 0x01	; 1
    2f30:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2f34:	15 c0       	rjmp	.+42     	; 0x2f60 <SSD_u8Disable+0x86>
        }else if(copy_SSD_Object->type == SSD_ComAnod){
    2f36:	ea 81       	ldd	r30, Y+2	; 0x02
    2f38:	fb 81       	ldd	r31, Y+3	; 0x03
    2f3a:	80 81       	ld	r24, Z
    2f3c:	81 30       	cpi	r24, 0x01	; 1
    2f3e:	59 f4       	brne	.+22     	; 0x2f56 <SSD_u8Disable+0x7c>
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_LOW);
    2f40:	ea 81       	ldd	r30, Y+2	; 0x02
    2f42:	fb 81       	ldd	r31, Y+3	; 0x03
    2f44:	83 81       	ldd	r24, Z+3	; 0x03
    2f46:	ea 81       	ldd	r30, Y+2	; 0x02
    2f48:	fb 81       	ldd	r31, Y+3	; 0x03
    2f4a:	94 81       	ldd	r25, Z+4	; 0x04
    2f4c:	69 2f       	mov	r22, r25
    2f4e:	40 e0       	ldi	r20, 0x00	; 0
    2f50:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2f54:	05 c0       	rjmp	.+10     	; 0x2f60 <SSD_u8Disable+0x86>
        }else
            Local_u8ErrorState = NOK;
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <SSD_u8Disable+0x86>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    2f5c:	83 e0       	ldi	r24, 0x03	; 3
    2f5e:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8ErrorState;
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <LED_u8SetON>:
#include "../../libraries/ErrType.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"

#include "LED_interface.h"

uint8 LED_u8SetON(const LED_Config_t* copy_LED_Object){
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <LED_u8SetON+0x6>
    2f74:	0f 92       	push	r0
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	9b 83       	std	Y+3, r25	; 0x03
    2f7c:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Local_u8ErrorState = OK;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	89 83       	std	Y+1, r24	; 0x01
    if(copy_LED_Object != NULL){
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	9b 81       	ldd	r25, Y+3	; 0x03
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	19 f1       	breq	.+70     	; 0x2fd0 <LED_u8SetON+0x62>
        if(copy_LED_Object->Activitype== LED_ACTIVE_HIGH){
    2f8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f8e:	80 81       	ld	r24, Z
    2f90:	88 23       	and	r24, r24
    2f92:	59 f4       	brne	.+22     	; 0x2faa <LED_u8SetON+0x3c>
            DIO_u8_SetPinVal(copy_LED_Object->port,copy_LED_Object->Pin,DIO_PIN_HIGH);
    2f94:	ea 81       	ldd	r30, Y+2	; 0x02
    2f96:	fb 81       	ldd	r31, Y+3	; 0x03
    2f98:	81 81       	ldd	r24, Z+1	; 0x01
    2f9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f9e:	92 81       	ldd	r25, Z+2	; 0x02
    2fa0:	69 2f       	mov	r22, r25
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2fa8:	15 c0       	rjmp	.+42     	; 0x2fd4 <LED_u8SetON+0x66>
        }else if(copy_LED_Object->Activitype== LED_ACTIVE_LOW){
    2faa:	ea 81       	ldd	r30, Y+2	; 0x02
    2fac:	fb 81       	ldd	r31, Y+3	; 0x03
    2fae:	80 81       	ld	r24, Z
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	59 f4       	brne	.+22     	; 0x2fca <LED_u8SetON+0x5c>
            DIO_u8_SetPinVal(copy_LED_Object->port,copy_LED_Object->Pin,DIO_PIN_LOW);
    2fb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2fb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2fb8:	81 81       	ldd	r24, Z+1	; 0x01
    2fba:	ea 81       	ldd	r30, Y+2	; 0x02
    2fbc:	fb 81       	ldd	r31, Y+3	; 0x03
    2fbe:	92 81       	ldd	r25, Z+2	; 0x02
    2fc0:	69 2f       	mov	r22, r25
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    2fc8:	05 c0       	rjmp	.+10     	; 0x2fd4 <LED_u8SetON+0x66>
        }else{
          Local_u8ErrorState = NOK;
    2fca:	82 e0       	ldi	r24, 0x02	; 2
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <LED_u8SetON+0x66>
        }
    }else
        Local_u8ErrorState = NULL_PTR;
    2fd0:	83 e0       	ldi	r24, 0x03	; 3
    2fd2:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <LED_u8SetOFF>:


uint8 LED_u8SetOFF(const LED_Config_t* copy_LED_Object){
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <LED_u8SetOFF+0x6>
    2fe8:	0f 92       	push	r0
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	9b 83       	std	Y+3, r25	; 0x03
    2ff0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Local_u8ErrorState = OK;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	89 83       	std	Y+1, r24	; 0x01
    if(copy_LED_Object != NULL){
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	19 f1       	breq	.+70     	; 0x3044 <LED_u8SetOFF+0x62>
        if(copy_LED_Object->Activitype== LED_ACTIVE_HIGH){
    2ffe:	ea 81       	ldd	r30, Y+2	; 0x02
    3000:	fb 81       	ldd	r31, Y+3	; 0x03
    3002:	80 81       	ld	r24, Z
    3004:	88 23       	and	r24, r24
    3006:	59 f4       	brne	.+22     	; 0x301e <LED_u8SetOFF+0x3c>
            DIO_u8_SetPinVal(copy_LED_Object->port,copy_LED_Object->Pin,DIO_PIN_LOW);
    3008:	ea 81       	ldd	r30, Y+2	; 0x02
    300a:	fb 81       	ldd	r31, Y+3	; 0x03
    300c:	81 81       	ldd	r24, Z+1	; 0x01
    300e:	ea 81       	ldd	r30, Y+2	; 0x02
    3010:	fb 81       	ldd	r31, Y+3	; 0x03
    3012:	92 81       	ldd	r25, Z+2	; 0x02
    3014:	69 2f       	mov	r22, r25
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    301c:	15 c0       	rjmp	.+42     	; 0x3048 <LED_u8SetOFF+0x66>
        }else if(copy_LED_Object->Activitype== LED_ACTIVE_LOW){
    301e:	ea 81       	ldd	r30, Y+2	; 0x02
    3020:	fb 81       	ldd	r31, Y+3	; 0x03
    3022:	80 81       	ld	r24, Z
    3024:	81 30       	cpi	r24, 0x01	; 1
    3026:	59 f4       	brne	.+22     	; 0x303e <LED_u8SetOFF+0x5c>
            DIO_u8_SetPinVal(copy_LED_Object->port,copy_LED_Object->Pin,DIO_PIN_HIGH);
    3028:	ea 81       	ldd	r30, Y+2	; 0x02
    302a:	fb 81       	ldd	r31, Y+3	; 0x03
    302c:	81 81       	ldd	r24, Z+1	; 0x01
    302e:	ea 81       	ldd	r30, Y+2	; 0x02
    3030:	fb 81       	ldd	r31, Y+3	; 0x03
    3032:	92 81       	ldd	r25, Z+2	; 0x02
    3034:	69 2f       	mov	r22, r25
    3036:	41 e0       	ldi	r20, 0x01	; 1
    3038:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    303c:	05 c0       	rjmp	.+10     	; 0x3048 <LED_u8SetOFF+0x66>
        }else{
          Local_u8ErrorState = NOK;
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	89 83       	std	Y+1, r24	; 0x01
    3042:	02 c0       	rjmp	.+4      	; 0x3048 <LED_u8SetOFF+0x66>
        }
    }else
        Local_u8ErrorState = NULL_PTR;
    3044:	83 e0       	ldi	r24, 0x03	; 3
    3046:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    3048:	89 81       	ldd	r24, Y+1	; 0x01
}
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <LED_voidToggle>:
void LED_voidToggle(const LED_Config_t* copy_LED_Object){
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	00 d0       	rcall	.+0      	; 0x305c <LED_voidToggle+0x6>
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	9a 83       	std	Y+2, r25	; 0x02
    3062:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8_TogglePinVal(copy_LED_Object->port,copy_LED_Object->Pin);
    3064:	e9 81       	ldd	r30, Y+1	; 0x01
    3066:	fa 81       	ldd	r31, Y+2	; 0x02
    3068:	81 81       	ldd	r24, Z+1	; 0x01
    306a:	e9 81       	ldd	r30, Y+1	; 0x01
    306c:	fa 81       	ldd	r31, Y+2	; 0x02
    306e:	92 81       	ldd	r25, Z+2	; 0x02
    3070:	69 2f       	mov	r22, r25
    3072:	0e 94 29 24 	call	0x4852	; 0x4852 <DIO_u8_TogglePinVal>
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <KPD_u8GetPressedKey>:

#include "KPD_interface.h"
#include "KPD_prv.h"
#include "KPD_cfg.h"

uint8 KPD_u8GetPressedKey(uint8* referance_u8Row,uint8* referance_u8Col){
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	29 97       	sbiw	r28, 0x09	; 9
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	9e 83       	std	Y+6, r25	; 0x06
    3096:	8d 83       	std	Y+5, r24	; 0x05
    3098:	78 87       	std	Y+8, r23	; 0x08
    309a:	6f 83       	std	Y+7, r22	; 0x07
    
    uint8 Local_u8ItrRow,Local_u8ItrCol,Local_u8KeyState, Local_u8PressedKey= KPD_u8NO_PRESSED_KEY_VAL;
    309c:	8f ef       	ldi	r24, 0xFF	; 255
    309e:	89 83       	std	Y+1, r24	; 0x01
    static uint8 Local_u8RowArr[ROW_SIZE]={KPD_u8R0_PIN,KPD_u8R1_PIN,KPD_u8R2_PIN,KPD_u8R3_PIN};
    static uint8 Local_u8ColArr[ROW_SIZE]={KPD_u8C0_PIN,KPD_u8C1_PIN,KPD_u8C2_PIN,KPD_u8C3_PIN};
    static uint8 Local_u8KPDArr[ROW_SIZE][COL_SIZE]= KPD_u8BUTTONARR_VAL;
    //activate the column pins
    for(Local_u8ItrCol=0;Local_u8ItrCol<COL_SIZE;Local_u8ItrCol++){
    30a0:	1a 82       	std	Y+2, r1	; 0x02
    30a2:	66 c0       	rjmp	.+204    	; 0x3170 <KPD_u8GetPressedKey+0xf0>
    
        //activate the current column
        DIO_u8_SetPinVal(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ItrCol],DIO_PIN_LOW);
    30a4:	8a 81       	ldd	r24, Y+2	; 0x02
    30a6:	88 2f       	mov	r24, r24
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	fc 01       	movw	r30, r24
    30ac:	e9 55       	subi	r30, 0x59	; 89
    30ae:	fe 4f       	sbci	r31, 0xFE	; 254
    30b0:	90 81       	ld	r25, Z
    30b2:	83 e0       	ldi	r24, 0x03	; 3
    30b4:	69 2f       	mov	r22, r25
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>

        //read the row pins
        for(Local_u8ItrRow=0;Local_u8ItrRow<ROW_SIZE;Local_u8ItrRow++){
    30bc:	1b 82       	std	Y+3, r1	; 0x03
    30be:	45 c0       	rjmp	.+138    	; 0x314a <KPD_u8GetPressedKey+0xca>
            //read the current row 
            DIO_u8_GetPinVal(KPD_u8ROW_PORT,Local_u8RowArr[Local_u8ItrRow],&Local_u8KeyState);
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	88 2f       	mov	r24, r24
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	fc 01       	movw	r30, r24
    30c8:	e5 55       	subi	r30, 0x55	; 85
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	90 81       	ld	r25, Z
    30ce:	9e 01       	movw	r18, r28
    30d0:	2c 5f       	subi	r18, 0xFC	; 252
    30d2:	3f 4f       	sbci	r19, 0xFF	; 255
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	69 2f       	mov	r22, r25
    30d8:	a9 01       	movw	r20, r18
    30da:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <DIO_u8_GetPinVal>
            if(Local_u8KeyState == DIO_PIN_LOW){
    30de:	8c 81       	ldd	r24, Y+4	; 0x04
    30e0:	88 23       	and	r24, r24
    30e2:	81 f5       	brne	.+96     	; 0x3144 <KPD_u8GetPressedKey+0xc4>
                Local_u8PressedKey = Local_u8KPDArr[Local_u8ItrRow][Local_u8ItrCol];
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	48 2f       	mov	r20, r24
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	28 2f       	mov	r18, r24
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	ca 01       	movw	r24, r20
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	82 0f       	add	r24, r18
    30fc:	93 1f       	adc	r25, r19
    30fe:	fc 01       	movw	r30, r24
    3100:	e9 56       	subi	r30, 0x69	; 105
    3102:	fe 4f       	sbci	r31, 0xFE	; 254
    3104:	80 81       	ld	r24, Z
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <KPD_u8GetPressedKey+0xa8>
                //wait until key is released (polling with blocking on pin reading)
                while(Local_u8KeyState == DIO_PIN_LOW){
                    DIO_u8_GetPinVal(KPD_u8ROW_PORT,Local_u8RowArr[Local_u8ItrRow],&Local_u8KeyState);
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	88 2f       	mov	r24, r24
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	fc 01       	movw	r30, r24
    3112:	e5 55       	subi	r30, 0x55	; 85
    3114:	fe 4f       	sbci	r31, 0xFE	; 254
    3116:	90 81       	ld	r25, Z
    3118:	9e 01       	movw	r18, r28
    311a:	2c 5f       	subi	r18, 0xFC	; 252
    311c:	3f 4f       	sbci	r19, 0xFF	; 255
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	69 2f       	mov	r22, r25
    3122:	a9 01       	movw	r20, r18
    3124:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <DIO_u8_GetPinVal>
            //read the current row 
            DIO_u8_GetPinVal(KPD_u8ROW_PORT,Local_u8RowArr[Local_u8ItrRow],&Local_u8KeyState);
            if(Local_u8KeyState == DIO_PIN_LOW){
                Local_u8PressedKey = Local_u8KPDArr[Local_u8ItrRow][Local_u8ItrCol];
                //wait until key is released (polling with blocking on pin reading)
                while(Local_u8KeyState == DIO_PIN_LOW){
    3128:	8c 81       	ldd	r24, Y+4	; 0x04
    312a:	88 23       	and	r24, r24
    312c:	71 f3       	breq	.-36     	; 0x310a <KPD_u8GetPressedKey+0x8a>
                    DIO_u8_GetPinVal(KPD_u8ROW_PORT,Local_u8RowArr[Local_u8ItrRow],&Local_u8KeyState);
                }
                *referance_u8Row=Local_u8ItrRow;
    312e:	ed 81       	ldd	r30, Y+5	; 0x05
    3130:	fe 81       	ldd	r31, Y+6	; 0x06
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	80 83       	st	Z, r24
                *referance_u8Col=Local_u8ItrCol;
    3136:	ef 81       	ldd	r30, Y+7	; 0x07
    3138:	f8 85       	ldd	r31, Y+8	; 0x08
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	80 83       	st	Z, r24
                return Local_u8PressedKey;
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	89 87       	std	Y+9, r24	; 0x09
    3142:	1c c0       	rjmp	.+56     	; 0x317c <KPD_u8GetPressedKey+0xfc>
    
        //activate the current column
        DIO_u8_SetPinVal(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ItrCol],DIO_PIN_LOW);

        //read the row pins
        for(Local_u8ItrRow=0;Local_u8ItrRow<ROW_SIZE;Local_u8ItrRow++){
    3144:	8b 81       	ldd	r24, Y+3	; 0x03
    3146:	8f 5f       	subi	r24, 0xFF	; 255
    3148:	8b 83       	std	Y+3, r24	; 0x03
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	84 30       	cpi	r24, 0x04	; 4
    314e:	08 f4       	brcc	.+2      	; 0x3152 <KPD_u8GetPressedKey+0xd2>
    3150:	b7 cf       	rjmp	.-146    	; 0x30c0 <KPD_u8GetPressedKey+0x40>
                return Local_u8PressedKey;
            }

        }
        //deactivate the current column
        DIO_u8_SetPinVal(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ItrCol],DIO_PIN_HIGH);
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	88 2f       	mov	r24, r24
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	fc 01       	movw	r30, r24
    315a:	e9 55       	subi	r30, 0x59	; 89
    315c:	fe 4f       	sbci	r31, 0xFE	; 254
    315e:	90 81       	ld	r25, Z
    3160:	83 e0       	ldi	r24, 0x03	; 3
    3162:	69 2f       	mov	r22, r25
    3164:	41 e0       	ldi	r20, 0x01	; 1
    3166:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    uint8 Local_u8ItrRow,Local_u8ItrCol,Local_u8KeyState, Local_u8PressedKey= KPD_u8NO_PRESSED_KEY_VAL;
    static uint8 Local_u8RowArr[ROW_SIZE]={KPD_u8R0_PIN,KPD_u8R1_PIN,KPD_u8R2_PIN,KPD_u8R3_PIN};
    static uint8 Local_u8ColArr[ROW_SIZE]={KPD_u8C0_PIN,KPD_u8C1_PIN,KPD_u8C2_PIN,KPD_u8C3_PIN};
    static uint8 Local_u8KPDArr[ROW_SIZE][COL_SIZE]= KPD_u8BUTTONARR_VAL;
    //activate the column pins
    for(Local_u8ItrCol=0;Local_u8ItrCol<COL_SIZE;Local_u8ItrCol++){
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	8f 5f       	subi	r24, 0xFF	; 255
    316e:	8a 83       	std	Y+2, r24	; 0x02
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	84 30       	cpi	r24, 0x04	; 4
    3174:	08 f4       	brcc	.+2      	; 0x3178 <KPD_u8GetPressedKey+0xf8>
    3176:	96 cf       	rjmp	.-212    	; 0x30a4 <KPD_u8GetPressedKey+0x24>
        }
        //deactivate the current column
        DIO_u8_SetPinVal(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ItrCol],DIO_PIN_HIGH);
    }

    return Local_u8PressedKey;
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	89 87       	std	Y+9, r24	; 0x09
    317c:	89 85       	ldd	r24, Y+9	; 0x09

}
    317e:	29 96       	adiw	r28, 0x09	; 9
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	de bf       	out	0x3e, r29	; 62
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	cd bf       	out	0x3d, r28	; 61
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	08 95       	ret

00003190 <DCM_voidRotateCW>:
#include "../../libraries/STD_TYPES_H.h"
#include "../../libraries/ErrType.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"
#include "DCM_interface.h"

void DCM_voidRotateCW(DCM_Config_t* referance_motor ){
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	00 d0       	rcall	.+0      	; 0x3196 <DCM_voidRotateCW+0x6>
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	9a 83       	std	Y+2, r25	; 0x02
    319c:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin0, DIO_PIN_LOW);
    319e:	e9 81       	ldd	r30, Y+1	; 0x01
    31a0:	fa 81       	ldd	r31, Y+2	; 0x02
    31a2:	80 81       	ld	r24, Z
    31a4:	e9 81       	ldd	r30, Y+1	; 0x01
    31a6:	fa 81       	ldd	r31, Y+2	; 0x02
    31a8:	91 81       	ldd	r25, Z+1	; 0x01
    31aa:	69 2f       	mov	r22, r25
    31ac:	40 e0       	ldi	r20, 0x00	; 0
    31ae:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin1, DIO_PIN_HIGH);
    31b2:	e9 81       	ldd	r30, Y+1	; 0x01
    31b4:	fa 81       	ldd	r31, Y+2	; 0x02
    31b6:	80 81       	ld	r24, Z
    31b8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ba:	fa 81       	ldd	r31, Y+2	; 0x02
    31bc:	92 81       	ldd	r25, Z+2	; 0x02
    31be:	69 2f       	mov	r22, r25
    31c0:	41 e0       	ldi	r20, 0x01	; 1
    31c2:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
}
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	08 95       	ret

000031d0 <DCM_voidRotateCCW>:
void DCM_voidRotateCCW(DCM_Config_t* referance_motor ){
    31d0:	df 93       	push	r29
    31d2:	cf 93       	push	r28
    31d4:	00 d0       	rcall	.+0      	; 0x31d6 <DCM_voidRotateCCW+0x6>
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
    31da:	9a 83       	std	Y+2, r25	; 0x02
    31dc:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin1, DIO_PIN_LOW);
    31de:	e9 81       	ldd	r30, Y+1	; 0x01
    31e0:	fa 81       	ldd	r31, Y+2	; 0x02
    31e2:	80 81       	ld	r24, Z
    31e4:	e9 81       	ldd	r30, Y+1	; 0x01
    31e6:	fa 81       	ldd	r31, Y+2	; 0x02
    31e8:	92 81       	ldd	r25, Z+2	; 0x02
    31ea:	69 2f       	mov	r22, r25
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin0, DIO_PIN_HIGH);
    31f2:	e9 81       	ldd	r30, Y+1	; 0x01
    31f4:	fa 81       	ldd	r31, Y+2	; 0x02
    31f6:	80 81       	ld	r24, Z
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	69 2f       	mov	r22, r25
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
}
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <DCM_voidStop>:
void DCM_voidStop(DCM_Config_t* referance_motor ){
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	00 d0       	rcall	.+0      	; 0x3216 <DCM_voidStop+0x6>
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin0, DIO_PIN_LOW);
    321e:	e9 81       	ldd	r30, Y+1	; 0x01
    3220:	fa 81       	ldd	r31, Y+2	; 0x02
    3222:	80 81       	ld	r24, Z
    3224:	e9 81       	ldd	r30, Y+1	; 0x01
    3226:	fa 81       	ldd	r31, Y+2	; 0x02
    3228:	91 81       	ldd	r25, Z+1	; 0x01
    322a:	69 2f       	mov	r22, r25
    322c:	40 e0       	ldi	r20, 0x00	; 0
    322e:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin1, DIO_PIN_LOW);
    3232:	e9 81       	ldd	r30, Y+1	; 0x01
    3234:	fa 81       	ldd	r31, Y+2	; 0x02
    3236:	80 81       	ld	r24, Z
    3238:	e9 81       	ldd	r30, Y+1	; 0x01
    323a:	fa 81       	ldd	r31, Y+2	; 0x02
    323c:	92 81       	ldd	r25, Z+2	; 0x02
    323e:	69 2f       	mov	r22, r25
    3240:	40 e0       	ldi	r20, 0x00	; 0
    3242:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
}
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	08 95       	ret

00003250 <voidSendEnablePulse>:
    DIO_u8_SetPinVal(CLCD_u8DATA_PORT,CLCD_u8D5_PIN, GET_BIT(copy_u8FourBitData,1));
    DIO_u8_SetPinVal(CLCD_u8DATA_PORT,CLCD_u8D6_PIN, GET_BIT(copy_u8FourBitData,2));
    DIO_u8_SetPinVal(CLCD_u8DATA_PORT,CLCD_u8D7_PIN, GET_BIT(copy_u8FourBitData,3));
}
#endif
static void voidSendEnablePulse(){
    3250:	df 93       	push	r29
    3252:	cf 93       	push	r28
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	2e 97       	sbiw	r28, 0x0e	; 14
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_HIGH);
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	61 e0       	ldi	r22, 0x01	; 1
    3268:	41 e0       	ldi	r20, 0x01	; 1
    326a:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	a0 e0       	ldi	r26, 0x00	; 0
    3274:	b0 e4       	ldi	r27, 0x40	; 64
    3276:	8b 87       	std	Y+11, r24	; 0x0b
    3278:	9c 87       	std	Y+12, r25	; 0x0c
    327a:	ad 87       	std	Y+13, r26	; 0x0d
    327c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3280:	7c 85       	ldd	r23, Y+12	; 0x0c
    3282:	8d 85       	ldd	r24, Y+13	; 0x0d
    3284:	9e 85       	ldd	r25, Y+14	; 0x0e
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	4a e7       	ldi	r20, 0x7A	; 122
    328c:	55 e4       	ldi	r21, 0x45	; 69
    328e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	8f 83       	std	Y+7, r24	; 0x07
    3298:	98 87       	std	Y+8, r25	; 0x08
    329a:	a9 87       	std	Y+9, r26	; 0x09
    329c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    329e:	6f 81       	ldd	r22, Y+7	; 0x07
    32a0:	78 85       	ldd	r23, Y+8	; 0x08
    32a2:	89 85       	ldd	r24, Y+9	; 0x09
    32a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	40 e8       	ldi	r20, 0x80	; 128
    32ac:	5f e3       	ldi	r21, 0x3F	; 63
    32ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b2:	88 23       	and	r24, r24
    32b4:	2c f4       	brge	.+10     	; 0x32c0 <voidSendEnablePulse+0x70>
		__ticks = 1;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	9e 83       	std	Y+6, r25	; 0x06
    32bc:	8d 83       	std	Y+5, r24	; 0x05
    32be:	3f c0       	rjmp	.+126    	; 0x333e <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    32c0:	6f 81       	ldd	r22, Y+7	; 0x07
    32c2:	78 85       	ldd	r23, Y+8	; 0x08
    32c4:	89 85       	ldd	r24, Y+9	; 0x09
    32c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	3f ef       	ldi	r19, 0xFF	; 255
    32cc:	4f e7       	ldi	r20, 0x7F	; 127
    32ce:	57 e4       	ldi	r21, 0x47	; 71
    32d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d4:	18 16       	cp	r1, r24
    32d6:	4c f5       	brge	.+82     	; 0x332a <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32da:	7c 85       	ldd	r23, Y+12	; 0x0c
    32dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32de:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 e2       	ldi	r20, 0x20	; 32
    32e6:	51 e4       	ldi	r21, 0x41	; 65
    32e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	9e 83       	std	Y+6, r25	; 0x06
    32fe:	8d 83       	std	Y+5, r24	; 0x05
    3300:	0f c0       	rjmp	.+30     	; 0x3320 <voidSendEnablePulse+0xd0>
    3302:	80 e9       	ldi	r24, 0x90	; 144
    3304:	91 e0       	ldi	r25, 0x01	; 1
    3306:	9c 83       	std	Y+4, r25	; 0x04
    3308:	8b 83       	std	Y+3, r24	; 0x03
    330a:	8b 81       	ldd	r24, Y+3	; 0x03
    330c:	9c 81       	ldd	r25, Y+4	; 0x04
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	f1 f7       	brne	.-4      	; 0x330e <voidSendEnablePulse+0xbe>
    3312:	9c 83       	std	Y+4, r25	; 0x04
    3314:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3316:	8d 81       	ldd	r24, Y+5	; 0x05
    3318:	9e 81       	ldd	r25, Y+6	; 0x06
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	9e 83       	std	Y+6, r25	; 0x06
    331e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	9e 81       	ldd	r25, Y+6	; 0x06
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	69 f7       	brne	.-38     	; 0x3302 <voidSendEnablePulse+0xb2>
    3328:	14 c0       	rjmp	.+40     	; 0x3352 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332a:	6f 81       	ldd	r22, Y+7	; 0x07
    332c:	78 85       	ldd	r23, Y+8	; 0x08
    332e:	89 85       	ldd	r24, Y+9	; 0x09
    3330:	9a 85       	ldd	r25, Y+10	; 0x0a
    3332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	9e 83       	std	Y+6, r25	; 0x06
    333c:	8d 83       	std	Y+5, r24	; 0x05
    333e:	8d 81       	ldd	r24, Y+5	; 0x05
    3340:	9e 81       	ldd	r25, Y+6	; 0x06
    3342:	9a 83       	std	Y+2, r25	; 0x02
    3344:	89 83       	std	Y+1, r24	; 0x01
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	9a 81       	ldd	r25, Y+2	; 0x02
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	f1 f7       	brne	.-4      	; 0x334a <voidSendEnablePulse+0xfa>
    334e:	9a 83       	std	Y+2, r25	; 0x02
    3350:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_LOW);
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	61 e0       	ldi	r22, 0x01	; 1
    3356:	40 e0       	ldi	r20, 0x00	; 0
    3358:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
}
    335c:	2e 96       	adiw	r28, 0x0e	; 14
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	f8 94       	cli
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	cd bf       	out	0x3d, r28	; 61
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	08 95       	ret

0000336e <_helper_VoidReverseBuffer>:

static void _helper_VoidReverseBuffer(uint8* ref_u8Buffer, uint8 copy_u8StartIndex,uint8 copy_u8EndIndex){
    336e:	df 93       	push	r29
    3370:	cf 93       	push	r28
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	28 97       	sbiw	r28, 0x08	; 8
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	f8 94       	cli
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	cd bf       	out	0x3d, r28	; 61
    3382:	9e 83       	std	Y+6, r25	; 0x06
    3384:	8d 83       	std	Y+5, r24	; 0x05
    3386:	6f 83       	std	Y+7, r22	; 0x07
    3388:	48 87       	std	Y+8, r20	; 0x08
    uint8 Local_u8LCounter =copy_u8EndIndex;
    338a:	88 85       	ldd	r24, Y+8	; 0x08
    338c:	8c 83       	std	Y+4, r24	; 0x04

    uint8 Local_u8Tmp;
    uint8 Local_u8Mid = (copy_u8EndIndex/2),Local_u8IncPart = copy_u8EndIndex;
    338e:	88 85       	ldd	r24, Y+8	; 0x08
    3390:	86 95       	lsr	r24
    3392:	8a 83       	std	Y+2, r24	; 0x02
    3394:	88 85       	ldd	r24, Y+8	; 0x08
    3396:	89 83       	std	Y+1, r24	; 0x01
    if (copy_u8StartIndex)
    3398:	8f 81       	ldd	r24, Y+7	; 0x07
    339a:	88 23       	and	r24, r24
    339c:	e9 f1       	breq	.+122    	; 0x3418 <_helper_VoidReverseBuffer+0xaa>
        Local_u8IncPart = copy_u8EndIndex+1;
    339e:	88 85       	ldd	r24, Y+8	; 0x08
    33a0:	8f 5f       	subi	r24, 0xFF	; 255
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	39 c0       	rjmp	.+114    	; 0x3418 <_helper_VoidReverseBuffer+0xaa>
    while(Local_u8LCounter>Local_u8Mid){
        Local_u8Tmp = ref_u8Buffer[Local_u8LCounter];
    33a6:	8c 81       	ldd	r24, Y+4	; 0x04
    33a8:	28 2f       	mov	r18, r24
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	8d 81       	ldd	r24, Y+5	; 0x05
    33ae:	9e 81       	ldd	r25, Y+6	; 0x06
    33b0:	fc 01       	movw	r30, r24
    33b2:	e2 0f       	add	r30, r18
    33b4:	f3 1f       	adc	r31, r19
    33b6:	80 81       	ld	r24, Z
    33b8:	8b 83       	std	Y+3, r24	; 0x03
        ref_u8Buffer[Local_u8LCounter]= ref_u8Buffer[Local_u8IncPart-Local_u8LCounter];
    33ba:	8c 81       	ldd	r24, Y+4	; 0x04
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	8d 81       	ldd	r24, Y+5	; 0x05
    33c2:	9e 81       	ldd	r25, Y+6	; 0x06
    33c4:	dc 01       	movw	r26, r24
    33c6:	a2 0f       	add	r26, r18
    33c8:	b3 1f       	adc	r27, r19
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	8c 81       	ldd	r24, Y+4	; 0x04
    33d2:	88 2f       	mov	r24, r24
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	a9 01       	movw	r20, r18
    33d8:	48 1b       	sub	r20, r24
    33da:	59 0b       	sbc	r21, r25
    33dc:	ca 01       	movw	r24, r20
    33de:	9c 01       	movw	r18, r24
    33e0:	8d 81       	ldd	r24, Y+5	; 0x05
    33e2:	9e 81       	ldd	r25, Y+6	; 0x06
    33e4:	fc 01       	movw	r30, r24
    33e6:	e2 0f       	add	r30, r18
    33e8:	f3 1f       	adc	r31, r19
    33ea:	80 81       	ld	r24, Z
    33ec:	8c 93       	st	X, r24
        ref_u8Buffer[Local_u8IncPart-Local_u8LCounter]=Local_u8Tmp;
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	8c 81       	ldd	r24, Y+4	; 0x04
    33f6:	88 2f       	mov	r24, r24
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	a9 01       	movw	r20, r18
    33fc:	48 1b       	sub	r20, r24
    33fe:	59 0b       	sbc	r21, r25
    3400:	ca 01       	movw	r24, r20
    3402:	9c 01       	movw	r18, r24
    3404:	8d 81       	ldd	r24, Y+5	; 0x05
    3406:	9e 81       	ldd	r25, Y+6	; 0x06
    3408:	fc 01       	movw	r30, r24
    340a:	e2 0f       	add	r30, r18
    340c:	f3 1f       	adc	r31, r19
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	80 83       	st	Z, r24
        Local_u8LCounter--;
    3412:	8c 81       	ldd	r24, Y+4	; 0x04
    3414:	81 50       	subi	r24, 0x01	; 1
    3416:	8c 83       	std	Y+4, r24	; 0x04

    uint8 Local_u8Tmp;
    uint8 Local_u8Mid = (copy_u8EndIndex/2),Local_u8IncPart = copy_u8EndIndex;
    if (copy_u8StartIndex)
        Local_u8IncPart = copy_u8EndIndex+1;
    while(Local_u8LCounter>Local_u8Mid){
    3418:	9c 81       	ldd	r25, Y+4	; 0x04
    341a:	8a 81       	ldd	r24, Y+2	; 0x02
    341c:	89 17       	cp	r24, r25
    341e:	18 f2       	brcs	.-122    	; 0x33a6 <_helper_VoidReverseBuffer+0x38>
        ref_u8Buffer[Local_u8LCounter]= ref_u8Buffer[Local_u8IncPart-Local_u8LCounter];
        ref_u8Buffer[Local_u8IncPart-Local_u8LCounter]=Local_u8Tmp;
        Local_u8LCounter--;
    }

}
    3420:	28 96       	adiw	r28, 0x08	; 8
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <_helper_VoidNumToStr>:
static void _helper_VoidNumToStr(sint32 copy_s32number,uint8* ref_u8Buffer){
    3432:	0f 93       	push	r16
    3434:	1f 93       	push	r17
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	28 97       	sbiw	r28, 0x08	; 8
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	6b 83       	std	Y+3, r22	; 0x03
    344c:	7c 83       	std	Y+4, r23	; 0x04
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	58 87       	std	Y+8, r21	; 0x08
    3454:	4f 83       	std	Y+7, r20	; 0x07



    if (copy_s32number==0){
    3456:	8b 81       	ldd	r24, Y+3	; 0x03
    3458:	9c 81       	ldd	r25, Y+4	; 0x04
    345a:	ad 81       	ldd	r26, Y+5	; 0x05
    345c:	be 81       	ldd	r27, Y+6	; 0x06
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	a1 05       	cpc	r26, r1
    3462:	b1 05       	cpc	r27, r1
    3464:	51 f4       	brne	.+20     	; 0x347a <_helper_VoidNumToStr+0x48>
        ref_u8Buffer[0]='0';
    3466:	ef 81       	ldd	r30, Y+7	; 0x07
    3468:	f8 85       	ldd	r31, Y+8	; 0x08
    346a:	80 e3       	ldi	r24, 0x30	; 48
    346c:	80 83       	st	Z, r24
        ref_u8Buffer[1]='\0';
    346e:	8f 81       	ldd	r24, Y+7	; 0x07
    3470:	98 85       	ldd	r25, Y+8	; 0x08
    3472:	fc 01       	movw	r30, r24
    3474:	31 96       	adiw	r30, 0x01	; 1
    3476:	10 82       	st	Z, r1
    3478:	86 c0       	rjmp	.+268    	; 0x3586 <_helper_VoidNumToStr+0x154>
        return;
    }

    uint8 Local_u8counter = 0;
    347a:	1a 82       	std	Y+2, r1	; 0x02
    uint8 Local_u8MFlag = 0;
    347c:	19 82       	std	Y+1, r1	; 0x01

    if(copy_s32number<0){
    347e:	8b 81       	ldd	r24, Y+3	; 0x03
    3480:	9c 81       	ldd	r25, Y+4	; 0x04
    3482:	ad 81       	ldd	r26, Y+5	; 0x05
    3484:	be 81       	ldd	r27, Y+6	; 0x06
    3486:	bb 23       	and	r27, r27
    3488:	0c f0       	brlt	.+2      	; 0x348c <_helper_VoidNumToStr+0x5a>
    348a:	4d c0       	rjmp	.+154    	; 0x3526 <_helper_VoidNumToStr+0xf4>
            ref_u8Buffer[Local_u8counter]='-';
    348c:	8a 81       	ldd	r24, Y+2	; 0x02
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	8f 81       	ldd	r24, Y+7	; 0x07
    3494:	98 85       	ldd	r25, Y+8	; 0x08
    3496:	fc 01       	movw	r30, r24
    3498:	e2 0f       	add	r30, r18
    349a:	f3 1f       	adc	r31, r19
    349c:	8d e2       	ldi	r24, 0x2D	; 45
    349e:	80 83       	st	Z, r24
            Local_u8counter++;
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	8f 5f       	subi	r24, 0xFF	; 255
    34a4:	8a 83       	std	Y+2, r24	; 0x02
            copy_s32number *=-1;
    34a6:	8b 81       	ldd	r24, Y+3	; 0x03
    34a8:	9c 81       	ldd	r25, Y+4	; 0x04
    34aa:	ad 81       	ldd	r26, Y+5	; 0x05
    34ac:	be 81       	ldd	r27, Y+6	; 0x06
    34ae:	b0 95       	com	r27
    34b0:	a0 95       	com	r26
    34b2:	90 95       	com	r25
    34b4:	81 95       	neg	r24
    34b6:	9f 4f       	sbci	r25, 0xFF	; 255
    34b8:	af 4f       	sbci	r26, 0xFF	; 255
    34ba:	bf 4f       	sbci	r27, 0xFF	; 255
    34bc:	8b 83       	std	Y+3, r24	; 0x03
    34be:	9c 83       	std	Y+4, r25	; 0x04
    34c0:	ad 83       	std	Y+5, r26	; 0x05
    34c2:	be 83       	std	Y+6, r27	; 0x06
            Local_u8MFlag = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	89 83       	std	Y+1, r24	; 0x01
    34c8:	2e c0       	rjmp	.+92     	; 0x3526 <_helper_VoidNumToStr+0xf4>
    }
	while(copy_s32number){
        //printf("%d ",copy_s32number);

		ref_u8Buffer[Local_u8counter]=(copy_s32number%10)+48;
    34ca:	8a 81       	ldd	r24, Y+2	; 0x02
    34cc:	28 2f       	mov	r18, r24
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	8f 81       	ldd	r24, Y+7	; 0x07
    34d2:	98 85       	ldd	r25, Y+8	; 0x08
    34d4:	8c 01       	movw	r16, r24
    34d6:	02 0f       	add	r16, r18
    34d8:	13 1f       	adc	r17, r19
    34da:	8b 81       	ldd	r24, Y+3	; 0x03
    34dc:	9c 81       	ldd	r25, Y+4	; 0x04
    34de:	ad 81       	ldd	r26, Y+5	; 0x05
    34e0:	be 81       	ldd	r27, Y+6	; 0x06
    34e2:	2a e0       	ldi	r18, 0x0A	; 10
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	50 e0       	ldi	r21, 0x00	; 0
    34ea:	bc 01       	movw	r22, r24
    34ec:	cd 01       	movw	r24, r26
    34ee:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <__divmodsi4>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	80 5d       	subi	r24, 0xD0	; 208
    34f8:	f8 01       	movw	r30, r16
    34fa:	80 83       	st	Z, r24
		//printf("%d ",ref_u8Buffer[Local_u8counter]);
		copy_s32number /=10;
    34fc:	8b 81       	ldd	r24, Y+3	; 0x03
    34fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3500:	ad 81       	ldd	r26, Y+5	; 0x05
    3502:	be 81       	ldd	r27, Y+6	; 0x06
    3504:	2a e0       	ldi	r18, 0x0A	; 10
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e0       	ldi	r20, 0x00	; 0
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	bc 01       	movw	r22, r24
    350e:	cd 01       	movw	r24, r26
    3510:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <__divmodsi4>
    3514:	da 01       	movw	r26, r20
    3516:	c9 01       	movw	r24, r18
    3518:	8b 83       	std	Y+3, r24	; 0x03
    351a:	9c 83       	std	Y+4, r25	; 0x04
    351c:	ad 83       	std	Y+5, r26	; 0x05
    351e:	be 83       	std	Y+6, r27	; 0x06
        Local_u8counter++;
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	8f 5f       	subi	r24, 0xFF	; 255
    3524:	8a 83       	std	Y+2, r24	; 0x02
            ref_u8Buffer[Local_u8counter]='-';
            Local_u8counter++;
            copy_s32number *=-1;
            Local_u8MFlag = 1;
    }
	while(copy_s32number){
    3526:	8b 81       	ldd	r24, Y+3	; 0x03
    3528:	9c 81       	ldd	r25, Y+4	; 0x04
    352a:	ad 81       	ldd	r26, Y+5	; 0x05
    352c:	be 81       	ldd	r27, Y+6	; 0x06
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	a1 05       	cpc	r26, r1
    3532:	b1 05       	cpc	r27, r1
    3534:	51 f6       	brne	.-108    	; 0x34ca <_helper_VoidNumToStr+0x98>
		//printf("%d ",ref_u8Buffer[Local_u8counter]);
		copy_s32number /=10;
        Local_u8counter++;

	}
    if (Local_u8counter > CLCD_u8_LINE_SIZE )
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	81 31       	cpi	r24, 0x11	; 17
    353a:	30 f0       	brcs	.+12     	; 0x3548 <_helper_VoidNumToStr+0x116>
        ref_u8Buffer[CLCD_u8_LINE_SIZE]='\0';
    353c:	8f 81       	ldd	r24, Y+7	; 0x07
    353e:	98 85       	ldd	r25, Y+8	; 0x08
    3540:	fc 01       	movw	r30, r24
    3542:	70 96       	adiw	r30, 0x10	; 16
    3544:	10 82       	st	Z, r1
    3546:	09 c0       	rjmp	.+18     	; 0x355a <_helper_VoidNumToStr+0x128>
    else
	    ref_u8Buffer[Local_u8counter]='\0';
    3548:	8a 81       	ldd	r24, Y+2	; 0x02
    354a:	28 2f       	mov	r18, r24
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	8f 81       	ldd	r24, Y+7	; 0x07
    3550:	98 85       	ldd	r25, Y+8	; 0x08
    3552:	fc 01       	movw	r30, r24
    3554:	e2 0f       	add	r30, r18
    3556:	f3 1f       	adc	r31, r19
    3558:	10 82       	st	Z, r1
	if (Local_u8MFlag ==0)
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	88 23       	and	r24, r24
    355e:	51 f4       	brne	.+20     	; 0x3574 <_helper_VoidNumToStr+0x142>
		_helper_VoidReverseBuffer(ref_u8Buffer,0,Local_u8counter-1);
    3560:	8a 81       	ldd	r24, Y+2	; 0x02
    3562:	28 2f       	mov	r18, r24
    3564:	21 50       	subi	r18, 0x01	; 1
    3566:	8f 81       	ldd	r24, Y+7	; 0x07
    3568:	98 85       	ldd	r25, Y+8	; 0x08
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	42 2f       	mov	r20, r18
    356e:	0e 94 b7 19 	call	0x336e	; 0x336e <_helper_VoidReverseBuffer>
    3572:	09 c0       	rjmp	.+18     	; 0x3586 <_helper_VoidNumToStr+0x154>
    else
    	_helper_VoidReverseBuffer(ref_u8Buffer,1,Local_u8counter-1);
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	28 2f       	mov	r18, r24
    3578:	21 50       	subi	r18, 0x01	; 1
    357a:	8f 81       	ldd	r24, Y+7	; 0x07
    357c:	98 85       	ldd	r25, Y+8	; 0x08
    357e:	61 e0       	ldi	r22, 0x01	; 1
    3580:	42 2f       	mov	r20, r18
    3582:	0e 94 b7 19 	call	0x336e	; 0x336e <_helper_VoidReverseBuffer>
	//return ;
}
    3586:	28 96       	adiw	r28, 0x08	; 8
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	de bf       	out	0x3e, r29	; 62
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	cf 91       	pop	r28
    3594:	df 91       	pop	r29
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	08 95       	ret

0000359c <CLCD_VoidSendCommand>:

void CLCD_VoidSendCommand(uint8 copy_u8command){
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	2f 97       	sbiw	r28, 0x0f	; 15
    35a6:	0f b6       	in	r0, 0x3f	; 63
    35a8:	f8 94       	cli
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	cd bf       	out	0x3d, r28	; 61
    35b0:	8f 87       	std	Y+15, r24	; 0x0f

    // 1-set RS pin to low for command
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_PIN_LOW);
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	60 e0       	ldi	r22, 0x00	; 0
    35b6:	40 e0       	ldi	r20, 0x00	; 0
    35b8:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    #if CLCD_u8READ_OPERATION_ENABLE == ENABLED
        DIO_u8_SetPinVal(CLCD_u8CTRL_PORT, CLCD_u8RW_PIN, DIO_PIN_LOW);
    #endif
    // 3- send the command
    #if CLCD_u8CONNECTION_MODE ==  EIGHT_BIT
    DIO_u8_SetPortVal(CLCD_u8DATA_PORT, copy_u8command);
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	6f 85       	ldd	r22, Y+15	; 0x0f
    35c0:	0e 94 a8 22 	call	0x4550	; 0x4550 <DIO_u8_SetPortVal>

    // 4- send enable pulse
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_HIGH);
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	61 e0       	ldi	r22, 0x01	; 1
    35c8:	41 e0       	ldi	r20, 0x01	; 1
    35ca:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	a0 e0       	ldi	r26, 0x00	; 0
    35d4:	b0 e4       	ldi	r27, 0x40	; 64
    35d6:	8b 87       	std	Y+11, r24	; 0x0b
    35d8:	9c 87       	std	Y+12, r25	; 0x0c
    35da:	ad 87       	std	Y+13, r26	; 0x0d
    35dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35de:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	4a e7       	ldi	r20, 0x7A	; 122
    35ec:	55 e4       	ldi	r21, 0x45	; 69
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	8f 83       	std	Y+7, r24	; 0x07
    35f8:	98 87       	std	Y+8, r25	; 0x08
    35fa:	a9 87       	std	Y+9, r26	; 0x09
    35fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3600:	78 85       	ldd	r23, Y+8	; 0x08
    3602:	89 85       	ldd	r24, Y+9	; 0x09
    3604:	9a 85       	ldd	r25, Y+10	; 0x0a
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e8       	ldi	r20, 0x80	; 128
    360c:	5f e3       	ldi	r21, 0x3F	; 63
    360e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3612:	88 23       	and	r24, r24
    3614:	2c f4       	brge	.+10     	; 0x3620 <CLCD_VoidSendCommand+0x84>
		__ticks = 1;
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	9e 83       	std	Y+6, r25	; 0x06
    361c:	8d 83       	std	Y+5, r24	; 0x05
    361e:	3f c0       	rjmp	.+126    	; 0x369e <CLCD_VoidSendCommand+0x102>
	else if (__tmp > 65535)
    3620:	6f 81       	ldd	r22, Y+7	; 0x07
    3622:	78 85       	ldd	r23, Y+8	; 0x08
    3624:	89 85       	ldd	r24, Y+9	; 0x09
    3626:	9a 85       	ldd	r25, Y+10	; 0x0a
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	3f ef       	ldi	r19, 0xFF	; 255
    362c:	4f e7       	ldi	r20, 0x7F	; 127
    362e:	57 e4       	ldi	r21, 0x47	; 71
    3630:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3634:	18 16       	cp	r1, r24
    3636:	4c f5       	brge	.+82     	; 0x368a <CLCD_VoidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3638:	6b 85       	ldd	r22, Y+11	; 0x0b
    363a:	7c 85       	ldd	r23, Y+12	; 0x0c
    363c:	8d 85       	ldd	r24, Y+13	; 0x0d
    363e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e2       	ldi	r20, 0x20	; 32
    3646:	51 e4       	ldi	r21, 0x41	; 65
    3648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	bc 01       	movw	r22, r24
    3652:	cd 01       	movw	r24, r26
    3654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	9e 83       	std	Y+6, r25	; 0x06
    365e:	8d 83       	std	Y+5, r24	; 0x05
    3660:	0f c0       	rjmp	.+30     	; 0x3680 <CLCD_VoidSendCommand+0xe4>
    3662:	80 e9       	ldi	r24, 0x90	; 144
    3664:	91 e0       	ldi	r25, 0x01	; 1
    3666:	9c 83       	std	Y+4, r25	; 0x04
    3668:	8b 83       	std	Y+3, r24	; 0x03
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
    366c:	9c 81       	ldd	r25, Y+4	; 0x04
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	f1 f7       	brne	.-4      	; 0x366e <CLCD_VoidSendCommand+0xd2>
    3672:	9c 83       	std	Y+4, r25	; 0x04
    3674:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3676:	8d 81       	ldd	r24, Y+5	; 0x05
    3678:	9e 81       	ldd	r25, Y+6	; 0x06
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	9e 83       	std	Y+6, r25	; 0x06
    367e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3680:	8d 81       	ldd	r24, Y+5	; 0x05
    3682:	9e 81       	ldd	r25, Y+6	; 0x06
    3684:	00 97       	sbiw	r24, 0x00	; 0
    3686:	69 f7       	brne	.-38     	; 0x3662 <CLCD_VoidSendCommand+0xc6>
    3688:	14 c0       	rjmp	.+40     	; 0x36b2 <CLCD_VoidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368a:	6f 81       	ldd	r22, Y+7	; 0x07
    368c:	78 85       	ldd	r23, Y+8	; 0x08
    368e:	89 85       	ldd	r24, Y+9	; 0x09
    3690:	9a 85       	ldd	r25, Y+10	; 0x0a
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	9e 83       	std	Y+6, r25	; 0x06
    369c:	8d 83       	std	Y+5, r24	; 0x05
    369e:	8d 81       	ldd	r24, Y+5	; 0x05
    36a0:	9e 81       	ldd	r25, Y+6	; 0x06
    36a2:	9a 83       	std	Y+2, r25	; 0x02
    36a4:	89 83       	std	Y+1, r24	; 0x01
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	9a 81       	ldd	r25, Y+2	; 0x02
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <CLCD_VoidSendCommand+0x10e>
    36ae:	9a 83       	std	Y+2, r25	; 0x02
    36b0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_LOW);
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	61 e0       	ldi	r22, 0x01	; 1
    36b6:	40 e0       	ldi	r20, 0x00	; 0
    36b8:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    // 4- send enable pulse
    voidSendEnablePulse();
    #endif


}
    36bc:	2f 96       	adiw	r28, 0x0f	; 15
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <CLCD_VoidSendData>:
void CLCD_VoidSendData(uint8 copy_u8Data){
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    36d6:	2f 97       	sbiw	r28, 0x0f	; 15
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	8f 87       	std	Y+15, r24	; 0x0f
    // 1-set RS pin to low for command
	DIO_u8_SetPinVal(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_PIN_HIGH);
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	41 e0       	ldi	r20, 0x01	; 1
    36ea:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    #if CLCD_u8READ_OPERATION_ENABLE == ENABLED
        DIO_u8_SetPinVal(CLCD_u8CTRL_PORT, CLCD_u8RW_PIN, DIO_PIN_LOW);
    #endif
	#if CLCD_u8CONNECTION_MODE ==  EIGHT_BIT
    // 3- send the data
    DIO_u8_SetPortVal(CLCD_u8DATA_PORT, copy_u8Data);
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    36f2:	0e 94 a8 22 	call	0x4550	; 0x4550 <DIO_u8_SetPortVal>

    // 4- send enable pulse
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_HIGH);
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	61 e0       	ldi	r22, 0x01	; 1
    36fa:	41 e0       	ldi	r20, 0x01	; 1
    36fc:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	a0 e0       	ldi	r26, 0x00	; 0
    3706:	b0 e4       	ldi	r27, 0x40	; 64
    3708:	8b 87       	std	Y+11, r24	; 0x0b
    370a:	9c 87       	std	Y+12, r25	; 0x0c
    370c:	ad 87       	std	Y+13, r26	; 0x0d
    370e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3710:	6b 85       	ldd	r22, Y+11	; 0x0b
    3712:	7c 85       	ldd	r23, Y+12	; 0x0c
    3714:	8d 85       	ldd	r24, Y+13	; 0x0d
    3716:	9e 85       	ldd	r25, Y+14	; 0x0e
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	4a e7       	ldi	r20, 0x7A	; 122
    371e:	55 e4       	ldi	r21, 0x45	; 69
    3720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	8f 83       	std	Y+7, r24	; 0x07
    372a:	98 87       	std	Y+8, r25	; 0x08
    372c:	a9 87       	std	Y+9, r26	; 0x09
    372e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3730:	6f 81       	ldd	r22, Y+7	; 0x07
    3732:	78 85       	ldd	r23, Y+8	; 0x08
    3734:	89 85       	ldd	r24, Y+9	; 0x09
    3736:	9a 85       	ldd	r25, Y+10	; 0x0a
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	40 e8       	ldi	r20, 0x80	; 128
    373e:	5f e3       	ldi	r21, 0x3F	; 63
    3740:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3744:	88 23       	and	r24, r24
    3746:	2c f4       	brge	.+10     	; 0x3752 <CLCD_VoidSendData+0x84>
		__ticks = 1;
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	9e 83       	std	Y+6, r25	; 0x06
    374e:	8d 83       	std	Y+5, r24	; 0x05
    3750:	3f c0       	rjmp	.+126    	; 0x37d0 <CLCD_VoidSendData+0x102>
	else if (__tmp > 65535)
    3752:	6f 81       	ldd	r22, Y+7	; 0x07
    3754:	78 85       	ldd	r23, Y+8	; 0x08
    3756:	89 85       	ldd	r24, Y+9	; 0x09
    3758:	9a 85       	ldd	r25, Y+10	; 0x0a
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	3f ef       	ldi	r19, 0xFF	; 255
    375e:	4f e7       	ldi	r20, 0x7F	; 127
    3760:	57 e4       	ldi	r21, 0x47	; 71
    3762:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3766:	18 16       	cp	r1, r24
    3768:	4c f5       	brge	.+82     	; 0x37bc <CLCD_VoidSendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    376a:	6b 85       	ldd	r22, Y+11	; 0x0b
    376c:	7c 85       	ldd	r23, Y+12	; 0x0c
    376e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3770:	9e 85       	ldd	r25, Y+14	; 0x0e
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	40 e2       	ldi	r20, 0x20	; 32
    3778:	51 e4       	ldi	r21, 0x41	; 65
    377a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	bc 01       	movw	r22, r24
    3784:	cd 01       	movw	r24, r26
    3786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
    3792:	0f c0       	rjmp	.+30     	; 0x37b2 <CLCD_VoidSendData+0xe4>
    3794:	80 e9       	ldi	r24, 0x90	; 144
    3796:	91 e0       	ldi	r25, 0x01	; 1
    3798:	9c 83       	std	Y+4, r25	; 0x04
    379a:	8b 83       	std	Y+3, r24	; 0x03
    379c:	8b 81       	ldd	r24, Y+3	; 0x03
    379e:	9c 81       	ldd	r25, Y+4	; 0x04
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	f1 f7       	brne	.-4      	; 0x37a0 <CLCD_VoidSendData+0xd2>
    37a4:	9c 83       	std	Y+4, r25	; 0x04
    37a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a8:	8d 81       	ldd	r24, Y+5	; 0x05
    37aa:	9e 81       	ldd	r25, Y+6	; 0x06
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	9e 83       	std	Y+6, r25	; 0x06
    37b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b2:	8d 81       	ldd	r24, Y+5	; 0x05
    37b4:	9e 81       	ldd	r25, Y+6	; 0x06
    37b6:	00 97       	sbiw	r24, 0x00	; 0
    37b8:	69 f7       	brne	.-38     	; 0x3794 <CLCD_VoidSendData+0xc6>
    37ba:	14 c0       	rjmp	.+40     	; 0x37e4 <CLCD_VoidSendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37bc:	6f 81       	ldd	r22, Y+7	; 0x07
    37be:	78 85       	ldd	r23, Y+8	; 0x08
    37c0:	89 85       	ldd	r24, Y+9	; 0x09
    37c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	9e 83       	std	Y+6, r25	; 0x06
    37ce:	8d 83       	std	Y+5, r24	; 0x05
    37d0:	8d 81       	ldd	r24, Y+5	; 0x05
    37d2:	9e 81       	ldd	r25, Y+6	; 0x06
    37d4:	9a 83       	std	Y+2, r25	; 0x02
    37d6:	89 83       	std	Y+1, r24	; 0x01
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	9a 81       	ldd	r25, Y+2	; 0x02
    37dc:	01 97       	sbiw	r24, 0x01	; 1
    37de:	f1 f7       	brne	.-4      	; 0x37dc <CLCD_VoidSendData+0x10e>
    37e0:	9a 83       	std	Y+2, r25	; 0x02
    37e2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_LOW);
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	61 e0       	ldi	r22, 0x01	; 1
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    voidSetHalfDataPort(copy_u8Data);
    // 4- send enable pulse
    voidSendEnablePulse();
    #endif

}
    37ee:	2f 96       	adiw	r28, 0x0f	; 15
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	cf 91       	pop	r28
    37fc:	df 91       	pop	r29
    37fe:	08 95       	ret

00003800 <CLCD_VoidInit>:
void CLCD_VoidInit(void){
    3800:	df 93       	push	r29
    3802:	cf 93       	push	r28
    3804:	cd b7       	in	r28, 0x3d	; 61
    3806:	de b7       	in	r29, 0x3e	; 62
    3808:	2e 97       	sbiw	r28, 0x0e	; 14
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	f8 94       	cli
    380e:	de bf       	out	0x3e, r29	; 62
    3810:	0f be       	out	0x3f, r0	; 63
    3812:	cd bf       	out	0x3d, r28	; 61
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	a0 e2       	ldi	r26, 0x20	; 32
    381a:	b2 e4       	ldi	r27, 0x42	; 66
    381c:	8b 87       	std	Y+11, r24	; 0x0b
    381e:	9c 87       	std	Y+12, r25	; 0x0c
    3820:	ad 87       	std	Y+13, r26	; 0x0d
    3822:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3824:	6b 85       	ldd	r22, Y+11	; 0x0b
    3826:	7c 85       	ldd	r23, Y+12	; 0x0c
    3828:	8d 85       	ldd	r24, Y+13	; 0x0d
    382a:	9e 85       	ldd	r25, Y+14	; 0x0e
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	4a e7       	ldi	r20, 0x7A	; 122
    3832:	55 e4       	ldi	r21, 0x45	; 69
    3834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	8f 83       	std	Y+7, r24	; 0x07
    383e:	98 87       	std	Y+8, r25	; 0x08
    3840:	a9 87       	std	Y+9, r26	; 0x09
    3842:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3844:	6f 81       	ldd	r22, Y+7	; 0x07
    3846:	78 85       	ldd	r23, Y+8	; 0x08
    3848:	89 85       	ldd	r24, Y+9	; 0x09
    384a:	9a 85       	ldd	r25, Y+10	; 0x0a
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e8       	ldi	r20, 0x80	; 128
    3852:	5f e3       	ldi	r21, 0x3F	; 63
    3854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3858:	88 23       	and	r24, r24
    385a:	2c f4       	brge	.+10     	; 0x3866 <CLCD_VoidInit+0x66>
		__ticks = 1;
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	9e 83       	std	Y+6, r25	; 0x06
    3862:	8d 83       	std	Y+5, r24	; 0x05
    3864:	3f c0       	rjmp	.+126    	; 0x38e4 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    3866:	6f 81       	ldd	r22, Y+7	; 0x07
    3868:	78 85       	ldd	r23, Y+8	; 0x08
    386a:	89 85       	ldd	r24, Y+9	; 0x09
    386c:	9a 85       	ldd	r25, Y+10	; 0x0a
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	3f ef       	ldi	r19, 0xFF	; 255
    3872:	4f e7       	ldi	r20, 0x7F	; 127
    3874:	57 e4       	ldi	r21, 0x47	; 71
    3876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    387a:	18 16       	cp	r1, r24
    387c:	4c f5       	brge	.+82     	; 0x38d0 <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    387e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3880:	7c 85       	ldd	r23, Y+12	; 0x0c
    3882:	8d 85       	ldd	r24, Y+13	; 0x0d
    3884:	9e 85       	ldd	r25, Y+14	; 0x0e
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	40 e2       	ldi	r20, 0x20	; 32
    388c:	51 e4       	ldi	r21, 0x41	; 65
    388e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3892:	dc 01       	movw	r26, r24
    3894:	cb 01       	movw	r24, r22
    3896:	bc 01       	movw	r22, r24
    3898:	cd 01       	movw	r24, r26
    389a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	9e 83       	std	Y+6, r25	; 0x06
    38a4:	8d 83       	std	Y+5, r24	; 0x05
    38a6:	0f c0       	rjmp	.+30     	; 0x38c6 <CLCD_VoidInit+0xc6>
    38a8:	80 e9       	ldi	r24, 0x90	; 144
    38aa:	91 e0       	ldi	r25, 0x01	; 1
    38ac:	9c 83       	std	Y+4, r25	; 0x04
    38ae:	8b 83       	std	Y+3, r24	; 0x03
    38b0:	8b 81       	ldd	r24, Y+3	; 0x03
    38b2:	9c 81       	ldd	r25, Y+4	; 0x04
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	f1 f7       	brne	.-4      	; 0x38b4 <CLCD_VoidInit+0xb4>
    38b8:	9c 83       	std	Y+4, r25	; 0x04
    38ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38bc:	8d 81       	ldd	r24, Y+5	; 0x05
    38be:	9e 81       	ldd	r25, Y+6	; 0x06
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	9e 83       	std	Y+6, r25	; 0x06
    38c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c6:	8d 81       	ldd	r24, Y+5	; 0x05
    38c8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ca:	00 97       	sbiw	r24, 0x00	; 0
    38cc:	69 f7       	brne	.-38     	; 0x38a8 <CLCD_VoidInit+0xa8>
    38ce:	14 c0       	rjmp	.+40     	; 0x38f8 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d0:	6f 81       	ldd	r22, Y+7	; 0x07
    38d2:	78 85       	ldd	r23, Y+8	; 0x08
    38d4:	89 85       	ldd	r24, Y+9	; 0x09
    38d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	9e 83       	std	Y+6, r25	; 0x06
    38e2:	8d 83       	std	Y+5, r24	; 0x05
    38e4:	8d 81       	ldd	r24, Y+5	; 0x05
    38e6:	9e 81       	ldd	r25, Y+6	; 0x06
    38e8:	9a 83       	std	Y+2, r25	; 0x02
    38ea:	89 83       	std	Y+1, r24	; 0x01
    38ec:	89 81       	ldd	r24, Y+1	; 0x01
    38ee:	9a 81       	ldd	r25, Y+2	; 0x02
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	f1 f7       	brne	.-4      	; 0x38f0 <CLCD_VoidInit+0xf0>
    38f4:	9a 83       	std	Y+2, r25	; 0x02
    38f6:	89 83       	std	Y+1, r24	; 0x01

    // 1- wait for more than 30ms after power on
    _delay_ms(40);
    //2- function set command :2 lines, font size 5*7
    #if CLCD_u8CONNECTION_MODE ==  EIGHT_BIT
    CLCD_VoidSendCommand(0b00111000);
    38f8:	88 e3       	ldi	r24, 0x38	; 56
    38fa:	0e 94 ce 1a 	call	0x359c	; 0x359c <CLCD_VoidSendCommand>
    CLCD_VoidSendCommand(0X22);
    voidSetHalfDataPort(0b1000);
    voidSendEnablePulse();
    #endif
    //3- Display on/off control: display on ,cursor off, blink cursor off
    CLCD_VoidSendCommand(0b00001100);
    38fe:	8c e0       	ldi	r24, 0x0C	; 12
    3900:	0e 94 ce 1a 	call	0x359c	; 0x359c <CLCD_VoidSendCommand>
    //4- Display clear
    CLCD_VoidSendCommand(1);
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	0e 94 ce 1a 	call	0x359c	; 0x359c <CLCD_VoidSendCommand>
}
    390a:	2e 96       	adiw	r28, 0x0e	; 14
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	cd bf       	out	0x3d, r28	; 61
    3916:	cf 91       	pop	r28
    3918:	df 91       	pop	r29
    391a:	08 95       	ret

0000391c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 copy_u8xPos,uint8 copy_Ypos){
    391c:	df 93       	push	r29
    391e:	cf 93       	push	r28
    3920:	00 d0       	rcall	.+0      	; 0x3922 <CLCD_voidGoToXY+0x6>
    3922:	0f 92       	push	r0
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	8a 83       	std	Y+2, r24	; 0x02
    392a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRamAdd =(copy_Ypos *0x40u)+ copy_u8xPos;
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	88 2f       	mov	r24, r24
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	00 24       	eor	r0, r0
    3934:	96 95       	lsr	r25
    3936:	87 95       	ror	r24
    3938:	07 94       	ror	r0
    393a:	96 95       	lsr	r25
    393c:	87 95       	ror	r24
    393e:	07 94       	ror	r0
    3940:	98 2f       	mov	r25, r24
    3942:	80 2d       	mov	r24, r0
    3944:	98 2f       	mov	r25, r24
    3946:	8a 81       	ldd	r24, Y+2	; 0x02
    3948:	89 0f       	add	r24, r25
    394a:	89 83       	std	Y+1, r24	; 0x01

	CLCD_VoidSendCommand(SET_BIT(Local_u8DDRamAdd,7u));
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	80 68       	ori	r24, 0x80	; 128
    3950:	89 83       	std	Y+1, r24	; 0x01
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	0e 94 ce 1a 	call	0x359c	; 0x359c <CLCD_VoidSendCommand>
}
    3958:	0f 90       	pop	r0
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	cf 91       	pop	r28
    3960:	df 91       	pop	r29
    3962:	08 95       	ret

00003964 <CLCD_u8WriteSpecialChar>:

uint8 CLCD_u8WriteSpecialChar(uint8 copy_u8PatternNumber,uint8* copy_pu8PatternArr){
    3964:	df 93       	push	r29
    3966:	cf 93       	push	r28
    3968:	00 d0       	rcall	.+0      	; 0x396a <CLCD_u8WriteSpecialChar+0x6>
    396a:	00 d0       	rcall	.+0      	; 0x396c <CLCD_u8WriteSpecialChar+0x8>
    396c:	00 d0       	rcall	.+0      	; 0x396e <CLCD_u8WriteSpecialChar+0xa>
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	8c 83       	std	Y+4, r24	; 0x04
    3974:	7e 83       	std	Y+6, r23	; 0x06
    3976:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_u8ErrorState = OK;
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8Counter=0;
    397c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8CGRamAdd =copy_u8PatternNumber*8u;
    397e:	8c 81       	ldd	r24, Y+4	; 0x04
    3980:	88 2f       	mov	r24, r24
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	88 0f       	add	r24, r24
    3986:	99 1f       	adc	r25, r25
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8PatternArr != NULL){
    3992:	8d 81       	ldd	r24, Y+5	; 0x05
    3994:	9e 81       	ldd	r25, Y+6	; 0x06
    3996:	00 97       	sbiw	r24, 0x00	; 0
    3998:	c9 f0       	breq	.+50     	; 0x39cc <CLCD_u8WriteSpecialChar+0x68>
		CLCD_VoidSendCommand(SET_BIT(Local_u8CGRamAdd,6u));
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	80 64       	ori	r24, 0x40	; 64
    399e:	89 83       	std	Y+1, r24	; 0x01
    39a0:	89 81       	ldd	r24, Y+1	; 0x01
    39a2:	0e 94 ce 1a 	call	0x359c	; 0x359c <CLCD_VoidSendCommand>
    39a6:	0e c0       	rjmp	.+28     	; 0x39c4 <CLCD_u8WriteSpecialChar+0x60>
		while(Local_u8Counter<8){
			CLCD_VoidSendData(copy_pu8PatternArr[Local_u8Counter]);
    39a8:	8a 81       	ldd	r24, Y+2	; 0x02
    39aa:	28 2f       	mov	r18, r24
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	8d 81       	ldd	r24, Y+5	; 0x05
    39b0:	9e 81       	ldd	r25, Y+6	; 0x06
    39b2:	fc 01       	movw	r30, r24
    39b4:	e2 0f       	add	r30, r18
    39b6:	f3 1f       	adc	r31, r19
    39b8:	80 81       	ld	r24, Z
    39ba:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
			Local_u8Counter++;
    39be:	8a 81       	ldd	r24, Y+2	; 0x02
    39c0:	8f 5f       	subi	r24, 0xFF	; 255
    39c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
	uint8 Local_u8Counter=0;
	uint8 Local_u8CGRamAdd =copy_u8PatternNumber*8u;
	if(copy_pu8PatternArr != NULL){
		CLCD_VoidSendCommand(SET_BIT(Local_u8CGRamAdd,6u));
		while(Local_u8Counter<8){
    39c4:	8a 81       	ldd	r24, Y+2	; 0x02
    39c6:	88 30       	cpi	r24, 0x08	; 8
    39c8:	78 f3       	brcs	.-34     	; 0x39a8 <CLCD_u8WriteSpecialChar+0x44>
    39ca:	02 c0       	rjmp	.+4      	; 0x39d0 <CLCD_u8WriteSpecialChar+0x6c>
			CLCD_VoidSendData(copy_pu8PatternArr[Local_u8Counter]);
			Local_u8Counter++;
		}
//		CLCD_voidGoToXY()
	}else{
		Local_u8ErrorState = NOK;
    39cc:	82 e0       	ldi	r24, 0x02	; 2
    39ce:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    39d2:	26 96       	adiw	r28, 0x06	; 6
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	cf 91       	pop	r28
    39e0:	df 91       	pop	r29
    39e2:	08 95       	ret

000039e4 <CLCD_VoidPrintChars>:


void CLCD_VoidPrintChars(const uint8 copy_u8charArray[]){
    39e4:	df 93       	push	r29
    39e6:	cf 93       	push	r28
    39e8:	00 d0       	rcall	.+0      	; 0x39ea <CLCD_VoidPrintChars+0x6>
    39ea:	0f 92       	push	r0
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	9b 83       	std	Y+3, r25	; 0x03
    39f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8strCounter=0u;
    39f4:	19 82       	std	Y+1, r1	; 0x01
    39f6:	0e c0       	rjmp	.+28     	; 0x3a14 <CLCD_VoidPrintChars+0x30>
	while(copy_u8charArray[Local_u8strCounter] != '\0'){
		CLCD_VoidSendData(copy_u8charArray[Local_u8strCounter]);
    39f8:	89 81       	ldd	r24, Y+1	; 0x01
    39fa:	28 2f       	mov	r18, r24
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3a00:	9b 81       	ldd	r25, Y+3	; 0x03
    3a02:	fc 01       	movw	r30, r24
    3a04:	e2 0f       	add	r30, r18
    3a06:	f3 1f       	adc	r31, r19
    3a08:	80 81       	ld	r24, Z
    3a0a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
		Local_u8strCounter++;
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	8f 5f       	subi	r24, 0xFF	; 255
    3a12:	89 83       	std	Y+1, r24	; 0x01
}


void CLCD_VoidPrintChars(const uint8 copy_u8charArray[]){
	uint8 Local_u8strCounter=0u;
	while(copy_u8charArray[Local_u8strCounter] != '\0'){
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	28 2f       	mov	r18, r24
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1e:	fc 01       	movw	r30, r24
    3a20:	e2 0f       	add	r30, r18
    3a22:	f3 1f       	adc	r31, r19
    3a24:	80 81       	ld	r24, Z
    3a26:	88 23       	and	r24, r24
    3a28:	39 f7       	brne	.-50     	; 0x39f8 <CLCD_VoidPrintChars+0x14>
		CLCD_VoidSendData(copy_u8charArray[Local_u8strCounter]);
		Local_u8strCounter++;
	}
}
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	cf 91       	pop	r28
    3a32:	df 91       	pop	r29
    3a34:	08 95       	ret

00003a36 <CLCD_VoidPrintInt>:


void CLCD_VoidPrintInt(sint32 copy_s32number){
    3a36:	df 93       	push	r29
    3a38:	cf 93       	push	r28
    3a3a:	cd b7       	in	r28, 0x3d	; 61
    3a3c:	de b7       	in	r29, 0x3e	; 62
    3a3e:	64 97       	sbiw	r28, 0x14	; 20
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	de bf       	out	0x3e, r29	; 62
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	cd bf       	out	0x3d, r28	; 61
    3a4a:	69 8b       	std	Y+17, r22	; 0x11
    3a4c:	7a 8b       	std	Y+18, r23	; 0x12
    3a4e:	8b 8b       	std	Y+19, r24	; 0x13
    3a50:	9c 8b       	std	Y+20, r25	; 0x14
    uint8 Local_u8Buffer[16];
    _helper_VoidNumToStr(copy_s32number,Local_u8Buffer);
    3a52:	89 89       	ldd	r24, Y+17	; 0x11
    3a54:	9a 89       	ldd	r25, Y+18	; 0x12
    3a56:	ab 89       	ldd	r26, Y+19	; 0x13
    3a58:	bc 89       	ldd	r27, Y+20	; 0x14
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	9e 01       	movw	r18, r28
    3a60:	2f 5f       	subi	r18, 0xFF	; 255
    3a62:	3f 4f       	sbci	r19, 0xFF	; 255
    3a64:	a9 01       	movw	r20, r18
    3a66:	0e 94 19 1a 	call	0x3432	; 0x3432 <_helper_VoidNumToStr>
    CLCD_VoidPrintChars(Local_u8Buffer);
    3a6a:	ce 01       	movw	r24, r28
    3a6c:	01 96       	adiw	r24, 0x01	; 1
    3a6e:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <CLCD_VoidPrintChars>

}
    3a72:	64 96       	adiw	r28, 0x14	; 20
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <CLCD_VoidPrintFloat>:

void CLCD_VoidPrintFloat(sint32 copy_s32IntegerPart,uint32 copy_s32FloatingPart){
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
    3a8c:	68 97       	sbiw	r28, 0x18	; 24
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	f8 94       	cli
    3a92:	de bf       	out	0x3e, r29	; 62
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	cd bf       	out	0x3d, r28	; 61
    3a98:	69 8b       	std	Y+17, r22	; 0x11
    3a9a:	7a 8b       	std	Y+18, r23	; 0x12
    3a9c:	8b 8b       	std	Y+19, r24	; 0x13
    3a9e:	9c 8b       	std	Y+20, r25	; 0x14
    3aa0:	2d 8b       	std	Y+21, r18	; 0x15
    3aa2:	3e 8b       	std	Y+22, r19	; 0x16
    3aa4:	4f 8b       	std	Y+23, r20	; 0x17
    3aa6:	58 8f       	std	Y+24, r21	; 0x18
    uint8 Local_u8Buffer[16];
    _helper_VoidNumToStr(copy_s32IntegerPart,Local_u8Buffer);
    3aa8:	89 89       	ldd	r24, Y+17	; 0x11
    3aaa:	9a 89       	ldd	r25, Y+18	; 0x12
    3aac:	ab 89       	ldd	r26, Y+19	; 0x13
    3aae:	bc 89       	ldd	r27, Y+20	; 0x14
    3ab0:	bc 01       	movw	r22, r24
    3ab2:	cd 01       	movw	r24, r26
    3ab4:	9e 01       	movw	r18, r28
    3ab6:	2f 5f       	subi	r18, 0xFF	; 255
    3ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aba:	a9 01       	movw	r20, r18
    3abc:	0e 94 19 1a 	call	0x3432	; 0x3432 <_helper_VoidNumToStr>
    CLCD_VoidPrintChars(Local_u8Buffer);
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	01 96       	adiw	r24, 0x01	; 1
    3ac4:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <CLCD_VoidPrintChars>
    CLCD_VoidSendData('.');
    3ac8:	8e e2       	ldi	r24, 0x2E	; 46
    3aca:	0e 94 67 1b 	call	0x36ce	; 0x36ce <CLCD_VoidSendData>
    _helper_VoidNumToStr(copy_s32FloatingPart,Local_u8Buffer);
    3ace:	8d 89       	ldd	r24, Y+21	; 0x15
    3ad0:	9e 89       	ldd	r25, Y+22	; 0x16
    3ad2:	af 89       	ldd	r26, Y+23	; 0x17
    3ad4:	b8 8d       	ldd	r27, Y+24	; 0x18
    3ad6:	bc 01       	movw	r22, r24
    3ad8:	cd 01       	movw	r24, r26
    3ada:	9e 01       	movw	r18, r28
    3adc:	2f 5f       	subi	r18, 0xFF	; 255
    3ade:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae0:	a9 01       	movw	r20, r18
    3ae2:	0e 94 19 1a 	call	0x3432	; 0x3432 <_helper_VoidNumToStr>
    CLCD_VoidPrintChars(Local_u8Buffer);
    3ae6:	ce 01       	movw	r24, r28
    3ae8:	01 96       	adiw	r24, 0x01	; 1
    3aea:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <CLCD_VoidPrintChars>
}
    3aee:	68 96       	adiw	r28, 0x18	; 24
    3af0:	0f b6       	in	r0, 0x3f	; 63
    3af2:	f8 94       	cli
    3af4:	de bf       	out	0x3e, r29	; 62
    3af6:	0f be       	out	0x3f, r0	; 63
    3af8:	cd bf       	out	0x3d, r28	; 61
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	08 95       	ret

00003b00 <GIE_voidEnableGlobal>:
#include "../../libraries/BIT_MATH.h"
#include "../../libraries/ErrType.h"
#include "../../libraries/STD_TYPES_H.h"
#include "../4-GIE/GIE_interface.h"
#include "../4-GIE/GIE_reg.h"
void GIE_voidEnableGlobal(){
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    // SET_BIT(SREG,SREG_I);
    __asm volatile ("SEI");
    3b08:	78 94       	sei
}
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <GIE_voidDisabledGlobal>:
void GIE_voidDisabledGlobal(){
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    // cls_BIT(SREG,SREG_I);
    __asm volatile ("CLI");
    3b18:	f8 94       	cli
}
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	08 95       	ret

00003b20 <EXTI_u8SetCallBack>:



static void (*EXTI_PFunctionPtr[3])(void) = {NULL,NULL,NULL};

uint8 EXTI_u8SetCallBack(EXTI_IntNum_t copy_IntNum,void(*copy_pvFuncPtr)(void)){
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	00 d0       	rcall	.+0      	; 0x3b26 <EXTI_u8SetCallBack+0x6>
    3b26:	00 d0       	rcall	.+0      	; 0x3b28 <EXTI_u8SetCallBack+0x8>
    3b28:	cd b7       	in	r28, 0x3d	; 61
    3b2a:	de b7       	in	r29, 0x3e	; 62
    3b2c:	8a 83       	std	Y+2, r24	; 0x02
    3b2e:	7c 83       	std	Y+4, r23	; 0x04
    3b30:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pvFuncPtr != NULL){
    3b36:	8b 81       	ldd	r24, Y+3	; 0x03
    3b38:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3a:	00 97       	sbiw	r24, 0x00	; 0
    3b3c:	99 f0       	breq	.+38     	; 0x3b64 <EXTI_u8SetCallBack+0x44>
		if((copy_IntNum>=INT0) &&(copy_IntNum<=INT2)){
    3b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b40:	83 30       	cpi	r24, 0x03	; 3
    3b42:	68 f4       	brcc	.+26     	; 0x3b5e <EXTI_u8SetCallBack+0x3e>
			EXTI_PFunctionPtr[copy_IntNum]= copy_pvFuncPtr;
    3b44:	8a 81       	ldd	r24, Y+2	; 0x02
    3b46:	88 2f       	mov	r24, r24
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	88 0f       	add	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	fc 01       	movw	r30, r24
    3b50:	ec 53       	subi	r30, 0x3C	; 60
    3b52:	fe 4f       	sbci	r31, 0xFE	; 254
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	9c 81       	ldd	r25, Y+4	; 0x04
    3b58:	91 83       	std	Z+1, r25	; 0x01
    3b5a:	80 83       	st	Z, r24
    3b5c:	05 c0       	rjmp	.+10     	; 0x3b68 <EXTI_u8SetCallBack+0x48>

			}else{
			Local_u8ErrorState = NOK;
    3b5e:	82 e0       	ldi	r24, 0x02	; 2
    3b60:	89 83       	std	Y+1, r24	; 0x01
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <EXTI_u8SetCallBack+0x48>
		}
	}
	else{
		Local_u8ErrorState = NULL_PTR;
    3b64:	83 e0       	ldi	r24, 0x03	; 3
    3b66:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	cf 91       	pop	r28
    3b74:	df 91       	pop	r29
    3b76:	08 95       	ret

00003b78 <__vector_1>:
/*INT0 ISR*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    3b78:	1f 92       	push	r1
    3b7a:	0f 92       	push	r0
    3b7c:	0f b6       	in	r0, 0x3f	; 63
    3b7e:	0f 92       	push	r0
    3b80:	11 24       	eor	r1, r1
    3b82:	2f 93       	push	r18
    3b84:	3f 93       	push	r19
    3b86:	4f 93       	push	r20
    3b88:	5f 93       	push	r21
    3b8a:	6f 93       	push	r22
    3b8c:	7f 93       	push	r23
    3b8e:	8f 93       	push	r24
    3b90:	9f 93       	push	r25
    3b92:	af 93       	push	r26
    3b94:	bf 93       	push	r27
    3b96:	ef 93       	push	r30
    3b98:	ff 93       	push	r31
    3b9a:	df 93       	push	r29
    3b9c:	cf 93       	push	r28
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PFunctionPtr[INT0] != NULL){
    3ba2:	80 91 c4 01 	lds	r24, 0x01C4
    3ba6:	90 91 c5 01 	lds	r25, 0x01C5
    3baa:	00 97       	sbiw	r24, 0x00	; 0
    3bac:	29 f0       	breq	.+10     	; 0x3bb8 <__vector_1+0x40>
		EXTI_PFunctionPtr[INT0]();
    3bae:	e0 91 c4 01 	lds	r30, 0x01C4
    3bb2:	f0 91 c5 01 	lds	r31, 0x01C5
    3bb6:	09 95       	icall
		}else{
		/*do nothing*/
	}
}
    3bb8:	cf 91       	pop	r28
    3bba:	df 91       	pop	r29
    3bbc:	ff 91       	pop	r31
    3bbe:	ef 91       	pop	r30
    3bc0:	bf 91       	pop	r27
    3bc2:	af 91       	pop	r26
    3bc4:	9f 91       	pop	r25
    3bc6:	8f 91       	pop	r24
    3bc8:	7f 91       	pop	r23
    3bca:	6f 91       	pop	r22
    3bcc:	5f 91       	pop	r21
    3bce:	4f 91       	pop	r20
    3bd0:	3f 91       	pop	r19
    3bd2:	2f 91       	pop	r18
    3bd4:	0f 90       	pop	r0
    3bd6:	0f be       	out	0x3f, r0	; 63
    3bd8:	0f 90       	pop	r0
    3bda:	1f 90       	pop	r1
    3bdc:	18 95       	reti

00003bde <__vector_2>:

/*INT1 ISR*/
void __vector_2(void) __attribute__((signal));
void __vector_2(void){
    3bde:	1f 92       	push	r1
    3be0:	0f 92       	push	r0
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	0f 92       	push	r0
    3be6:	11 24       	eor	r1, r1
    3be8:	2f 93       	push	r18
    3bea:	3f 93       	push	r19
    3bec:	4f 93       	push	r20
    3bee:	5f 93       	push	r21
    3bf0:	6f 93       	push	r22
    3bf2:	7f 93       	push	r23
    3bf4:	8f 93       	push	r24
    3bf6:	9f 93       	push	r25
    3bf8:	af 93       	push	r26
    3bfa:	bf 93       	push	r27
    3bfc:	ef 93       	push	r30
    3bfe:	ff 93       	push	r31
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PFunctionPtr[INT1] != NULL){
    3c08:	80 91 c6 01 	lds	r24, 0x01C6
    3c0c:	90 91 c7 01 	lds	r25, 0x01C7
    3c10:	00 97       	sbiw	r24, 0x00	; 0
    3c12:	29 f0       	breq	.+10     	; 0x3c1e <__vector_2+0x40>
		EXTI_PFunctionPtr[INT1]();
    3c14:	e0 91 c6 01 	lds	r30, 0x01C6
    3c18:	f0 91 c7 01 	lds	r31, 0x01C7
    3c1c:	09 95       	icall
		}else{
		/*do nothing*/
	}
}
    3c1e:	cf 91       	pop	r28
    3c20:	df 91       	pop	r29
    3c22:	ff 91       	pop	r31
    3c24:	ef 91       	pop	r30
    3c26:	bf 91       	pop	r27
    3c28:	af 91       	pop	r26
    3c2a:	9f 91       	pop	r25
    3c2c:	8f 91       	pop	r24
    3c2e:	7f 91       	pop	r23
    3c30:	6f 91       	pop	r22
    3c32:	5f 91       	pop	r21
    3c34:	4f 91       	pop	r20
    3c36:	3f 91       	pop	r19
    3c38:	2f 91       	pop	r18
    3c3a:	0f 90       	pop	r0
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	0f 90       	pop	r0
    3c40:	1f 90       	pop	r1
    3c42:	18 95       	reti

00003c44 <__vector_3>:

/*INT2 ISR*/
void __vector_3(void) __attribute__((signal));
void __vector_3(void){
    3c44:	1f 92       	push	r1
    3c46:	0f 92       	push	r0
    3c48:	0f b6       	in	r0, 0x3f	; 63
    3c4a:	0f 92       	push	r0
    3c4c:	11 24       	eor	r1, r1
    3c4e:	2f 93       	push	r18
    3c50:	3f 93       	push	r19
    3c52:	4f 93       	push	r20
    3c54:	5f 93       	push	r21
    3c56:	6f 93       	push	r22
    3c58:	7f 93       	push	r23
    3c5a:	8f 93       	push	r24
    3c5c:	9f 93       	push	r25
    3c5e:	af 93       	push	r26
    3c60:	bf 93       	push	r27
    3c62:	ef 93       	push	r30
    3c64:	ff 93       	push	r31
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PFunctionPtr[INT2] != NULL){
    3c6e:	80 91 c8 01 	lds	r24, 0x01C8
    3c72:	90 91 c9 01 	lds	r25, 0x01C9
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	29 f0       	breq	.+10     	; 0x3c84 <__vector_3+0x40>
		EXTI_PFunctionPtr[INT2]();
    3c7a:	e0 91 c8 01 	lds	r30, 0x01C8
    3c7e:	f0 91 c9 01 	lds	r31, 0x01C9
    3c82:	09 95       	icall
		}else{
		/*do nothing*/
	}
}
    3c84:	cf 91       	pop	r28
    3c86:	df 91       	pop	r29
    3c88:	ff 91       	pop	r31
    3c8a:	ef 91       	pop	r30
    3c8c:	bf 91       	pop	r27
    3c8e:	af 91       	pop	r26
    3c90:	9f 91       	pop	r25
    3c92:	8f 91       	pop	r24
    3c94:	7f 91       	pop	r23
    3c96:	6f 91       	pop	r22
    3c98:	5f 91       	pop	r21
    3c9a:	4f 91       	pop	r20
    3c9c:	3f 91       	pop	r19
    3c9e:	2f 91       	pop	r18
    3ca0:	0f 90       	pop	r0
    3ca2:	0f be       	out	0x3f, r0	; 63
    3ca4:	0f 90       	pop	r0
    3ca6:	1f 90       	pop	r1
    3ca8:	18 95       	reti

00003caa <EXTI_voidInit>:


void EXTI_voidInit(void)
{
    3caa:	df 93       	push	r29
    3cac:	cf 93       	push	r28
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
	CLS_BIT(MCUCR, MCUCR_IS01);
	#elif EXTI_u8INT0_TRGSRC == FALLING_EDGE
	CLS_BIT(MCUCR, MCUCR_IS00);
	SET_BIT(MCUCR, MCUCR_IS01);
	#elif EXTI_u8INT0_TRGSRC == RISING_EDGE
	SET_BIT(MCUCR, MCUCR_IS00);
    3cb2:	a5 e5       	ldi	r26, 0x55	; 85
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	e5 e5       	ldi	r30, 0x55	; 85
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	80 81       	ld	r24, Z
    3cbc:	81 60       	ori	r24, 0x01	; 1
    3cbe:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_IS01);
    3cc0:	a5 e5       	ldi	r26, 0x55	; 85
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	e5 e5       	ldi	r30, 0x55	; 85
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	80 81       	ld	r24, Z
    3cca:	82 60       	ori	r24, 0x02	; 2
    3ccc:	8c 93       	st	X, r24
	CLS_BIT(MCUCR, MCUCR_IS11);
	#elif EXTI_u8INT1_TRGSRC == FALLING_EDGE
	CLS_BIT(MCUCR, MCUCR_IS10);
	SET_BIT(MCUCR, MCUCR_IS11);
	#elif EXTI_u8INT1_TRGSRC == RISING_EDGE
	SET_BIT(MCUCR, MCUCR_IS10);
    3cce:	a5 e5       	ldi	r26, 0x55	; 85
    3cd0:	b0 e0       	ldi	r27, 0x00	; 0
    3cd2:	e5 e5       	ldi	r30, 0x55	; 85
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	80 81       	ld	r24, Z
    3cd8:	84 60       	ori	r24, 0x04	; 4
    3cda:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_IS11);
    3cdc:	a5 e5       	ldi	r26, 0x55	; 85
    3cde:	b0 e0       	ldi	r27, 0x00	; 0
    3ce0:	e5 e5       	ldi	r30, 0x55	; 85
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	88 60       	ori	r24, 0x08	; 8
    3ce8:	8c 93       	st	X, r24
	#else
	#error "Wrong EXTI_u8INT1_TRIG_SRG configuration option"
	#endif

	#if EXTI_u8INT2_TRGSRC == FALLING_EDGE
	CLS_BIT(MCUCSR, MCUCR_ISC2);
    3cea:	a4 e5       	ldi	r26, 0x54	; 84
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	e4 e5       	ldi	r30, 0x54	; 84
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	8f 7b       	andi	r24, 0xBF	; 191
    3cf6:	8c 93       	st	X, r24
	#endif

	#if EXTI_u8INT0_INIT_STATE == DISABLED
	CLS_BIT(GICR, GICR_INT0);
	#elif EXTI_u8INT0_INIT_STATE == ENABLED
	SET_BIT(GICR, GICR_INT0);
    3cf8:	ab e5       	ldi	r26, 0x5B	; 91
    3cfa:	b0 e0       	ldi	r27, 0x00	; 0
    3cfc:	eb e5       	ldi	r30, 0x5B	; 91
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	80 81       	ld	r24, Z
    3d02:	80 64       	ori	r24, 0x40	; 64
    3d04:	8c 93       	st	X, r24
	#endif

	#if EXTI_u8INT1_INIT_STATE == DISABLED
	CLS_BIT(GICR, GICR_INT1);
	#elif EXTI_u8INT1_INIT_STATE == ENABLED
	SET_BIT(GICR, GICR_INT1);
    3d06:	ab e5       	ldi	r26, 0x5B	; 91
    3d08:	b0 e0       	ldi	r27, 0x00	; 0
    3d0a:	eb e5       	ldi	r30, 0x5B	; 91
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 81       	ld	r24, Z
    3d10:	80 68       	ori	r24, 0x80	; 128
    3d12:	8c 93       	st	X, r24
	#endif

	#if EXTI_u8INT2_INIT_STATE == DISABLED
	CLS_BIT(GICR, GICR_INT2);
	#elif EXTI_u8INT2_INIT_STATE == ENABLED
	SET_BIT(GICR, GICR_INT2);
    3d14:	ab e5       	ldi	r26, 0x5B	; 91
    3d16:	b0 e0       	ldi	r27, 0x00	; 0
    3d18:	eb e5       	ldi	r30, 0x5B	; 91
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	80 81       	ld	r24, Z
    3d1e:	80 62       	ori	r24, 0x20	; 32
    3d20:	8c 93       	st	X, r24
	#else
	#error "Wrong EXTI_u8INT0_INIT_STATE configuration option"
	#endif
}
    3d22:	cf 91       	pop	r28
    3d24:	df 91       	pop	r29
    3d26:	08 95       	ret

00003d28 <EXTI_u8SetSenceCtrl>:
uint8 EXTI_u8SetSenceCtrl(EXTI_IntNum_t copy_IntNum, uint8 copy_SenseCtrl)
{
    3d28:	df 93       	push	r29
    3d2a:	cf 93       	push	r28
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	29 97       	sbiw	r28, 0x09	; 9
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	f8 94       	cli
    3d36:	de bf       	out	0x3e, r29	; 62
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	cd bf       	out	0x3d, r28	; 61
    3d3c:	8a 83       	std	Y+2, r24	; 0x02
    3d3e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Error_state = OK;
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	89 83       	std	Y+1, r24	; 0x01
	if (copy_IntNum == INT0){
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	88 23       	and	r24, r24
    3d48:	09 f0       	breq	.+2      	; 0x3d4c <EXTI_u8SetSenceCtrl+0x24>
    3d4a:	5f c0       	rjmp	.+190    	; 0x3e0a <EXTI_u8SetSenceCtrl+0xe2>
		switch (copy_SenseCtrl){
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	28 2f       	mov	r18, r24
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	39 87       	std	Y+9, r19	; 0x09
    3d54:	28 87       	std	Y+8, r18	; 0x08
    3d56:	88 85       	ldd	r24, Y+8	; 0x08
    3d58:	99 85       	ldd	r25, Y+9	; 0x09
    3d5a:	82 30       	cpi	r24, 0x02	; 2
    3d5c:	91 05       	cpc	r25, r1
    3d5e:	29 f1       	breq	.+74     	; 0x3daa <EXTI_u8SetSenceCtrl+0x82>
    3d60:	28 85       	ldd	r18, Y+8	; 0x08
    3d62:	39 85       	ldd	r19, Y+9	; 0x09
    3d64:	23 30       	cpi	r18, 0x03	; 3
    3d66:	31 05       	cpc	r19, r1
    3d68:	34 f4       	brge	.+12     	; 0x3d76 <EXTI_u8SetSenceCtrl+0x4e>
    3d6a:	88 85       	ldd	r24, Y+8	; 0x08
    3d6c:	99 85       	ldd	r25, Y+9	; 0x09
    3d6e:	81 30       	cpi	r24, 0x01	; 1
    3d70:	91 05       	cpc	r25, r1
    3d72:	61 f0       	breq	.+24     	; 0x3d8c <EXTI_u8SetSenceCtrl+0x64>
    3d74:	47 c0       	rjmp	.+142    	; 0x3e04 <EXTI_u8SetSenceCtrl+0xdc>
    3d76:	28 85       	ldd	r18, Y+8	; 0x08
    3d78:	39 85       	ldd	r19, Y+9	; 0x09
    3d7a:	23 30       	cpi	r18, 0x03	; 3
    3d7c:	31 05       	cpc	r19, r1
    3d7e:	21 f1       	breq	.+72     	; 0x3dc8 <EXTI_u8SetSenceCtrl+0xa0>
    3d80:	88 85       	ldd	r24, Y+8	; 0x08
    3d82:	99 85       	ldd	r25, Y+9	; 0x09
    3d84:	84 30       	cpi	r24, 0x04	; 4
    3d86:	91 05       	cpc	r25, r1
    3d88:	71 f1       	breq	.+92     	; 0x3de6 <EXTI_u8SetSenceCtrl+0xbe>
    3d8a:	3c c0       	rjmp	.+120    	; 0x3e04 <EXTI_u8SetSenceCtrl+0xdc>
			case LOW_LEVEL:CLS_BIT(MCUCR, MCUCR_IS00);CLS_BIT(MCUCR, MCUCR_IS01);break;
    3d8c:	a5 e5       	ldi	r26, 0x55	; 85
    3d8e:	b0 e0       	ldi	r27, 0x00	; 0
    3d90:	e5 e5       	ldi	r30, 0x55	; 85
    3d92:	f0 e0       	ldi	r31, 0x00	; 0
    3d94:	80 81       	ld	r24, Z
    3d96:	8e 7f       	andi	r24, 0xFE	; 254
    3d98:	8c 93       	st	X, r24
    3d9a:	a5 e5       	ldi	r26, 0x55	; 85
    3d9c:	b0 e0       	ldi	r27, 0x00	; 0
    3d9e:	e5 e5       	ldi	r30, 0x55	; 85
    3da0:	f0 e0       	ldi	r31, 0x00	; 0
    3da2:	80 81       	ld	r24, Z
    3da4:	8d 7f       	andi	r24, 0xFD	; 253
    3da6:	8c 93       	st	X, r24
    3da8:	bb c0       	rjmp	.+374    	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			case ON_CHANGE:SET_BIT(MCUCR, MCUCR_IS00);CLS_BIT(MCUCR, MCUCR_IS01);break;
    3daa:	a5 e5       	ldi	r26, 0x55	; 85
    3dac:	b0 e0       	ldi	r27, 0x00	; 0
    3dae:	e5 e5       	ldi	r30, 0x55	; 85
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	80 81       	ld	r24, Z
    3db4:	81 60       	ori	r24, 0x01	; 1
    3db6:	8c 93       	st	X, r24
    3db8:	a5 e5       	ldi	r26, 0x55	; 85
    3dba:	b0 e0       	ldi	r27, 0x00	; 0
    3dbc:	e5 e5       	ldi	r30, 0x55	; 85
    3dbe:	f0 e0       	ldi	r31, 0x00	; 0
    3dc0:	80 81       	ld	r24, Z
    3dc2:	8d 7f       	andi	r24, 0xFD	; 253
    3dc4:	8c 93       	st	X, r24
    3dc6:	ac c0       	rjmp	.+344    	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			case FALLING_EDGE:CLS_BIT(MCUCR, MCUCR_IS00);SET_BIT(MCUCR, MCUCR_IS01);break;
    3dc8:	a5 e5       	ldi	r26, 0x55	; 85
    3dca:	b0 e0       	ldi	r27, 0x00	; 0
    3dcc:	e5 e5       	ldi	r30, 0x55	; 85
    3dce:	f0 e0       	ldi	r31, 0x00	; 0
    3dd0:	80 81       	ld	r24, Z
    3dd2:	8e 7f       	andi	r24, 0xFE	; 254
    3dd4:	8c 93       	st	X, r24
    3dd6:	a5 e5       	ldi	r26, 0x55	; 85
    3dd8:	b0 e0       	ldi	r27, 0x00	; 0
    3dda:	e5 e5       	ldi	r30, 0x55	; 85
    3ddc:	f0 e0       	ldi	r31, 0x00	; 0
    3dde:	80 81       	ld	r24, Z
    3de0:	82 60       	ori	r24, 0x02	; 2
    3de2:	8c 93       	st	X, r24
    3de4:	9d c0       	rjmp	.+314    	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			case RISING_EDGE:SET_BIT(MCUCR, MCUCR_IS00);SET_BIT(MCUCR, MCUCR_IS01);break;
    3de6:	a5 e5       	ldi	r26, 0x55	; 85
    3de8:	b0 e0       	ldi	r27, 0x00	; 0
    3dea:	e5 e5       	ldi	r30, 0x55	; 85
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	80 81       	ld	r24, Z
    3df0:	81 60       	ori	r24, 0x01	; 1
    3df2:	8c 93       	st	X, r24
    3df4:	a5 e5       	ldi	r26, 0x55	; 85
    3df6:	b0 e0       	ldi	r27, 0x00	; 0
    3df8:	e5 e5       	ldi	r30, 0x55	; 85
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	82 60       	ori	r24, 0x02	; 2
    3e00:	8c 93       	st	X, r24
    3e02:	8e c0       	rjmp	.+284    	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			default:Local_u8Error_state = NOK;break;
    3e04:	82 e0       	ldi	r24, 0x02	; 2
    3e06:	89 83       	std	Y+1, r24	; 0x01
    3e08:	8b c0       	rjmp	.+278    	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
		}
	}
	else if (copy_IntNum == INT1){
    3e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0c:	81 30       	cpi	r24, 0x01	; 1
    3e0e:	09 f0       	breq	.+2      	; 0x3e12 <EXTI_u8SetSenceCtrl+0xea>
    3e10:	5f c0       	rjmp	.+190    	; 0x3ed0 <EXTI_u8SetSenceCtrl+0x1a8>
		switch (copy_SenseCtrl){
    3e12:	8b 81       	ldd	r24, Y+3	; 0x03
    3e14:	28 2f       	mov	r18, r24
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	3f 83       	std	Y+7, r19	; 0x07
    3e1a:	2e 83       	std	Y+6, r18	; 0x06
    3e1c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e1e:	9f 81       	ldd	r25, Y+7	; 0x07
    3e20:	82 30       	cpi	r24, 0x02	; 2
    3e22:	91 05       	cpc	r25, r1
    3e24:	29 f1       	breq	.+74     	; 0x3e70 <EXTI_u8SetSenceCtrl+0x148>
    3e26:	2e 81       	ldd	r18, Y+6	; 0x06
    3e28:	3f 81       	ldd	r19, Y+7	; 0x07
    3e2a:	23 30       	cpi	r18, 0x03	; 3
    3e2c:	31 05       	cpc	r19, r1
    3e2e:	34 f4       	brge	.+12     	; 0x3e3c <EXTI_u8SetSenceCtrl+0x114>
    3e30:	8e 81       	ldd	r24, Y+6	; 0x06
    3e32:	9f 81       	ldd	r25, Y+7	; 0x07
    3e34:	81 30       	cpi	r24, 0x01	; 1
    3e36:	91 05       	cpc	r25, r1
    3e38:	61 f0       	breq	.+24     	; 0x3e52 <EXTI_u8SetSenceCtrl+0x12a>
    3e3a:	47 c0       	rjmp	.+142    	; 0x3eca <EXTI_u8SetSenceCtrl+0x1a2>
    3e3c:	2e 81       	ldd	r18, Y+6	; 0x06
    3e3e:	3f 81       	ldd	r19, Y+7	; 0x07
    3e40:	23 30       	cpi	r18, 0x03	; 3
    3e42:	31 05       	cpc	r19, r1
    3e44:	21 f1       	breq	.+72     	; 0x3e8e <EXTI_u8SetSenceCtrl+0x166>
    3e46:	8e 81       	ldd	r24, Y+6	; 0x06
    3e48:	9f 81       	ldd	r25, Y+7	; 0x07
    3e4a:	84 30       	cpi	r24, 0x04	; 4
    3e4c:	91 05       	cpc	r25, r1
    3e4e:	71 f1       	breq	.+92     	; 0x3eac <EXTI_u8SetSenceCtrl+0x184>
    3e50:	3c c0       	rjmp	.+120    	; 0x3eca <EXTI_u8SetSenceCtrl+0x1a2>
			case LOW_LEVEL:CLS_BIT(MCUCR, MCUCR_IS10);CLS_BIT(MCUCR, MCUCR_IS11);break;
    3e52:	a5 e5       	ldi	r26, 0x55	; 85
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	e5 e5       	ldi	r30, 0x55	; 85
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	80 81       	ld	r24, Z
    3e5c:	8b 7f       	andi	r24, 0xFB	; 251
    3e5e:	8c 93       	st	X, r24
    3e60:	a5 e5       	ldi	r26, 0x55	; 85
    3e62:	b0 e0       	ldi	r27, 0x00	; 0
    3e64:	e5 e5       	ldi	r30, 0x55	; 85
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	87 7f       	andi	r24, 0xF7	; 247
    3e6c:	8c 93       	st	X, r24
    3e6e:	58 c0       	rjmp	.+176    	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			case ON_CHANGE:SET_BIT(MCUCR, MCUCR_IS10);CLS_BIT(MCUCR, MCUCR_IS11);break;
    3e70:	a5 e5       	ldi	r26, 0x55	; 85
    3e72:	b0 e0       	ldi	r27, 0x00	; 0
    3e74:	e5 e5       	ldi	r30, 0x55	; 85
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	84 60       	ori	r24, 0x04	; 4
    3e7c:	8c 93       	st	X, r24
    3e7e:	a5 e5       	ldi	r26, 0x55	; 85
    3e80:	b0 e0       	ldi	r27, 0x00	; 0
    3e82:	e5 e5       	ldi	r30, 0x55	; 85
    3e84:	f0 e0       	ldi	r31, 0x00	; 0
    3e86:	80 81       	ld	r24, Z
    3e88:	87 7f       	andi	r24, 0xF7	; 247
    3e8a:	8c 93       	st	X, r24
    3e8c:	49 c0       	rjmp	.+146    	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			case FALLING_EDGE:CLS_BIT(MCUCR, MCUCR_IS10);SET_BIT(MCUCR, MCUCR_IS11);break;
    3e8e:	a5 e5       	ldi	r26, 0x55	; 85
    3e90:	b0 e0       	ldi	r27, 0x00	; 0
    3e92:	e5 e5       	ldi	r30, 0x55	; 85
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	80 81       	ld	r24, Z
    3e98:	8b 7f       	andi	r24, 0xFB	; 251
    3e9a:	8c 93       	st	X, r24
    3e9c:	a5 e5       	ldi	r26, 0x55	; 85
    3e9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ea0:	e5 e5       	ldi	r30, 0x55	; 85
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	80 81       	ld	r24, Z
    3ea6:	88 60       	ori	r24, 0x08	; 8
    3ea8:	8c 93       	st	X, r24
    3eaa:	3a c0       	rjmp	.+116    	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			case RISING_EDGE:SET_BIT(MCUCR, MCUCR_IS10);SET_BIT(MCUCR, MCUCR_IS11);break;
    3eac:	a5 e5       	ldi	r26, 0x55	; 85
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	e5 e5       	ldi	r30, 0x55	; 85
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	80 81       	ld	r24, Z
    3eb6:	84 60       	ori	r24, 0x04	; 4
    3eb8:	8c 93       	st	X, r24
    3eba:	a5 e5       	ldi	r26, 0x55	; 85
    3ebc:	b0 e0       	ldi	r27, 0x00	; 0
    3ebe:	e5 e5       	ldi	r30, 0x55	; 85
    3ec0:	f0 e0       	ldi	r31, 0x00	; 0
    3ec2:	80 81       	ld	r24, Z
    3ec4:	88 60       	ori	r24, 0x08	; 8
    3ec6:	8c 93       	st	X, r24
    3ec8:	2b c0       	rjmp	.+86     	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			default:Local_u8Error_state = NOK;break;
    3eca:	82 e0       	ldi	r24, 0x02	; 2
    3ecc:	89 83       	std	Y+1, r24	; 0x01
    3ece:	28 c0       	rjmp	.+80     	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
		}
	}
	else if (copy_IntNum == INT2){
    3ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed2:	82 30       	cpi	r24, 0x02	; 2
    3ed4:	19 f5       	brne	.+70     	; 0x3f1c <EXTI_u8SetSenceCtrl+0x1f4>
		switch (copy_SenseCtrl){
    3ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed8:	28 2f       	mov	r18, r24
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	3d 83       	std	Y+5, r19	; 0x05
    3ede:	2c 83       	std	Y+4, r18	; 0x04
    3ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ee4:	83 30       	cpi	r24, 0x03	; 3
    3ee6:	91 05       	cpc	r25, r1
    3ee8:	31 f0       	breq	.+12     	; 0x3ef6 <EXTI_u8SetSenceCtrl+0x1ce>
    3eea:	2c 81       	ldd	r18, Y+4	; 0x04
    3eec:	3d 81       	ldd	r19, Y+5	; 0x05
    3eee:	24 30       	cpi	r18, 0x04	; 4
    3ef0:	31 05       	cpc	r19, r1
    3ef2:	49 f0       	breq	.+18     	; 0x3f06 <EXTI_u8SetSenceCtrl+0x1de>
    3ef4:	10 c0       	rjmp	.+32     	; 0x3f16 <EXTI_u8SetSenceCtrl+0x1ee>
			case FALLING_EDGE:CLS_BIT(MCUCSR, MCUCR_ISC2);break;
    3ef6:	a4 e5       	ldi	r26, 0x54	; 84
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	e4 e5       	ldi	r30, 0x54	; 84
    3efc:	f0 e0       	ldi	r31, 0x00	; 0
    3efe:	80 81       	ld	r24, Z
    3f00:	8f 7b       	andi	r24, 0xBF	; 191
    3f02:	8c 93       	st	X, r24
    3f04:	0d c0       	rjmp	.+26     	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			case RISING_EDGE:SET_BIT(MCUCSR, MCUCR_ISC2);break;
    3f06:	a4 e5       	ldi	r26, 0x54	; 84
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
    3f0a:	e4 e5       	ldi	r30, 0x54	; 84
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	80 81       	ld	r24, Z
    3f10:	80 64       	ori	r24, 0x40	; 64
    3f12:	8c 93       	st	X, r24
    3f14:	05 c0       	rjmp	.+10     	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
			default:Local_u8Error_state = NOK;break;
    3f16:	82 e0       	ldi	r24, 0x02	; 2
    3f18:	89 83       	std	Y+1, r24	; 0x01
    3f1a:	02 c0       	rjmp	.+4      	; 0x3f20 <EXTI_u8SetSenceCtrl+0x1f8>
		}
	}
	else
	Local_u8Error_state = NOK;
    3f1c:	82 e0       	ldi	r24, 0x02	; 2
    3f1e:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8Error_state;
    3f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f22:	29 96       	adiw	r28, 0x09	; 9
    3f24:	0f b6       	in	r0, 0x3f	; 63
    3f26:	f8 94       	cli
    3f28:	de bf       	out	0x3e, r29	; 62
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	cd bf       	out	0x3d, r28	; 61
    3f2e:	cf 91       	pop	r28
    3f30:	df 91       	pop	r29
    3f32:	08 95       	ret

00003f34 <EXTI_u8IntEnable>:

uint8 EXTI_u8IntEnable(EXTI_IntNum_t copy_IntNum){
    3f34:	df 93       	push	r29
    3f36:	cf 93       	push	r28
    3f38:	00 d0       	rcall	.+0      	; 0x3f3a <EXTI_u8IntEnable+0x6>
    3f3a:	00 d0       	rcall	.+0      	; 0x3f3c <EXTI_u8IntEnable+0x8>
    3f3c:	cd b7       	in	r28, 0x3d	; 61
    3f3e:	de b7       	in	r29, 0x3e	; 62
    3f40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Error_state = OK;
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_IntNum){
    3f46:	8a 81       	ldd	r24, Y+2	; 0x02
    3f48:	28 2f       	mov	r18, r24
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	3c 83       	std	Y+4, r19	; 0x04
    3f4e:	2b 83       	std	Y+3, r18	; 0x03
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	9c 81       	ldd	r25, Y+4	; 0x04
    3f54:	81 30       	cpi	r24, 0x01	; 1
    3f56:	91 05       	cpc	r25, r1
    3f58:	89 f0       	breq	.+34     	; 0x3f7c <EXTI_u8IntEnable+0x48>
    3f5a:	2b 81       	ldd	r18, Y+3	; 0x03
    3f5c:	3c 81       	ldd	r19, Y+4	; 0x04
    3f5e:	22 30       	cpi	r18, 0x02	; 2
    3f60:	31 05       	cpc	r19, r1
    3f62:	a1 f0       	breq	.+40     	; 0x3f8c <EXTI_u8IntEnable+0x58>
    3f64:	8b 81       	ldd	r24, Y+3	; 0x03
    3f66:	9c 81       	ldd	r25, Y+4	; 0x04
    3f68:	00 97       	sbiw	r24, 0x00	; 0
    3f6a:	c1 f4       	brne	.+48     	; 0x3f9c <EXTI_u8IntEnable+0x68>
		case INT0:SET_BIT(GICR,GICR_INT0);break;
    3f6c:	ab e5       	ldi	r26, 0x5B	; 91
    3f6e:	b0 e0       	ldi	r27, 0x00	; 0
    3f70:	eb e5       	ldi	r30, 0x5B	; 91
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	80 81       	ld	r24, Z
    3f76:	80 64       	ori	r24, 0x40	; 64
    3f78:	8c 93       	st	X, r24
    3f7a:	12 c0       	rjmp	.+36     	; 0x3fa0 <EXTI_u8IntEnable+0x6c>
		case INT1:SET_BIT(GICR,GICR_INT1);break;
    3f7c:	ab e5       	ldi	r26, 0x5B	; 91
    3f7e:	b0 e0       	ldi	r27, 0x00	; 0
    3f80:	eb e5       	ldi	r30, 0x5B	; 91
    3f82:	f0 e0       	ldi	r31, 0x00	; 0
    3f84:	80 81       	ld	r24, Z
    3f86:	80 68       	ori	r24, 0x80	; 128
    3f88:	8c 93       	st	X, r24
    3f8a:	0a c0       	rjmp	.+20     	; 0x3fa0 <EXTI_u8IntEnable+0x6c>
		case INT2:SET_BIT(GICR,GICR_INT2);break;
    3f8c:	ab e5       	ldi	r26, 0x5B	; 91
    3f8e:	b0 e0       	ldi	r27, 0x00	; 0
    3f90:	eb e5       	ldi	r30, 0x5B	; 91
    3f92:	f0 e0       	ldi	r31, 0x00	; 0
    3f94:	80 81       	ld	r24, Z
    3f96:	80 62       	ori	r24, 0x20	; 32
    3f98:	8c 93       	st	X, r24
    3f9a:	02 c0       	rjmp	.+4      	; 0x3fa0 <EXTI_u8IntEnable+0x6c>
		default:Local_u8Error_state = NOK;break;
    3f9c:	82 e0       	ldi	r24, 0x02	; 2
    3f9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_state;
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fa2:	0f 90       	pop	r0
    3fa4:	0f 90       	pop	r0
    3fa6:	0f 90       	pop	r0
    3fa8:	0f 90       	pop	r0
    3faa:	cf 91       	pop	r28
    3fac:	df 91       	pop	r29
    3fae:	08 95       	ret

00003fb0 <EXTI_u8IntDisable>:
uint8 EXTI_u8IntDisable(EXTI_IntNum_t copy_IntNum){
    3fb0:	df 93       	push	r29
    3fb2:	cf 93       	push	r28
    3fb4:	00 d0       	rcall	.+0      	; 0x3fb6 <EXTI_u8IntDisable+0x6>
    3fb6:	00 d0       	rcall	.+0      	; 0x3fb8 <EXTI_u8IntDisable+0x8>
    3fb8:	cd b7       	in	r28, 0x3d	; 61
    3fba:	de b7       	in	r29, 0x3e	; 62
    3fbc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Error_state = OK;
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_IntNum){
    3fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc4:	28 2f       	mov	r18, r24
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	3c 83       	std	Y+4, r19	; 0x04
    3fca:	2b 83       	std	Y+3, r18	; 0x03
    3fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fce:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd0:	81 30       	cpi	r24, 0x01	; 1
    3fd2:	91 05       	cpc	r25, r1
    3fd4:	89 f0       	breq	.+34     	; 0x3ff8 <EXTI_u8IntDisable+0x48>
    3fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    3fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    3fda:	22 30       	cpi	r18, 0x02	; 2
    3fdc:	31 05       	cpc	r19, r1
    3fde:	a1 f0       	breq	.+40     	; 0x4008 <EXTI_u8IntDisable+0x58>
    3fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe4:	00 97       	sbiw	r24, 0x00	; 0
    3fe6:	c1 f4       	brne	.+48     	; 0x4018 <EXTI_u8IntDisable+0x68>
		case INT0:CLS_BIT(GICR,GICR_INT0);break;
    3fe8:	ab e5       	ldi	r26, 0x5B	; 91
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	eb e5       	ldi	r30, 0x5B	; 91
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	8f 7b       	andi	r24, 0xBF	; 191
    3ff4:	8c 93       	st	X, r24
    3ff6:	12 c0       	rjmp	.+36     	; 0x401c <EXTI_u8IntDisable+0x6c>
		case INT1:CLS_BIT(GICR,GICR_INT1);break;
    3ff8:	ab e5       	ldi	r26, 0x5B	; 91
    3ffa:	b0 e0       	ldi	r27, 0x00	; 0
    3ffc:	eb e5       	ldi	r30, 0x5B	; 91
    3ffe:	f0 e0       	ldi	r31, 0x00	; 0
    4000:	80 81       	ld	r24, Z
    4002:	8f 77       	andi	r24, 0x7F	; 127
    4004:	8c 93       	st	X, r24
    4006:	0a c0       	rjmp	.+20     	; 0x401c <EXTI_u8IntDisable+0x6c>
		case INT2:CLS_BIT(GICR,GICR_INT2);break;
    4008:	ab e5       	ldi	r26, 0x5B	; 91
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	eb e5       	ldi	r30, 0x5B	; 91
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	80 81       	ld	r24, Z
    4012:	8f 7d       	andi	r24, 0xDF	; 223
    4014:	8c 93       	st	X, r24
    4016:	02 c0       	rjmp	.+4      	; 0x401c <EXTI_u8IntDisable+0x6c>
		default:Local_u8Error_state = NOK;break;
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_state;
    401c:	89 81       	ldd	r24, Y+1	; 0x01
}
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	cf 91       	pop	r28
    4028:	df 91       	pop	r29
    402a:	08 95       	ret

0000402c <Port_voidInit>:
#include "PORT_cfg.h"
#include "PORT_prv.h"
// #include "../DIO_interface.h"


void Port_voidInit(){
    402c:	df 93       	push	r29
    402e:	cf 93       	push	r28
    4030:	cd b7       	in	r28, 0x3d	; 61
    4032:	de b7       	in	r29, 0x3e	; 62

    DDRA = PORTA_DIR;
    4034:	ea e3       	ldi	r30, 0x3A	; 58
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	8f ef       	ldi	r24, 0xFF	; 255
    403a:	80 83       	st	Z, r24
    DDRB = PORTB_DIR;
    403c:	e7 e3       	ldi	r30, 0x37	; 55
    403e:	f0 e0       	ldi	r31, 0x00	; 0
    4040:	83 e0       	ldi	r24, 0x03	; 3
    4042:	80 83       	st	Z, r24
    DDRC = PORTC_DIR;
    4044:	e4 e3       	ldi	r30, 0x34	; 52
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	80 83       	st	Z, r24
    DDRD = PORTD_DIR;
    404c:	e1 e3       	ldi	r30, 0x31	; 49
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	10 82       	st	Z, r1

    PORTA = PORTA_INITVAL;
    4052:	eb e3       	ldi	r30, 0x3B	; 59
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	10 82       	st	Z, r1
    PORTB = PORTB_INITVAL;
    4058:	e8 e3       	ldi	r30, 0x38	; 56
    405a:	f0 e0       	ldi	r31, 0x00	; 0
    405c:	84 e0       	ldi	r24, 0x04	; 4
    405e:	80 83       	st	Z, r24
    PORTC = PORTC_INITVAL;
    4060:	e5 e3       	ldi	r30, 0x35	; 53
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	10 82       	st	Z, r1
    PORTD = PORTD_INITVAL;
    4066:	e2 e3       	ldi	r30, 0x32	; 50
    4068:	f0 e0       	ldi	r31, 0x00	; 0
    406a:	10 82       	st	Z, r1
}
    406c:	cf 91       	pop	r28
    406e:	df 91       	pop	r29
    4070:	08 95       	ret

00004072 <DIO_u8_SetPinDir>:





uint8 DIO_u8_SetPinDir(DIO_port_t copy_port, DIO_pin_t copy_pinNum, DIO_pinDir_t copy_pinDir){
    4072:	df 93       	push	r29
    4074:	cf 93       	push	r28
    4076:	cd b7       	in	r28, 0x3d	; 61
    4078:	de b7       	in	r29, 0x3e	; 62
    407a:	28 97       	sbiw	r28, 0x08	; 8
    407c:	0f b6       	in	r0, 0x3f	; 63
    407e:	f8 94       	cli
    4080:	de bf       	out	0x3e, r29	; 62
    4082:	0f be       	out	0x3f, r0	; 63
    4084:	cd bf       	out	0x3d, r28	; 61
    4086:	8a 83       	std	Y+2, r24	; 0x02
    4088:	6b 83       	std	Y+3, r22	; 0x03
    408a:	4c 83       	std	Y+4, r20	; 0x04
    uint8 Local_u8ErrorState = OK;
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	89 83       	std	Y+1, r24	; 0x01
    if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    4090:	8b 81       	ldd	r24, Y+3	; 0x03
    4092:	88 30       	cpi	r24, 0x08	; 8
    4094:	08 f0       	brcs	.+2      	; 0x4098 <DIO_u8_SetPinDir+0x26>
    4096:	f4 c0       	rjmp	.+488    	; 0x4280 <DIO_u8_SetPinDir+0x20e>

        if(copy_pinDir == DIO_PIN_INPUT){
    4098:	8c 81       	ldd	r24, Y+4	; 0x04
    409a:	88 23       	and	r24, r24
    409c:	09 f0       	breq	.+2      	; 0x40a0 <DIO_u8_SetPinDir+0x2e>
    409e:	77 c0       	rjmp	.+238    	; 0x418e <DIO_u8_SetPinDir+0x11c>
            switch (copy_port)
    40a0:	8a 81       	ldd	r24, Y+2	; 0x02
    40a2:	28 2f       	mov	r18, r24
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	38 87       	std	Y+8, r19	; 0x08
    40a8:	2f 83       	std	Y+7, r18	; 0x07
    40aa:	8f 81       	ldd	r24, Y+7	; 0x07
    40ac:	98 85       	ldd	r25, Y+8	; 0x08
    40ae:	81 30       	cpi	r24, 0x01	; 1
    40b0:	91 05       	cpc	r25, r1
    40b2:	59 f1       	breq	.+86     	; 0x410a <DIO_u8_SetPinDir+0x98>
    40b4:	2f 81       	ldd	r18, Y+7	; 0x07
    40b6:	38 85       	ldd	r19, Y+8	; 0x08
    40b8:	22 30       	cpi	r18, 0x02	; 2
    40ba:	31 05       	cpc	r19, r1
    40bc:	2c f4       	brge	.+10     	; 0x40c8 <DIO_u8_SetPinDir+0x56>
    40be:	8f 81       	ldd	r24, Y+7	; 0x07
    40c0:	98 85       	ldd	r25, Y+8	; 0x08
    40c2:	00 97       	sbiw	r24, 0x00	; 0
    40c4:	69 f0       	breq	.+26     	; 0x40e0 <DIO_u8_SetPinDir+0x6e>
    40c6:	60 c0       	rjmp	.+192    	; 0x4188 <DIO_u8_SetPinDir+0x116>
    40c8:	2f 81       	ldd	r18, Y+7	; 0x07
    40ca:	38 85       	ldd	r19, Y+8	; 0x08
    40cc:	22 30       	cpi	r18, 0x02	; 2
    40ce:	31 05       	cpc	r19, r1
    40d0:	89 f1       	breq	.+98     	; 0x4134 <DIO_u8_SetPinDir+0xc2>
    40d2:	8f 81       	ldd	r24, Y+7	; 0x07
    40d4:	98 85       	ldd	r25, Y+8	; 0x08
    40d6:	83 30       	cpi	r24, 0x03	; 3
    40d8:	91 05       	cpc	r25, r1
    40da:	09 f4       	brne	.+2      	; 0x40de <DIO_u8_SetPinDir+0x6c>
    40dc:	40 c0       	rjmp	.+128    	; 0x415e <DIO_u8_SetPinDir+0xec>
    40de:	54 c0       	rjmp	.+168    	; 0x4188 <DIO_u8_SetPinDir+0x116>
            {
            case DIO_PORTA : CLS_BIT(DDRA,copy_pinNum); break;
    40e0:	aa e3       	ldi	r26, 0x3A	; 58
    40e2:	b0 e0       	ldi	r27, 0x00	; 0
    40e4:	ea e3       	ldi	r30, 0x3A	; 58
    40e6:	f0 e0       	ldi	r31, 0x00	; 0
    40e8:	80 81       	ld	r24, Z
    40ea:	48 2f       	mov	r20, r24
    40ec:	8b 81       	ldd	r24, Y+3	; 0x03
    40ee:	28 2f       	mov	r18, r24
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	02 2e       	mov	r0, r18
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <DIO_u8_SetPinDir+0x8c>
    40fa:	88 0f       	add	r24, r24
    40fc:	99 1f       	adc	r25, r25
    40fe:	0a 94       	dec	r0
    4100:	e2 f7       	brpl	.-8      	; 0x40fa <DIO_u8_SetPinDir+0x88>
    4102:	80 95       	com	r24
    4104:	84 23       	and	r24, r20
    4106:	8c 93       	st	X, r24
    4108:	bd c0       	rjmp	.+378    	; 0x4284 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTB : CLS_BIT(DDRB,copy_pinNum); break;
    410a:	a7 e3       	ldi	r26, 0x37	; 55
    410c:	b0 e0       	ldi	r27, 0x00	; 0
    410e:	e7 e3       	ldi	r30, 0x37	; 55
    4110:	f0 e0       	ldi	r31, 0x00	; 0
    4112:	80 81       	ld	r24, Z
    4114:	48 2f       	mov	r20, r24
    4116:	8b 81       	ldd	r24, Y+3	; 0x03
    4118:	28 2f       	mov	r18, r24
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	02 2e       	mov	r0, r18
    4122:	02 c0       	rjmp	.+4      	; 0x4128 <DIO_u8_SetPinDir+0xb6>
    4124:	88 0f       	add	r24, r24
    4126:	99 1f       	adc	r25, r25
    4128:	0a 94       	dec	r0
    412a:	e2 f7       	brpl	.-8      	; 0x4124 <DIO_u8_SetPinDir+0xb2>
    412c:	80 95       	com	r24
    412e:	84 23       	and	r24, r20
    4130:	8c 93       	st	X, r24
    4132:	a8 c0       	rjmp	.+336    	; 0x4284 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTC : CLS_BIT(DDRC,copy_pinNum); break;
    4134:	a4 e3       	ldi	r26, 0x34	; 52
    4136:	b0 e0       	ldi	r27, 0x00	; 0
    4138:	e4 e3       	ldi	r30, 0x34	; 52
    413a:	f0 e0       	ldi	r31, 0x00	; 0
    413c:	80 81       	ld	r24, Z
    413e:	48 2f       	mov	r20, r24
    4140:	8b 81       	ldd	r24, Y+3	; 0x03
    4142:	28 2f       	mov	r18, r24
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	02 2e       	mov	r0, r18
    414c:	02 c0       	rjmp	.+4      	; 0x4152 <DIO_u8_SetPinDir+0xe0>
    414e:	88 0f       	add	r24, r24
    4150:	99 1f       	adc	r25, r25
    4152:	0a 94       	dec	r0
    4154:	e2 f7       	brpl	.-8      	; 0x414e <DIO_u8_SetPinDir+0xdc>
    4156:	80 95       	com	r24
    4158:	84 23       	and	r24, r20
    415a:	8c 93       	st	X, r24
    415c:	93 c0       	rjmp	.+294    	; 0x4284 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTD : CLS_BIT(DDRD,copy_pinNum); break;
    415e:	a1 e3       	ldi	r26, 0x31	; 49
    4160:	b0 e0       	ldi	r27, 0x00	; 0
    4162:	e1 e3       	ldi	r30, 0x31	; 49
    4164:	f0 e0       	ldi	r31, 0x00	; 0
    4166:	80 81       	ld	r24, Z
    4168:	48 2f       	mov	r20, r24
    416a:	8b 81       	ldd	r24, Y+3	; 0x03
    416c:	28 2f       	mov	r18, r24
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	02 2e       	mov	r0, r18
    4176:	02 c0       	rjmp	.+4      	; 0x417c <DIO_u8_SetPinDir+0x10a>
    4178:	88 0f       	add	r24, r24
    417a:	99 1f       	adc	r25, r25
    417c:	0a 94       	dec	r0
    417e:	e2 f7       	brpl	.-8      	; 0x4178 <DIO_u8_SetPinDir+0x106>
    4180:	80 95       	com	r24
    4182:	84 23       	and	r24, r20
    4184:	8c 93       	st	X, r24
    4186:	7e c0       	rjmp	.+252    	; 0x4284 <DIO_u8_SetPinDir+0x212>
            
            default: Local_u8ErrorState = NOK;  break;
    4188:	82 e0       	ldi	r24, 0x02	; 2
    418a:	89 83       	std	Y+1, r24	; 0x01
    418c:	7b c0       	rjmp	.+246    	; 0x4284 <DIO_u8_SetPinDir+0x212>
            }
        }   
        else if(copy_pinDir == DIO_PIN_OUTPUT){
    418e:	8c 81       	ldd	r24, Y+4	; 0x04
    4190:	81 30       	cpi	r24, 0x01	; 1
    4192:	09 f0       	breq	.+2      	; 0x4196 <DIO_u8_SetPinDir+0x124>
    4194:	72 c0       	rjmp	.+228    	; 0x427a <DIO_u8_SetPinDir+0x208>
             switch (copy_port)
    4196:	8a 81       	ldd	r24, Y+2	; 0x02
    4198:	28 2f       	mov	r18, r24
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	3e 83       	std	Y+6, r19	; 0x06
    419e:	2d 83       	std	Y+5, r18	; 0x05
    41a0:	8d 81       	ldd	r24, Y+5	; 0x05
    41a2:	9e 81       	ldd	r25, Y+6	; 0x06
    41a4:	81 30       	cpi	r24, 0x01	; 1
    41a6:	91 05       	cpc	r25, r1
    41a8:	49 f1       	breq	.+82     	; 0x41fc <DIO_u8_SetPinDir+0x18a>
    41aa:	2d 81       	ldd	r18, Y+5	; 0x05
    41ac:	3e 81       	ldd	r19, Y+6	; 0x06
    41ae:	22 30       	cpi	r18, 0x02	; 2
    41b0:	31 05       	cpc	r19, r1
    41b2:	2c f4       	brge	.+10     	; 0x41be <DIO_u8_SetPinDir+0x14c>
    41b4:	8d 81       	ldd	r24, Y+5	; 0x05
    41b6:	9e 81       	ldd	r25, Y+6	; 0x06
    41b8:	00 97       	sbiw	r24, 0x00	; 0
    41ba:	61 f0       	breq	.+24     	; 0x41d4 <DIO_u8_SetPinDir+0x162>
    41bc:	5b c0       	rjmp	.+182    	; 0x4274 <DIO_u8_SetPinDir+0x202>
    41be:	2d 81       	ldd	r18, Y+5	; 0x05
    41c0:	3e 81       	ldd	r19, Y+6	; 0x06
    41c2:	22 30       	cpi	r18, 0x02	; 2
    41c4:	31 05       	cpc	r19, r1
    41c6:	71 f1       	breq	.+92     	; 0x4224 <DIO_u8_SetPinDir+0x1b2>
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	9e 81       	ldd	r25, Y+6	; 0x06
    41cc:	83 30       	cpi	r24, 0x03	; 3
    41ce:	91 05       	cpc	r25, r1
    41d0:	e9 f1       	breq	.+122    	; 0x424c <DIO_u8_SetPinDir+0x1da>
    41d2:	50 c0       	rjmp	.+160    	; 0x4274 <DIO_u8_SetPinDir+0x202>
            {
            case DIO_PORTA : SET_BIT(DDRA,copy_pinNum); break;
    41d4:	aa e3       	ldi	r26, 0x3A	; 58
    41d6:	b0 e0       	ldi	r27, 0x00	; 0
    41d8:	ea e3       	ldi	r30, 0x3A	; 58
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	80 81       	ld	r24, Z
    41de:	48 2f       	mov	r20, r24
    41e0:	8b 81       	ldd	r24, Y+3	; 0x03
    41e2:	28 2f       	mov	r18, r24
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	02 2e       	mov	r0, r18
    41ec:	02 c0       	rjmp	.+4      	; 0x41f2 <DIO_u8_SetPinDir+0x180>
    41ee:	88 0f       	add	r24, r24
    41f0:	99 1f       	adc	r25, r25
    41f2:	0a 94       	dec	r0
    41f4:	e2 f7       	brpl	.-8      	; 0x41ee <DIO_u8_SetPinDir+0x17c>
    41f6:	84 2b       	or	r24, r20
    41f8:	8c 93       	st	X, r24
    41fa:	44 c0       	rjmp	.+136    	; 0x4284 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTB : SET_BIT(DDRB,copy_pinNum); break;
    41fc:	a7 e3       	ldi	r26, 0x37	; 55
    41fe:	b0 e0       	ldi	r27, 0x00	; 0
    4200:	e7 e3       	ldi	r30, 0x37	; 55
    4202:	f0 e0       	ldi	r31, 0x00	; 0
    4204:	80 81       	ld	r24, Z
    4206:	48 2f       	mov	r20, r24
    4208:	8b 81       	ldd	r24, Y+3	; 0x03
    420a:	28 2f       	mov	r18, r24
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	02 2e       	mov	r0, r18
    4214:	02 c0       	rjmp	.+4      	; 0x421a <DIO_u8_SetPinDir+0x1a8>
    4216:	88 0f       	add	r24, r24
    4218:	99 1f       	adc	r25, r25
    421a:	0a 94       	dec	r0
    421c:	e2 f7       	brpl	.-8      	; 0x4216 <DIO_u8_SetPinDir+0x1a4>
    421e:	84 2b       	or	r24, r20
    4220:	8c 93       	st	X, r24
    4222:	30 c0       	rjmp	.+96     	; 0x4284 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTC : SET_BIT(DDRC,copy_pinNum); break;
    4224:	a4 e3       	ldi	r26, 0x34	; 52
    4226:	b0 e0       	ldi	r27, 0x00	; 0
    4228:	e4 e3       	ldi	r30, 0x34	; 52
    422a:	f0 e0       	ldi	r31, 0x00	; 0
    422c:	80 81       	ld	r24, Z
    422e:	48 2f       	mov	r20, r24
    4230:	8b 81       	ldd	r24, Y+3	; 0x03
    4232:	28 2f       	mov	r18, r24
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	02 2e       	mov	r0, r18
    423c:	02 c0       	rjmp	.+4      	; 0x4242 <DIO_u8_SetPinDir+0x1d0>
    423e:	88 0f       	add	r24, r24
    4240:	99 1f       	adc	r25, r25
    4242:	0a 94       	dec	r0
    4244:	e2 f7       	brpl	.-8      	; 0x423e <DIO_u8_SetPinDir+0x1cc>
    4246:	84 2b       	or	r24, r20
    4248:	8c 93       	st	X, r24
    424a:	1c c0       	rjmp	.+56     	; 0x4284 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTD : SET_BIT(DDRD,copy_pinNum); break;
    424c:	a1 e3       	ldi	r26, 0x31	; 49
    424e:	b0 e0       	ldi	r27, 0x00	; 0
    4250:	e1 e3       	ldi	r30, 0x31	; 49
    4252:	f0 e0       	ldi	r31, 0x00	; 0
    4254:	80 81       	ld	r24, Z
    4256:	48 2f       	mov	r20, r24
    4258:	8b 81       	ldd	r24, Y+3	; 0x03
    425a:	28 2f       	mov	r18, r24
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	02 2e       	mov	r0, r18
    4264:	02 c0       	rjmp	.+4      	; 0x426a <DIO_u8_SetPinDir+0x1f8>
    4266:	88 0f       	add	r24, r24
    4268:	99 1f       	adc	r25, r25
    426a:	0a 94       	dec	r0
    426c:	e2 f7       	brpl	.-8      	; 0x4266 <DIO_u8_SetPinDir+0x1f4>
    426e:	84 2b       	or	r24, r20
    4270:	8c 93       	st	X, r24
    4272:	08 c0       	rjmp	.+16     	; 0x4284 <DIO_u8_SetPinDir+0x212>
            
            default: Local_u8ErrorState = NOK;  break;
    4274:	82 e0       	ldi	r24, 0x02	; 2
    4276:	89 83       	std	Y+1, r24	; 0x01
    4278:	05 c0       	rjmp	.+10     	; 0x4284 <DIO_u8_SetPinDir+0x212>
            }
        }else
        Local_u8ErrorState = NOK;
    427a:	82 e0       	ldi	r24, 0x02	; 2
    427c:	89 83       	std	Y+1, r24	; 0x01
    427e:	02 c0       	rjmp	.+4      	; 0x4284 <DIO_u8_SetPinDir+0x212>
    }else 
    Local_u8ErrorState = NOK;
    4280:	82 e0       	ldi	r24, 0x02	; 2
    4282:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    4284:	89 81       	ldd	r24, Y+1	; 0x01

}
    4286:	28 96       	adiw	r28, 0x08	; 8
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
    4292:	cf 91       	pop	r28
    4294:	df 91       	pop	r29
    4296:	08 95       	ret

00004298 <DIO_u8_SetPortDir>:
uint8 DIO_u8_SetPortDir(DIO_port_t copy_port,  uint8 copy_pinDir){
    4298:	df 93       	push	r29
    429a:	cf 93       	push	r28
    429c:	00 d0       	rcall	.+0      	; 0x429e <DIO_u8_SetPortDir+0x6>
    429e:	00 d0       	rcall	.+0      	; 0x42a0 <DIO_u8_SetPortDir+0x8>
    42a0:	0f 92       	push	r0
    42a2:	cd b7       	in	r28, 0x3d	; 61
    42a4:	de b7       	in	r29, 0x3e	; 62
    42a6:	8a 83       	std	Y+2, r24	; 0x02
    42a8:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8ErrorState = OK;
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	89 83       	std	Y+1, r24	; 0x01
        //if(copy_pinDir == DIO_PIN_INPUT){
            switch (copy_port)
    42ae:	8a 81       	ldd	r24, Y+2	; 0x02
    42b0:	28 2f       	mov	r18, r24
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	3d 83       	std	Y+5, r19	; 0x05
    42b6:	2c 83       	std	Y+4, r18	; 0x04
    42b8:	8c 81       	ldd	r24, Y+4	; 0x04
    42ba:	9d 81       	ldd	r25, Y+5	; 0x05
    42bc:	81 30       	cpi	r24, 0x01	; 1
    42be:	91 05       	cpc	r25, r1
    42c0:	d1 f0       	breq	.+52     	; 0x42f6 <DIO_u8_SetPortDir+0x5e>
    42c2:	2c 81       	ldd	r18, Y+4	; 0x04
    42c4:	3d 81       	ldd	r19, Y+5	; 0x05
    42c6:	22 30       	cpi	r18, 0x02	; 2
    42c8:	31 05       	cpc	r19, r1
    42ca:	2c f4       	brge	.+10     	; 0x42d6 <DIO_u8_SetPortDir+0x3e>
    42cc:	8c 81       	ldd	r24, Y+4	; 0x04
    42ce:	9d 81       	ldd	r25, Y+5	; 0x05
    42d0:	00 97       	sbiw	r24, 0x00	; 0
    42d2:	61 f0       	breq	.+24     	; 0x42ec <DIO_u8_SetPortDir+0x54>
    42d4:	1f c0       	rjmp	.+62     	; 0x4314 <DIO_u8_SetPortDir+0x7c>
    42d6:	2c 81       	ldd	r18, Y+4	; 0x04
    42d8:	3d 81       	ldd	r19, Y+5	; 0x05
    42da:	22 30       	cpi	r18, 0x02	; 2
    42dc:	31 05       	cpc	r19, r1
    42de:	81 f0       	breq	.+32     	; 0x4300 <DIO_u8_SetPortDir+0x68>
    42e0:	8c 81       	ldd	r24, Y+4	; 0x04
    42e2:	9d 81       	ldd	r25, Y+5	; 0x05
    42e4:	83 30       	cpi	r24, 0x03	; 3
    42e6:	91 05       	cpc	r25, r1
    42e8:	81 f0       	breq	.+32     	; 0x430a <DIO_u8_SetPortDir+0x72>
    42ea:	14 c0       	rjmp	.+40     	; 0x4314 <DIO_u8_SetPortDir+0x7c>
            {
            case DIO_PORTA :DDRA = copy_pinDir; break;
    42ec:	ea e3       	ldi	r30, 0x3A	; 58
    42ee:	f0 e0       	ldi	r31, 0x00	; 0
    42f0:	8b 81       	ldd	r24, Y+3	; 0x03
    42f2:	80 83       	st	Z, r24
    42f4:	11 c0       	rjmp	.+34     	; 0x4318 <DIO_u8_SetPortDir+0x80>
            case DIO_PORTB :DDRB = copy_pinDir; break;
    42f6:	e7 e3       	ldi	r30, 0x37	; 55
    42f8:	f0 e0       	ldi	r31, 0x00	; 0
    42fa:	8b 81       	ldd	r24, Y+3	; 0x03
    42fc:	80 83       	st	Z, r24
    42fe:	0c c0       	rjmp	.+24     	; 0x4318 <DIO_u8_SetPortDir+0x80>
            case DIO_PORTC :DDRC = copy_pinDir; break;
    4300:	e4 e3       	ldi	r30, 0x34	; 52
    4302:	f0 e0       	ldi	r31, 0x00	; 0
    4304:	8b 81       	ldd	r24, Y+3	; 0x03
    4306:	80 83       	st	Z, r24
    4308:	07 c0       	rjmp	.+14     	; 0x4318 <DIO_u8_SetPortDir+0x80>
            case DIO_PORTD :DDRD = copy_pinDir; break;
    430a:	e1 e3       	ldi	r30, 0x31	; 49
    430c:	f0 e0       	ldi	r31, 0x00	; 0
    430e:	8b 81       	ldd	r24, Y+3	; 0x03
    4310:	80 83       	st	Z, r24
    4312:	02 c0       	rjmp	.+4      	; 0x4318 <DIO_u8_SetPortDir+0x80>
            
            default: Local_u8ErrorState = NOK;  break;
    4314:	82 e0       	ldi	r24, 0x02	; 2
    4316:	89 83       	std	Y+1, r24	; 0x01
            }
        
        
    
    return Local_u8ErrorState;
    4318:	89 81       	ldd	r24, Y+1	; 0x01

}
    431a:	0f 90       	pop	r0
    431c:	0f 90       	pop	r0
    431e:	0f 90       	pop	r0
    4320:	0f 90       	pop	r0
    4322:	0f 90       	pop	r0
    4324:	cf 91       	pop	r28
    4326:	df 91       	pop	r29
    4328:	08 95       	ret

0000432a <DIO_u8_SetPinVal>:

uint8 DIO_u8_SetPinVal(DIO_port_t copy_port, DIO_pin_t copy_pinNum, DIO_pinVal_t copy_pinVal){
    432a:	df 93       	push	r29
    432c:	cf 93       	push	r28
    432e:	cd b7       	in	r28, 0x3d	; 61
    4330:	de b7       	in	r29, 0x3e	; 62
    4332:	28 97       	sbiw	r28, 0x08	; 8
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	8a 83       	std	Y+2, r24	; 0x02
    4340:	6b 83       	std	Y+3, r22	; 0x03
    4342:	4c 83       	std	Y+4, r20	; 0x04
uint8 Local_u8ErrorState = OK;
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	89 83       	std	Y+1, r24	; 0x01
    if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    4348:	8b 81       	ldd	r24, Y+3	; 0x03
    434a:	88 30       	cpi	r24, 0x08	; 8
    434c:	08 f0       	brcs	.+2      	; 0x4350 <DIO_u8_SetPinVal+0x26>
    434e:	f4 c0       	rjmp	.+488    	; 0x4538 <DIO_u8_SetPinVal+0x20e>

        if(copy_pinVal == DIO_PIN_LOW){
    4350:	8c 81       	ldd	r24, Y+4	; 0x04
    4352:	88 23       	and	r24, r24
    4354:	09 f0       	breq	.+2      	; 0x4358 <DIO_u8_SetPinVal+0x2e>
    4356:	77 c0       	rjmp	.+238    	; 0x4446 <DIO_u8_SetPinVal+0x11c>
            switch (copy_port)
    4358:	8a 81       	ldd	r24, Y+2	; 0x02
    435a:	28 2f       	mov	r18, r24
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	38 87       	std	Y+8, r19	; 0x08
    4360:	2f 83       	std	Y+7, r18	; 0x07
    4362:	8f 81       	ldd	r24, Y+7	; 0x07
    4364:	98 85       	ldd	r25, Y+8	; 0x08
    4366:	81 30       	cpi	r24, 0x01	; 1
    4368:	91 05       	cpc	r25, r1
    436a:	59 f1       	breq	.+86     	; 0x43c2 <DIO_u8_SetPinVal+0x98>
    436c:	2f 81       	ldd	r18, Y+7	; 0x07
    436e:	38 85       	ldd	r19, Y+8	; 0x08
    4370:	22 30       	cpi	r18, 0x02	; 2
    4372:	31 05       	cpc	r19, r1
    4374:	2c f4       	brge	.+10     	; 0x4380 <DIO_u8_SetPinVal+0x56>
    4376:	8f 81       	ldd	r24, Y+7	; 0x07
    4378:	98 85       	ldd	r25, Y+8	; 0x08
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	69 f0       	breq	.+26     	; 0x4398 <DIO_u8_SetPinVal+0x6e>
    437e:	60 c0       	rjmp	.+192    	; 0x4440 <DIO_u8_SetPinVal+0x116>
    4380:	2f 81       	ldd	r18, Y+7	; 0x07
    4382:	38 85       	ldd	r19, Y+8	; 0x08
    4384:	22 30       	cpi	r18, 0x02	; 2
    4386:	31 05       	cpc	r19, r1
    4388:	89 f1       	breq	.+98     	; 0x43ec <DIO_u8_SetPinVal+0xc2>
    438a:	8f 81       	ldd	r24, Y+7	; 0x07
    438c:	98 85       	ldd	r25, Y+8	; 0x08
    438e:	83 30       	cpi	r24, 0x03	; 3
    4390:	91 05       	cpc	r25, r1
    4392:	09 f4       	brne	.+2      	; 0x4396 <DIO_u8_SetPinVal+0x6c>
    4394:	40 c0       	rjmp	.+128    	; 0x4416 <DIO_u8_SetPinVal+0xec>
    4396:	54 c0       	rjmp	.+168    	; 0x4440 <DIO_u8_SetPinVal+0x116>
            {
            case DIO_PORTA : CLS_BIT(PORTA,copy_pinNum); break;
    4398:	ab e3       	ldi	r26, 0x3B	; 59
    439a:	b0 e0       	ldi	r27, 0x00	; 0
    439c:	eb e3       	ldi	r30, 0x3B	; 59
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	80 81       	ld	r24, Z
    43a2:	48 2f       	mov	r20, r24
    43a4:	8b 81       	ldd	r24, Y+3	; 0x03
    43a6:	28 2f       	mov	r18, r24
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	02 2e       	mov	r0, r18
    43b0:	02 c0       	rjmp	.+4      	; 0x43b6 <DIO_u8_SetPinVal+0x8c>
    43b2:	88 0f       	add	r24, r24
    43b4:	99 1f       	adc	r25, r25
    43b6:	0a 94       	dec	r0
    43b8:	e2 f7       	brpl	.-8      	; 0x43b2 <DIO_u8_SetPinVal+0x88>
    43ba:	80 95       	com	r24
    43bc:	84 23       	and	r24, r20
    43be:	8c 93       	st	X, r24
    43c0:	bd c0       	rjmp	.+378    	; 0x453c <DIO_u8_SetPinVal+0x212>
            case DIO_PORTB : CLS_BIT(PORTB,copy_pinNum); break;
    43c2:	a8 e3       	ldi	r26, 0x38	; 56
    43c4:	b0 e0       	ldi	r27, 0x00	; 0
    43c6:	e8 e3       	ldi	r30, 0x38	; 56
    43c8:	f0 e0       	ldi	r31, 0x00	; 0
    43ca:	80 81       	ld	r24, Z
    43cc:	48 2f       	mov	r20, r24
    43ce:	8b 81       	ldd	r24, Y+3	; 0x03
    43d0:	28 2f       	mov	r18, r24
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	02 2e       	mov	r0, r18
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <DIO_u8_SetPinVal+0xb6>
    43dc:	88 0f       	add	r24, r24
    43de:	99 1f       	adc	r25, r25
    43e0:	0a 94       	dec	r0
    43e2:	e2 f7       	brpl	.-8      	; 0x43dc <DIO_u8_SetPinVal+0xb2>
    43e4:	80 95       	com	r24
    43e6:	84 23       	and	r24, r20
    43e8:	8c 93       	st	X, r24
    43ea:	a8 c0       	rjmp	.+336    	; 0x453c <DIO_u8_SetPinVal+0x212>
            case DIO_PORTC : CLS_BIT(PORTC,copy_pinNum); break;
    43ec:	a5 e3       	ldi	r26, 0x35	; 53
    43ee:	b0 e0       	ldi	r27, 0x00	; 0
    43f0:	e5 e3       	ldi	r30, 0x35	; 53
    43f2:	f0 e0       	ldi	r31, 0x00	; 0
    43f4:	80 81       	ld	r24, Z
    43f6:	48 2f       	mov	r20, r24
    43f8:	8b 81       	ldd	r24, Y+3	; 0x03
    43fa:	28 2f       	mov	r18, r24
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	02 2e       	mov	r0, r18
    4404:	02 c0       	rjmp	.+4      	; 0x440a <DIO_u8_SetPinVal+0xe0>
    4406:	88 0f       	add	r24, r24
    4408:	99 1f       	adc	r25, r25
    440a:	0a 94       	dec	r0
    440c:	e2 f7       	brpl	.-8      	; 0x4406 <DIO_u8_SetPinVal+0xdc>
    440e:	80 95       	com	r24
    4410:	84 23       	and	r24, r20
    4412:	8c 93       	st	X, r24
    4414:	93 c0       	rjmp	.+294    	; 0x453c <DIO_u8_SetPinVal+0x212>
            case DIO_PORTD : CLS_BIT(PORTD,copy_pinNum); break;
    4416:	a2 e3       	ldi	r26, 0x32	; 50
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	e2 e3       	ldi	r30, 0x32	; 50
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	80 81       	ld	r24, Z
    4420:	48 2f       	mov	r20, r24
    4422:	8b 81       	ldd	r24, Y+3	; 0x03
    4424:	28 2f       	mov	r18, r24
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	02 2e       	mov	r0, r18
    442e:	02 c0       	rjmp	.+4      	; 0x4434 <DIO_u8_SetPinVal+0x10a>
    4430:	88 0f       	add	r24, r24
    4432:	99 1f       	adc	r25, r25
    4434:	0a 94       	dec	r0
    4436:	e2 f7       	brpl	.-8      	; 0x4430 <DIO_u8_SetPinVal+0x106>
    4438:	80 95       	com	r24
    443a:	84 23       	and	r24, r20
    443c:	8c 93       	st	X, r24
    443e:	7e c0       	rjmp	.+252    	; 0x453c <DIO_u8_SetPinVal+0x212>
            
            default: Local_u8ErrorState = NOK;  break;
    4440:	82 e0       	ldi	r24, 0x02	; 2
    4442:	89 83       	std	Y+1, r24	; 0x01
    4444:	7b c0       	rjmp	.+246    	; 0x453c <DIO_u8_SetPinVal+0x212>
            }
        }   
        else if(copy_pinVal == DIO_PIN_HIGH){
    4446:	8c 81       	ldd	r24, Y+4	; 0x04
    4448:	81 30       	cpi	r24, 0x01	; 1
    444a:	09 f0       	breq	.+2      	; 0x444e <DIO_u8_SetPinVal+0x124>
    444c:	72 c0       	rjmp	.+228    	; 0x4532 <DIO_u8_SetPinVal+0x208>
             switch (copy_port)
    444e:	8a 81       	ldd	r24, Y+2	; 0x02
    4450:	28 2f       	mov	r18, r24
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	3e 83       	std	Y+6, r19	; 0x06
    4456:	2d 83       	std	Y+5, r18	; 0x05
    4458:	8d 81       	ldd	r24, Y+5	; 0x05
    445a:	9e 81       	ldd	r25, Y+6	; 0x06
    445c:	81 30       	cpi	r24, 0x01	; 1
    445e:	91 05       	cpc	r25, r1
    4460:	49 f1       	breq	.+82     	; 0x44b4 <DIO_u8_SetPinVal+0x18a>
    4462:	2d 81       	ldd	r18, Y+5	; 0x05
    4464:	3e 81       	ldd	r19, Y+6	; 0x06
    4466:	22 30       	cpi	r18, 0x02	; 2
    4468:	31 05       	cpc	r19, r1
    446a:	2c f4       	brge	.+10     	; 0x4476 <DIO_u8_SetPinVal+0x14c>
    446c:	8d 81       	ldd	r24, Y+5	; 0x05
    446e:	9e 81       	ldd	r25, Y+6	; 0x06
    4470:	00 97       	sbiw	r24, 0x00	; 0
    4472:	61 f0       	breq	.+24     	; 0x448c <DIO_u8_SetPinVal+0x162>
    4474:	5b c0       	rjmp	.+182    	; 0x452c <DIO_u8_SetPinVal+0x202>
    4476:	2d 81       	ldd	r18, Y+5	; 0x05
    4478:	3e 81       	ldd	r19, Y+6	; 0x06
    447a:	22 30       	cpi	r18, 0x02	; 2
    447c:	31 05       	cpc	r19, r1
    447e:	71 f1       	breq	.+92     	; 0x44dc <DIO_u8_SetPinVal+0x1b2>
    4480:	8d 81       	ldd	r24, Y+5	; 0x05
    4482:	9e 81       	ldd	r25, Y+6	; 0x06
    4484:	83 30       	cpi	r24, 0x03	; 3
    4486:	91 05       	cpc	r25, r1
    4488:	e9 f1       	breq	.+122    	; 0x4504 <DIO_u8_SetPinVal+0x1da>
    448a:	50 c0       	rjmp	.+160    	; 0x452c <DIO_u8_SetPinVal+0x202>
            {
            case DIO_PORTA : SET_BIT(PORTA,copy_pinNum); break;
    448c:	ab e3       	ldi	r26, 0x3B	; 59
    448e:	b0 e0       	ldi	r27, 0x00	; 0
    4490:	eb e3       	ldi	r30, 0x3B	; 59
    4492:	f0 e0       	ldi	r31, 0x00	; 0
    4494:	80 81       	ld	r24, Z
    4496:	48 2f       	mov	r20, r24
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	28 2f       	mov	r18, r24
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	02 2e       	mov	r0, r18
    44a4:	02 c0       	rjmp	.+4      	; 0x44aa <DIO_u8_SetPinVal+0x180>
    44a6:	88 0f       	add	r24, r24
    44a8:	99 1f       	adc	r25, r25
    44aa:	0a 94       	dec	r0
    44ac:	e2 f7       	brpl	.-8      	; 0x44a6 <DIO_u8_SetPinVal+0x17c>
    44ae:	84 2b       	or	r24, r20
    44b0:	8c 93       	st	X, r24
    44b2:	44 c0       	rjmp	.+136    	; 0x453c <DIO_u8_SetPinVal+0x212>
            case DIO_PORTB : SET_BIT(PORTB,copy_pinNum); break;
    44b4:	a8 e3       	ldi	r26, 0x38	; 56
    44b6:	b0 e0       	ldi	r27, 0x00	; 0
    44b8:	e8 e3       	ldi	r30, 0x38	; 56
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	80 81       	ld	r24, Z
    44be:	48 2f       	mov	r20, r24
    44c0:	8b 81       	ldd	r24, Y+3	; 0x03
    44c2:	28 2f       	mov	r18, r24
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	02 2e       	mov	r0, r18
    44cc:	02 c0       	rjmp	.+4      	; 0x44d2 <DIO_u8_SetPinVal+0x1a8>
    44ce:	88 0f       	add	r24, r24
    44d0:	99 1f       	adc	r25, r25
    44d2:	0a 94       	dec	r0
    44d4:	e2 f7       	brpl	.-8      	; 0x44ce <DIO_u8_SetPinVal+0x1a4>
    44d6:	84 2b       	or	r24, r20
    44d8:	8c 93       	st	X, r24
    44da:	30 c0       	rjmp	.+96     	; 0x453c <DIO_u8_SetPinVal+0x212>
            case DIO_PORTC : SET_BIT(PORTC,copy_pinNum); break;
    44dc:	a5 e3       	ldi	r26, 0x35	; 53
    44de:	b0 e0       	ldi	r27, 0x00	; 0
    44e0:	e5 e3       	ldi	r30, 0x35	; 53
    44e2:	f0 e0       	ldi	r31, 0x00	; 0
    44e4:	80 81       	ld	r24, Z
    44e6:	48 2f       	mov	r20, r24
    44e8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ea:	28 2f       	mov	r18, r24
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	02 2e       	mov	r0, r18
    44f4:	02 c0       	rjmp	.+4      	; 0x44fa <DIO_u8_SetPinVal+0x1d0>
    44f6:	88 0f       	add	r24, r24
    44f8:	99 1f       	adc	r25, r25
    44fa:	0a 94       	dec	r0
    44fc:	e2 f7       	brpl	.-8      	; 0x44f6 <DIO_u8_SetPinVal+0x1cc>
    44fe:	84 2b       	or	r24, r20
    4500:	8c 93       	st	X, r24
    4502:	1c c0       	rjmp	.+56     	; 0x453c <DIO_u8_SetPinVal+0x212>
            case DIO_PORTD : SET_BIT(PORTD,copy_pinNum); break;
    4504:	a2 e3       	ldi	r26, 0x32	; 50
    4506:	b0 e0       	ldi	r27, 0x00	; 0
    4508:	e2 e3       	ldi	r30, 0x32	; 50
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	80 81       	ld	r24, Z
    450e:	48 2f       	mov	r20, r24
    4510:	8b 81       	ldd	r24, Y+3	; 0x03
    4512:	28 2f       	mov	r18, r24
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	02 2e       	mov	r0, r18
    451c:	02 c0       	rjmp	.+4      	; 0x4522 <DIO_u8_SetPinVal+0x1f8>
    451e:	88 0f       	add	r24, r24
    4520:	99 1f       	adc	r25, r25
    4522:	0a 94       	dec	r0
    4524:	e2 f7       	brpl	.-8      	; 0x451e <DIO_u8_SetPinVal+0x1f4>
    4526:	84 2b       	or	r24, r20
    4528:	8c 93       	st	X, r24
    452a:	08 c0       	rjmp	.+16     	; 0x453c <DIO_u8_SetPinVal+0x212>
            
            default: Local_u8ErrorState = NOK;  break;
    452c:	82 e0       	ldi	r24, 0x02	; 2
    452e:	89 83       	std	Y+1, r24	; 0x01
    4530:	05 c0       	rjmp	.+10     	; 0x453c <DIO_u8_SetPinVal+0x212>
            }
        }else
        Local_u8ErrorState = NOK;
    4532:	82 e0       	ldi	r24, 0x02	; 2
    4534:	89 83       	std	Y+1, r24	; 0x01
    4536:	02 c0       	rjmp	.+4      	; 0x453c <DIO_u8_SetPinVal+0x212>
    }else 
    Local_u8ErrorState = NOK;
    4538:	82 e0       	ldi	r24, 0x02	; 2
    453a:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    453c:	89 81       	ldd	r24, Y+1	; 0x01

}
    453e:	28 96       	adiw	r28, 0x08	; 8
    4540:	0f b6       	in	r0, 0x3f	; 63
    4542:	f8 94       	cli
    4544:	de bf       	out	0x3e, r29	; 62
    4546:	0f be       	out	0x3f, r0	; 63
    4548:	cd bf       	out	0x3d, r28	; 61
    454a:	cf 91       	pop	r28
    454c:	df 91       	pop	r29
    454e:	08 95       	ret

00004550 <DIO_u8_SetPortVal>:
uint8 DIO_u8_SetPortVal(DIO_port_t copy_port,  uint8 copy_pinVal){
    4550:	df 93       	push	r29
    4552:	cf 93       	push	r28
    4554:	00 d0       	rcall	.+0      	; 0x4556 <DIO_u8_SetPortVal+0x6>
    4556:	00 d0       	rcall	.+0      	; 0x4558 <DIO_u8_SetPortVal+0x8>
    4558:	0f 92       	push	r0
    455a:	cd b7       	in	r28, 0x3d	; 61
    455c:	de b7       	in	r29, 0x3e	; 62
    455e:	8a 83       	std	Y+2, r24	; 0x02
    4560:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8ErrorState = OK;
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	89 83       	std	Y+1, r24	; 0x01
        //if(copy_pinVal == DIO_PIN_LOW){
            switch (copy_port)
    4566:	8a 81       	ldd	r24, Y+2	; 0x02
    4568:	28 2f       	mov	r18, r24
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	3d 83       	std	Y+5, r19	; 0x05
    456e:	2c 83       	std	Y+4, r18	; 0x04
    4570:	8c 81       	ldd	r24, Y+4	; 0x04
    4572:	9d 81       	ldd	r25, Y+5	; 0x05
    4574:	81 30       	cpi	r24, 0x01	; 1
    4576:	91 05       	cpc	r25, r1
    4578:	d1 f0       	breq	.+52     	; 0x45ae <DIO_u8_SetPortVal+0x5e>
    457a:	2c 81       	ldd	r18, Y+4	; 0x04
    457c:	3d 81       	ldd	r19, Y+5	; 0x05
    457e:	22 30       	cpi	r18, 0x02	; 2
    4580:	31 05       	cpc	r19, r1
    4582:	2c f4       	brge	.+10     	; 0x458e <DIO_u8_SetPortVal+0x3e>
    4584:	8c 81       	ldd	r24, Y+4	; 0x04
    4586:	9d 81       	ldd	r25, Y+5	; 0x05
    4588:	00 97       	sbiw	r24, 0x00	; 0
    458a:	61 f0       	breq	.+24     	; 0x45a4 <DIO_u8_SetPortVal+0x54>
    458c:	1f c0       	rjmp	.+62     	; 0x45cc <DIO_u8_SetPortVal+0x7c>
    458e:	2c 81       	ldd	r18, Y+4	; 0x04
    4590:	3d 81       	ldd	r19, Y+5	; 0x05
    4592:	22 30       	cpi	r18, 0x02	; 2
    4594:	31 05       	cpc	r19, r1
    4596:	81 f0       	breq	.+32     	; 0x45b8 <DIO_u8_SetPortVal+0x68>
    4598:	8c 81       	ldd	r24, Y+4	; 0x04
    459a:	9d 81       	ldd	r25, Y+5	; 0x05
    459c:	83 30       	cpi	r24, 0x03	; 3
    459e:	91 05       	cpc	r25, r1
    45a0:	81 f0       	breq	.+32     	; 0x45c2 <DIO_u8_SetPortVal+0x72>
    45a2:	14 c0       	rjmp	.+40     	; 0x45cc <DIO_u8_SetPortVal+0x7c>
            {
            case DIO_PORTA :PORTA = copy_pinVal; break;
    45a4:	eb e3       	ldi	r30, 0x3B	; 59
    45a6:	f0 e0       	ldi	r31, 0x00	; 0
    45a8:	8b 81       	ldd	r24, Y+3	; 0x03
    45aa:	80 83       	st	Z, r24
    45ac:	11 c0       	rjmp	.+34     	; 0x45d0 <DIO_u8_SetPortVal+0x80>
            case DIO_PORTB :PORTB = copy_pinVal; break;
    45ae:	e8 e3       	ldi	r30, 0x38	; 56
    45b0:	f0 e0       	ldi	r31, 0x00	; 0
    45b2:	8b 81       	ldd	r24, Y+3	; 0x03
    45b4:	80 83       	st	Z, r24
    45b6:	0c c0       	rjmp	.+24     	; 0x45d0 <DIO_u8_SetPortVal+0x80>
            case DIO_PORTC :PORTC = copy_pinVal; break;
    45b8:	e5 e3       	ldi	r30, 0x35	; 53
    45ba:	f0 e0       	ldi	r31, 0x00	; 0
    45bc:	8b 81       	ldd	r24, Y+3	; 0x03
    45be:	80 83       	st	Z, r24
    45c0:	07 c0       	rjmp	.+14     	; 0x45d0 <DIO_u8_SetPortVal+0x80>
            case DIO_PORTD :PORTD = copy_pinVal; break;
    45c2:	e2 e3       	ldi	r30, 0x32	; 50
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	8b 81       	ldd	r24, Y+3	; 0x03
    45c8:	80 83       	st	Z, r24
    45ca:	02 c0       	rjmp	.+4      	; 0x45d0 <DIO_u8_SetPortVal+0x80>
            
            default: Local_u8ErrorState = NOK;  break;
    45cc:	82 e0       	ldi	r24, 0x02	; 2
    45ce:	89 83       	std	Y+1, r24	; 0x01
            }
       
    
    return Local_u8ErrorState;
    45d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    45d2:	0f 90       	pop	r0
    45d4:	0f 90       	pop	r0
    45d6:	0f 90       	pop	r0
    45d8:	0f 90       	pop	r0
    45da:	0f 90       	pop	r0
    45dc:	cf 91       	pop	r28
    45de:	df 91       	pop	r29
    45e0:	08 95       	ret

000045e2 <DIO_u8_GetPinVal>:

uint8 DIO_u8_GetPinVal(DIO_port_t copy_port, DIO_pin_t copy_pinNum, DIO_pinVal_t *copy_pinVal){
    45e2:	df 93       	push	r29
    45e4:	cf 93       	push	r28
    45e6:	cd b7       	in	r28, 0x3d	; 61
    45e8:	de b7       	in	r29, 0x3e	; 62
    45ea:	27 97       	sbiw	r28, 0x07	; 7
    45ec:	0f b6       	in	r0, 0x3f	; 63
    45ee:	f8 94       	cli
    45f0:	de bf       	out	0x3e, r29	; 62
    45f2:	0f be       	out	0x3f, r0	; 63
    45f4:	cd bf       	out	0x3d, r28	; 61
    45f6:	8a 83       	std	Y+2, r24	; 0x02
    45f8:	6b 83       	std	Y+3, r22	; 0x03
    45fa:	5d 83       	std	Y+5, r21	; 0x05
    45fc:	4c 83       	std	Y+4, r20	; 0x04
    uint8 Local_u8ErrorState = OK;
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	89 83       	std	Y+1, r24	; 0x01
    if(copy_pinVal !=NULL){
    4602:	8c 81       	ldd	r24, Y+4	; 0x04
    4604:	9d 81       	ldd	r25, Y+5	; 0x05
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	09 f4       	brne	.+2      	; 0x460c <DIO_u8_GetPinVal+0x2a>
    460a:	7b c0       	rjmp	.+246    	; 0x4702 <DIO_u8_GetPinVal+0x120>
        if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    460c:	8b 81       	ldd	r24, Y+3	; 0x03
    460e:	88 30       	cpi	r24, 0x08	; 8
    4610:	08 f0       	brcs	.+2      	; 0x4614 <DIO_u8_GetPinVal+0x32>
    4612:	74 c0       	rjmp	.+232    	; 0x46fc <DIO_u8_GetPinVal+0x11a>
            switch (copy_port)
    4614:	8a 81       	ldd	r24, Y+2	; 0x02
    4616:	28 2f       	mov	r18, r24
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	3f 83       	std	Y+7, r19	; 0x07
    461c:	2e 83       	std	Y+6, r18	; 0x06
    461e:	4e 81       	ldd	r20, Y+6	; 0x06
    4620:	5f 81       	ldd	r21, Y+7	; 0x07
    4622:	41 30       	cpi	r20, 0x01	; 1
    4624:	51 05       	cpc	r21, r1
    4626:	59 f1       	breq	.+86     	; 0x467e <DIO_u8_GetPinVal+0x9c>
    4628:	8e 81       	ldd	r24, Y+6	; 0x06
    462a:	9f 81       	ldd	r25, Y+7	; 0x07
    462c:	82 30       	cpi	r24, 0x02	; 2
    462e:	91 05       	cpc	r25, r1
    4630:	34 f4       	brge	.+12     	; 0x463e <DIO_u8_GetPinVal+0x5c>
    4632:	2e 81       	ldd	r18, Y+6	; 0x06
    4634:	3f 81       	ldd	r19, Y+7	; 0x07
    4636:	21 15       	cp	r18, r1
    4638:	31 05       	cpc	r19, r1
    463a:	69 f0       	breq	.+26     	; 0x4656 <DIO_u8_GetPinVal+0x74>
    463c:	5c c0       	rjmp	.+184    	; 0x46f6 <DIO_u8_GetPinVal+0x114>
    463e:	4e 81       	ldd	r20, Y+6	; 0x06
    4640:	5f 81       	ldd	r21, Y+7	; 0x07
    4642:	42 30       	cpi	r20, 0x02	; 2
    4644:	51 05       	cpc	r21, r1
    4646:	79 f1       	breq	.+94     	; 0x46a6 <DIO_u8_GetPinVal+0xc4>
    4648:	8e 81       	ldd	r24, Y+6	; 0x06
    464a:	9f 81       	ldd	r25, Y+7	; 0x07
    464c:	83 30       	cpi	r24, 0x03	; 3
    464e:	91 05       	cpc	r25, r1
    4650:	09 f4       	brne	.+2      	; 0x4654 <DIO_u8_GetPinVal+0x72>
    4652:	3d c0       	rjmp	.+122    	; 0x46ce <DIO_u8_GetPinVal+0xec>
    4654:	50 c0       	rjmp	.+160    	; 0x46f6 <DIO_u8_GetPinVal+0x114>
            {
            case DIO_PORTA : *copy_pinVal = GET_BIT(PINA,copy_pinNum); break;
    4656:	e9 e3       	ldi	r30, 0x39	; 57
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	80 81       	ld	r24, Z
    465c:	28 2f       	mov	r18, r24
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	8b 81       	ldd	r24, Y+3	; 0x03
    4662:	88 2f       	mov	r24, r24
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	a9 01       	movw	r20, r18
    4668:	02 c0       	rjmp	.+4      	; 0x466e <DIO_u8_GetPinVal+0x8c>
    466a:	55 95       	asr	r21
    466c:	47 95       	ror	r20
    466e:	8a 95       	dec	r24
    4670:	e2 f7       	brpl	.-8      	; 0x466a <DIO_u8_GetPinVal+0x88>
    4672:	ca 01       	movw	r24, r20
    4674:	81 70       	andi	r24, 0x01	; 1
    4676:	ec 81       	ldd	r30, Y+4	; 0x04
    4678:	fd 81       	ldd	r31, Y+5	; 0x05
    467a:	80 83       	st	Z, r24
    467c:	44 c0       	rjmp	.+136    	; 0x4706 <DIO_u8_GetPinVal+0x124>
            case DIO_PORTB : *copy_pinVal = GET_BIT(PINB,copy_pinNum); break;
    467e:	e6 e3       	ldi	r30, 0x36	; 54
    4680:	f0 e0       	ldi	r31, 0x00	; 0
    4682:	80 81       	ld	r24, Z
    4684:	28 2f       	mov	r18, r24
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	8b 81       	ldd	r24, Y+3	; 0x03
    468a:	88 2f       	mov	r24, r24
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	a9 01       	movw	r20, r18
    4690:	02 c0       	rjmp	.+4      	; 0x4696 <DIO_u8_GetPinVal+0xb4>
    4692:	55 95       	asr	r21
    4694:	47 95       	ror	r20
    4696:	8a 95       	dec	r24
    4698:	e2 f7       	brpl	.-8      	; 0x4692 <DIO_u8_GetPinVal+0xb0>
    469a:	ca 01       	movw	r24, r20
    469c:	81 70       	andi	r24, 0x01	; 1
    469e:	ec 81       	ldd	r30, Y+4	; 0x04
    46a0:	fd 81       	ldd	r31, Y+5	; 0x05
    46a2:	80 83       	st	Z, r24
    46a4:	30 c0       	rjmp	.+96     	; 0x4706 <DIO_u8_GetPinVal+0x124>
            case DIO_PORTC : *copy_pinVal = GET_BIT(PINC,copy_pinNum); break;
    46a6:	e3 e3       	ldi	r30, 0x33	; 51
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	80 81       	ld	r24, Z
    46ac:	28 2f       	mov	r18, r24
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	8b 81       	ldd	r24, Y+3	; 0x03
    46b2:	88 2f       	mov	r24, r24
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	a9 01       	movw	r20, r18
    46b8:	02 c0       	rjmp	.+4      	; 0x46be <DIO_u8_GetPinVal+0xdc>
    46ba:	55 95       	asr	r21
    46bc:	47 95       	ror	r20
    46be:	8a 95       	dec	r24
    46c0:	e2 f7       	brpl	.-8      	; 0x46ba <DIO_u8_GetPinVal+0xd8>
    46c2:	ca 01       	movw	r24, r20
    46c4:	81 70       	andi	r24, 0x01	; 1
    46c6:	ec 81       	ldd	r30, Y+4	; 0x04
    46c8:	fd 81       	ldd	r31, Y+5	; 0x05
    46ca:	80 83       	st	Z, r24
    46cc:	1c c0       	rjmp	.+56     	; 0x4706 <DIO_u8_GetPinVal+0x124>
            case DIO_PORTD : *copy_pinVal = GET_BIT(PIND,copy_pinNum); break;
    46ce:	e0 e3       	ldi	r30, 0x30	; 48
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	80 81       	ld	r24, Z
    46d4:	28 2f       	mov	r18, r24
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	8b 81       	ldd	r24, Y+3	; 0x03
    46da:	88 2f       	mov	r24, r24
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	a9 01       	movw	r20, r18
    46e0:	02 c0       	rjmp	.+4      	; 0x46e6 <DIO_u8_GetPinVal+0x104>
    46e2:	55 95       	asr	r21
    46e4:	47 95       	ror	r20
    46e6:	8a 95       	dec	r24
    46e8:	e2 f7       	brpl	.-8      	; 0x46e2 <DIO_u8_GetPinVal+0x100>
    46ea:	ca 01       	movw	r24, r20
    46ec:	81 70       	andi	r24, 0x01	; 1
    46ee:	ec 81       	ldd	r30, Y+4	; 0x04
    46f0:	fd 81       	ldd	r31, Y+5	; 0x05
    46f2:	80 83       	st	Z, r24
    46f4:	08 c0       	rjmp	.+16     	; 0x4706 <DIO_u8_GetPinVal+0x124>
            
            default: Local_u8ErrorState = NOK;  break;
    46f6:	82 e0       	ldi	r24, 0x02	; 2
    46f8:	89 83       	std	Y+1, r24	; 0x01
    46fa:	05 c0       	rjmp	.+10     	; 0x4706 <DIO_u8_GetPinVal+0x124>
            }
            
        }else 
            Local_u8ErrorState = NOK;
    46fc:	82 e0       	ldi	r24, 0x02	; 2
    46fe:	89 83       	std	Y+1, r24	; 0x01
    4700:	02 c0       	rjmp	.+4      	; 0x4706 <DIO_u8_GetPinVal+0x124>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    4702:	83 e0       	ldi	r24, 0x03	; 3
    4704:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    4706:	89 81       	ldd	r24, Y+1	; 0x01
}
    4708:	27 96       	adiw	r28, 0x07	; 7
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	f8 94       	cli
    470e:	de bf       	out	0x3e, r29	; 62
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	cd bf       	out	0x3d, r28	; 61
    4714:	cf 91       	pop	r28
    4716:	df 91       	pop	r29
    4718:	08 95       	ret

0000471a <DIO_u8_GetPinDir>:

uint8 DIO_u8_GetPinDir(DIO_port_t copy_port, DIO_pin_t copy_pinNum, DIO_pinDir_t *copy_pinDir){
    471a:	df 93       	push	r29
    471c:	cf 93       	push	r28
    471e:	cd b7       	in	r28, 0x3d	; 61
    4720:	de b7       	in	r29, 0x3e	; 62
    4722:	27 97       	sbiw	r28, 0x07	; 7
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	de bf       	out	0x3e, r29	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	cd bf       	out	0x3d, r28	; 61
    472e:	8a 83       	std	Y+2, r24	; 0x02
    4730:	6b 83       	std	Y+3, r22	; 0x03
    4732:	5d 83       	std	Y+5, r21	; 0x05
    4734:	4c 83       	std	Y+4, r20	; 0x04
    uint8 Local_u8ErrorState = OK;
    4736:	81 e0       	ldi	r24, 0x01	; 1
    4738:	89 83       	std	Y+1, r24	; 0x01
    if(copy_pinDir !=NULL){
    473a:	8c 81       	ldd	r24, Y+4	; 0x04
    473c:	9d 81       	ldd	r25, Y+5	; 0x05
    473e:	00 97       	sbiw	r24, 0x00	; 0
    4740:	09 f4       	brne	.+2      	; 0x4744 <DIO_u8_GetPinDir+0x2a>
    4742:	7b c0       	rjmp	.+246    	; 0x483a <DIO_u8_GetPinDir+0x120>
        if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    4744:	8b 81       	ldd	r24, Y+3	; 0x03
    4746:	88 30       	cpi	r24, 0x08	; 8
    4748:	08 f0       	brcs	.+2      	; 0x474c <DIO_u8_GetPinDir+0x32>
    474a:	74 c0       	rjmp	.+232    	; 0x4834 <DIO_u8_GetPinDir+0x11a>
            switch (copy_port)
    474c:	8a 81       	ldd	r24, Y+2	; 0x02
    474e:	28 2f       	mov	r18, r24
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	3f 83       	std	Y+7, r19	; 0x07
    4754:	2e 83       	std	Y+6, r18	; 0x06
    4756:	4e 81       	ldd	r20, Y+6	; 0x06
    4758:	5f 81       	ldd	r21, Y+7	; 0x07
    475a:	41 30       	cpi	r20, 0x01	; 1
    475c:	51 05       	cpc	r21, r1
    475e:	59 f1       	breq	.+86     	; 0x47b6 <DIO_u8_GetPinDir+0x9c>
    4760:	8e 81       	ldd	r24, Y+6	; 0x06
    4762:	9f 81       	ldd	r25, Y+7	; 0x07
    4764:	82 30       	cpi	r24, 0x02	; 2
    4766:	91 05       	cpc	r25, r1
    4768:	34 f4       	brge	.+12     	; 0x4776 <DIO_u8_GetPinDir+0x5c>
    476a:	2e 81       	ldd	r18, Y+6	; 0x06
    476c:	3f 81       	ldd	r19, Y+7	; 0x07
    476e:	21 15       	cp	r18, r1
    4770:	31 05       	cpc	r19, r1
    4772:	69 f0       	breq	.+26     	; 0x478e <DIO_u8_GetPinDir+0x74>
    4774:	5c c0       	rjmp	.+184    	; 0x482e <DIO_u8_GetPinDir+0x114>
    4776:	4e 81       	ldd	r20, Y+6	; 0x06
    4778:	5f 81       	ldd	r21, Y+7	; 0x07
    477a:	42 30       	cpi	r20, 0x02	; 2
    477c:	51 05       	cpc	r21, r1
    477e:	79 f1       	breq	.+94     	; 0x47de <DIO_u8_GetPinDir+0xc4>
    4780:	8e 81       	ldd	r24, Y+6	; 0x06
    4782:	9f 81       	ldd	r25, Y+7	; 0x07
    4784:	83 30       	cpi	r24, 0x03	; 3
    4786:	91 05       	cpc	r25, r1
    4788:	09 f4       	brne	.+2      	; 0x478c <DIO_u8_GetPinDir+0x72>
    478a:	3d c0       	rjmp	.+122    	; 0x4806 <DIO_u8_GetPinDir+0xec>
    478c:	50 c0       	rjmp	.+160    	; 0x482e <DIO_u8_GetPinDir+0x114>
            {
            case DIO_PORTA : *copy_pinDir = GET_BIT(DDRA,copy_pinNum); break;
    478e:	ea e3       	ldi	r30, 0x3A	; 58
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	80 81       	ld	r24, Z
    4794:	28 2f       	mov	r18, r24
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	8b 81       	ldd	r24, Y+3	; 0x03
    479a:	88 2f       	mov	r24, r24
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	a9 01       	movw	r20, r18
    47a0:	02 c0       	rjmp	.+4      	; 0x47a6 <DIO_u8_GetPinDir+0x8c>
    47a2:	55 95       	asr	r21
    47a4:	47 95       	ror	r20
    47a6:	8a 95       	dec	r24
    47a8:	e2 f7       	brpl	.-8      	; 0x47a2 <DIO_u8_GetPinDir+0x88>
    47aa:	ca 01       	movw	r24, r20
    47ac:	81 70       	andi	r24, 0x01	; 1
    47ae:	ec 81       	ldd	r30, Y+4	; 0x04
    47b0:	fd 81       	ldd	r31, Y+5	; 0x05
    47b2:	80 83       	st	Z, r24
    47b4:	44 c0       	rjmp	.+136    	; 0x483e <DIO_u8_GetPinDir+0x124>
            case DIO_PORTB : *copy_pinDir = GET_BIT(DDRB,copy_pinNum); break;
    47b6:	e7 e3       	ldi	r30, 0x37	; 55
    47b8:	f0 e0       	ldi	r31, 0x00	; 0
    47ba:	80 81       	ld	r24, Z
    47bc:	28 2f       	mov	r18, r24
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	8b 81       	ldd	r24, Y+3	; 0x03
    47c2:	88 2f       	mov	r24, r24
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	a9 01       	movw	r20, r18
    47c8:	02 c0       	rjmp	.+4      	; 0x47ce <DIO_u8_GetPinDir+0xb4>
    47ca:	55 95       	asr	r21
    47cc:	47 95       	ror	r20
    47ce:	8a 95       	dec	r24
    47d0:	e2 f7       	brpl	.-8      	; 0x47ca <DIO_u8_GetPinDir+0xb0>
    47d2:	ca 01       	movw	r24, r20
    47d4:	81 70       	andi	r24, 0x01	; 1
    47d6:	ec 81       	ldd	r30, Y+4	; 0x04
    47d8:	fd 81       	ldd	r31, Y+5	; 0x05
    47da:	80 83       	st	Z, r24
    47dc:	30 c0       	rjmp	.+96     	; 0x483e <DIO_u8_GetPinDir+0x124>
            case DIO_PORTC : *copy_pinDir = GET_BIT(DDRC,copy_pinNum); break;
    47de:	e4 e3       	ldi	r30, 0x34	; 52
    47e0:	f0 e0       	ldi	r31, 0x00	; 0
    47e2:	80 81       	ld	r24, Z
    47e4:	28 2f       	mov	r18, r24
    47e6:	30 e0       	ldi	r19, 0x00	; 0
    47e8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ea:	88 2f       	mov	r24, r24
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	a9 01       	movw	r20, r18
    47f0:	02 c0       	rjmp	.+4      	; 0x47f6 <DIO_u8_GetPinDir+0xdc>
    47f2:	55 95       	asr	r21
    47f4:	47 95       	ror	r20
    47f6:	8a 95       	dec	r24
    47f8:	e2 f7       	brpl	.-8      	; 0x47f2 <DIO_u8_GetPinDir+0xd8>
    47fa:	ca 01       	movw	r24, r20
    47fc:	81 70       	andi	r24, 0x01	; 1
    47fe:	ec 81       	ldd	r30, Y+4	; 0x04
    4800:	fd 81       	ldd	r31, Y+5	; 0x05
    4802:	80 83       	st	Z, r24
    4804:	1c c0       	rjmp	.+56     	; 0x483e <DIO_u8_GetPinDir+0x124>
            case DIO_PORTD : *copy_pinDir = GET_BIT(DDRD,copy_pinNum); break;
    4806:	e1 e3       	ldi	r30, 0x31	; 49
    4808:	f0 e0       	ldi	r31, 0x00	; 0
    480a:	80 81       	ld	r24, Z
    480c:	28 2f       	mov	r18, r24
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	8b 81       	ldd	r24, Y+3	; 0x03
    4812:	88 2f       	mov	r24, r24
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	a9 01       	movw	r20, r18
    4818:	02 c0       	rjmp	.+4      	; 0x481e <DIO_u8_GetPinDir+0x104>
    481a:	55 95       	asr	r21
    481c:	47 95       	ror	r20
    481e:	8a 95       	dec	r24
    4820:	e2 f7       	brpl	.-8      	; 0x481a <DIO_u8_GetPinDir+0x100>
    4822:	ca 01       	movw	r24, r20
    4824:	81 70       	andi	r24, 0x01	; 1
    4826:	ec 81       	ldd	r30, Y+4	; 0x04
    4828:	fd 81       	ldd	r31, Y+5	; 0x05
    482a:	80 83       	st	Z, r24
    482c:	08 c0       	rjmp	.+16     	; 0x483e <DIO_u8_GetPinDir+0x124>

            default: Local_u8ErrorState = NOK;  break;
    482e:	82 e0       	ldi	r24, 0x02	; 2
    4830:	89 83       	std	Y+1, r24	; 0x01
    4832:	05 c0       	rjmp	.+10     	; 0x483e <DIO_u8_GetPinDir+0x124>
            }

        }else
            Local_u8ErrorState = NOK;
    4834:	82 e0       	ldi	r24, 0x02	; 2
    4836:	89 83       	std	Y+1, r24	; 0x01
    4838:	02 c0       	rjmp	.+4      	; 0x483e <DIO_u8_GetPinDir+0x124>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    483a:	83 e0       	ldi	r24, 0x03	; 3
    483c:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    483e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4840:	27 96       	adiw	r28, 0x07	; 7
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	f8 94       	cli
    4846:	de bf       	out	0x3e, r29	; 62
    4848:	0f be       	out	0x3f, r0	; 63
    484a:	cd bf       	out	0x3d, r28	; 61
    484c:	cf 91       	pop	r28
    484e:	df 91       	pop	r29
    4850:	08 95       	ret

00004852 <DIO_u8_TogglePinVal>:
uint8 DIO_u8_TogglePinVal(DIO_port_t copy_port, DIO_pin_t copy_pinNum){
    4852:	df 93       	push	r29
    4854:	cf 93       	push	r28
    4856:	00 d0       	rcall	.+0      	; 0x4858 <DIO_u8_TogglePinVal+0x6>
    4858:	00 d0       	rcall	.+0      	; 0x485a <DIO_u8_TogglePinVal+0x8>
    485a:	0f 92       	push	r0
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    4860:	8a 83       	std	Y+2, r24	; 0x02
    4862:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8ErrorState = OK;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	89 83       	std	Y+1, r24	; 0x01
        if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    4868:	8b 81       	ldd	r24, Y+3	; 0x03
    486a:	88 30       	cpi	r24, 0x08	; 8
    486c:	08 f0       	brcs	.+2      	; 0x4870 <DIO_u8_TogglePinVal+0x1e>
    486e:	72 c0       	rjmp	.+228    	; 0x4954 <DIO_u8_TogglePinVal+0x102>
            switch (copy_port)
    4870:	8a 81       	ldd	r24, Y+2	; 0x02
    4872:	28 2f       	mov	r18, r24
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	3d 83       	std	Y+5, r19	; 0x05
    4878:	2c 83       	std	Y+4, r18	; 0x04
    487a:	8c 81       	ldd	r24, Y+4	; 0x04
    487c:	9d 81       	ldd	r25, Y+5	; 0x05
    487e:	81 30       	cpi	r24, 0x01	; 1
    4880:	91 05       	cpc	r25, r1
    4882:	49 f1       	breq	.+82     	; 0x48d6 <DIO_u8_TogglePinVal+0x84>
    4884:	2c 81       	ldd	r18, Y+4	; 0x04
    4886:	3d 81       	ldd	r19, Y+5	; 0x05
    4888:	22 30       	cpi	r18, 0x02	; 2
    488a:	31 05       	cpc	r19, r1
    488c:	2c f4       	brge	.+10     	; 0x4898 <DIO_u8_TogglePinVal+0x46>
    488e:	8c 81       	ldd	r24, Y+4	; 0x04
    4890:	9d 81       	ldd	r25, Y+5	; 0x05
    4892:	00 97       	sbiw	r24, 0x00	; 0
    4894:	61 f0       	breq	.+24     	; 0x48ae <DIO_u8_TogglePinVal+0x5c>
    4896:	5b c0       	rjmp	.+182    	; 0x494e <DIO_u8_TogglePinVal+0xfc>
    4898:	2c 81       	ldd	r18, Y+4	; 0x04
    489a:	3d 81       	ldd	r19, Y+5	; 0x05
    489c:	22 30       	cpi	r18, 0x02	; 2
    489e:	31 05       	cpc	r19, r1
    48a0:	71 f1       	breq	.+92     	; 0x48fe <DIO_u8_TogglePinVal+0xac>
    48a2:	8c 81       	ldd	r24, Y+4	; 0x04
    48a4:	9d 81       	ldd	r25, Y+5	; 0x05
    48a6:	83 30       	cpi	r24, 0x03	; 3
    48a8:	91 05       	cpc	r25, r1
    48aa:	e9 f1       	breq	.+122    	; 0x4926 <DIO_u8_TogglePinVal+0xd4>
    48ac:	50 c0       	rjmp	.+160    	; 0x494e <DIO_u8_TogglePinVal+0xfc>
            {
            case DIO_PORTA :  TOG_BIT(PORTA,copy_pinNum); break;
    48ae:	ab e3       	ldi	r26, 0x3B	; 59
    48b0:	b0 e0       	ldi	r27, 0x00	; 0
    48b2:	eb e3       	ldi	r30, 0x3B	; 59
    48b4:	f0 e0       	ldi	r31, 0x00	; 0
    48b6:	80 81       	ld	r24, Z
    48b8:	48 2f       	mov	r20, r24
    48ba:	8b 81       	ldd	r24, Y+3	; 0x03
    48bc:	28 2f       	mov	r18, r24
    48be:	30 e0       	ldi	r19, 0x00	; 0
    48c0:	81 e0       	ldi	r24, 0x01	; 1
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	02 2e       	mov	r0, r18
    48c6:	02 c0       	rjmp	.+4      	; 0x48cc <DIO_u8_TogglePinVal+0x7a>
    48c8:	88 0f       	add	r24, r24
    48ca:	99 1f       	adc	r25, r25
    48cc:	0a 94       	dec	r0
    48ce:	e2 f7       	brpl	.-8      	; 0x48c8 <DIO_u8_TogglePinVal+0x76>
    48d0:	84 27       	eor	r24, r20
    48d2:	8c 93       	st	X, r24
    48d4:	41 c0       	rjmp	.+130    	; 0x4958 <DIO_u8_TogglePinVal+0x106>
            case DIO_PORTB :  TOG_BIT(PORTB,copy_pinNum); break;
    48d6:	a8 e3       	ldi	r26, 0x38	; 56
    48d8:	b0 e0       	ldi	r27, 0x00	; 0
    48da:	e8 e3       	ldi	r30, 0x38	; 56
    48dc:	f0 e0       	ldi	r31, 0x00	; 0
    48de:	80 81       	ld	r24, Z
    48e0:	48 2f       	mov	r20, r24
    48e2:	8b 81       	ldd	r24, Y+3	; 0x03
    48e4:	28 2f       	mov	r18, r24
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	81 e0       	ldi	r24, 0x01	; 1
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	02 2e       	mov	r0, r18
    48ee:	02 c0       	rjmp	.+4      	; 0x48f4 <DIO_u8_TogglePinVal+0xa2>
    48f0:	88 0f       	add	r24, r24
    48f2:	99 1f       	adc	r25, r25
    48f4:	0a 94       	dec	r0
    48f6:	e2 f7       	brpl	.-8      	; 0x48f0 <DIO_u8_TogglePinVal+0x9e>
    48f8:	84 27       	eor	r24, r20
    48fa:	8c 93       	st	X, r24
    48fc:	2d c0       	rjmp	.+90     	; 0x4958 <DIO_u8_TogglePinVal+0x106>
            case DIO_PORTC :  TOG_BIT(PORTC,copy_pinNum); break;
    48fe:	a5 e3       	ldi	r26, 0x35	; 53
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	e5 e3       	ldi	r30, 0x35	; 53
    4904:	f0 e0       	ldi	r31, 0x00	; 0
    4906:	80 81       	ld	r24, Z
    4908:	48 2f       	mov	r20, r24
    490a:	8b 81       	ldd	r24, Y+3	; 0x03
    490c:	28 2f       	mov	r18, r24
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	02 2e       	mov	r0, r18
    4916:	02 c0       	rjmp	.+4      	; 0x491c <DIO_u8_TogglePinVal+0xca>
    4918:	88 0f       	add	r24, r24
    491a:	99 1f       	adc	r25, r25
    491c:	0a 94       	dec	r0
    491e:	e2 f7       	brpl	.-8      	; 0x4918 <DIO_u8_TogglePinVal+0xc6>
    4920:	84 27       	eor	r24, r20
    4922:	8c 93       	st	X, r24
    4924:	19 c0       	rjmp	.+50     	; 0x4958 <DIO_u8_TogglePinVal+0x106>
            case DIO_PORTD :  TOG_BIT(PORTD,copy_pinNum); break;
    4926:	a2 e3       	ldi	r26, 0x32	; 50
    4928:	b0 e0       	ldi	r27, 0x00	; 0
    492a:	e2 e3       	ldi	r30, 0x32	; 50
    492c:	f0 e0       	ldi	r31, 0x00	; 0
    492e:	80 81       	ld	r24, Z
    4930:	48 2f       	mov	r20, r24
    4932:	8b 81       	ldd	r24, Y+3	; 0x03
    4934:	28 2f       	mov	r18, r24
    4936:	30 e0       	ldi	r19, 0x00	; 0
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	02 2e       	mov	r0, r18
    493e:	02 c0       	rjmp	.+4      	; 0x4944 <DIO_u8_TogglePinVal+0xf2>
    4940:	88 0f       	add	r24, r24
    4942:	99 1f       	adc	r25, r25
    4944:	0a 94       	dec	r0
    4946:	e2 f7       	brpl	.-8      	; 0x4940 <DIO_u8_TogglePinVal+0xee>
    4948:	84 27       	eor	r24, r20
    494a:	8c 93       	st	X, r24
    494c:	05 c0       	rjmp	.+10     	; 0x4958 <DIO_u8_TogglePinVal+0x106>

            default: Local_u8ErrorState = NOK;  break;
    494e:	82 e0       	ldi	r24, 0x02	; 2
    4950:	89 83       	std	Y+1, r24	; 0x01
    4952:	02 c0       	rjmp	.+4      	; 0x4958 <DIO_u8_TogglePinVal+0x106>
            }

        }else
            Local_u8ErrorState = NOK;
    4954:	82 e0       	ldi	r24, 0x02	; 2
    4956:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    4958:	89 81       	ldd	r24, Y+1	; 0x01
}
    495a:	0f 90       	pop	r0
    495c:	0f 90       	pop	r0
    495e:	0f 90       	pop	r0
    4960:	0f 90       	pop	r0
    4962:	0f 90       	pop	r0
    4964:	cf 91       	pop	r28
    4966:	df 91       	pop	r29
    4968:	08 95       	ret

0000496a <DIO_u8_PinPullUp>:

uint8 DIO_u8_PinPullUp(DIO_port_t copy_port, DIO_pin_t copy_pinNum){
    496a:	df 93       	push	r29
    496c:	cf 93       	push	r28
    496e:	00 d0       	rcall	.+0      	; 0x4970 <DIO_u8_PinPullUp+0x6>
    4970:	0f 92       	push	r0
    4972:	cd b7       	in	r28, 0x3d	; 61
    4974:	de b7       	in	r29, 0x3e	; 62
    4976:	8a 83       	std	Y+2, r24	; 0x02
    4978:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8ErrorState = OK;
    497a:	81 e0       	ldi	r24, 0x01	; 1
    497c:	89 83       	std	Y+1, r24	; 0x01
    Local_u8ErrorState = DIO_u8_SetPinDir(copy_port,copy_pinNum,DIO_PIN_INPUT);
    497e:	8a 81       	ldd	r24, Y+2	; 0x02
    4980:	6b 81       	ldd	r22, Y+3	; 0x03
    4982:	40 e0       	ldi	r20, 0x00	; 0
    4984:	0e 94 39 20 	call	0x4072	; 0x4072 <DIO_u8_SetPinDir>
    4988:	89 83       	std	Y+1, r24	; 0x01
    if(Local_u8ErrorState == OK){
    498a:	89 81       	ldd	r24, Y+1	; 0x01
    498c:	81 30       	cpi	r24, 0x01	; 1
    498e:	31 f4       	brne	.+12     	; 0x499c <DIO_u8_PinPullUp+0x32>
        Local_u8ErrorState = DIO_u8_SetPinVal(copy_port,copy_pinNum,DIO_PIN_HIGH);
    4990:	8a 81       	ldd	r24, Y+2	; 0x02
    4992:	6b 81       	ldd	r22, Y+3	; 0x03
    4994:	41 e0       	ldi	r20, 0x01	; 1
    4996:	0e 94 95 21 	call	0x432a	; 0x432a <DIO_u8_SetPinVal>
    499a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    499c:	89 81       	ldd	r24, Y+1	; 0x01
}
    499e:	0f 90       	pop	r0
    49a0:	0f 90       	pop	r0
    49a2:	0f 90       	pop	r0
    49a4:	cf 91       	pop	r28
    49a6:	df 91       	pop	r29
    49a8:	08 95       	ret

000049aa <INT0ISR>:
static uint8 Global_flag=0x00;
static PP_ball_Config_t Global_ball = {0U,0U, OUTSCREEN, 75, RIGHT};
static PP_player_Config_t Global_RightPlayer = {0U, RIGHT};

void INT0ISR(void)
{
    49aa:	df 93       	push	r29
    49ac:	cf 93       	push	r28
    49ae:	cd b7       	in	r28, 0x3d	; 61
    49b0:	de b7       	in	r29, 0x3e	; 62
	Global_flag += 1;
    49b2:	80 91 ca 01 	lds	r24, 0x01CA
    49b6:	8f 5f       	subi	r24, 0xFF	; 255
    49b8:	80 93 ca 01 	sts	0x01CA, r24
}
    49bc:	cf 91       	pop	r28
    49be:	df 91       	pop	r29
    49c0:	08 95       	ret

000049c2 <INT2ISR>:

void INT2ISR(void)
{
    49c2:	df 93       	push	r29
    49c4:	cf 93       	push	r28
    49c6:	cd b7       	in	r28, 0x3d	; 61
    49c8:	de b7       	in	r29, 0x3e	; 62
	PP_u8PlayerToggle(&Global_RightPlayer);
    49ca:	87 eb       	ldi	r24, 0xB7	; 183
    49cc:	91 e0       	ldi	r25, 0x01	; 1
    49ce:	0e 94 2c 09 	call	0x1258	; 0x1258 <PP_u8PlayerToggle>
}
    49d2:	cf 91       	pop	r28
    49d4:	df 91       	pop	r29
    49d6:	08 95       	ret

000049d8 <main>:

////******left screen***////////
void main()
{
    49d8:	df 93       	push	r29
    49da:	cf 93       	push	r28
    49dc:	cd b7       	in	r28, 0x3d	; 61
    49de:	de b7       	in	r29, 0x3e	; 62
	/*Initialize*/
	Port_voidInit();
    49e0:	0e 94 16 20 	call	0x402c	; 0x402c <Port_voidInit>
	GIE_voidEnableGlobal();
    49e4:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GIE_voidEnableGlobal>
	EXTI_voidInit();
    49e8:	0e 94 55 1e 	call	0x3caa	; 0x3caa <EXTI_voidInit>
	CLCD_VoidInit();
    49ec:	0e 94 00 1c 	call	0x3800	; 0x3800 <CLCD_VoidInit>
	/*initialize ISR*/
	EXTI_u8SetCallBack(INT0, &INT0ISR);
    49f0:	25 ed       	ldi	r18, 0xD5	; 213
    49f2:	34 e2       	ldi	r19, 0x24	; 36
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	b9 01       	movw	r22, r18
    49f8:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <EXTI_u8SetCallBack>
	EXTI_u8SetCallBack(INT2, &INT2ISR);
    49fc:	21 ee       	ldi	r18, 0xE1	; 225
    49fe:	34 e2       	ldi	r19, 0x24	; 36
    4a00:	82 e0       	ldi	r24, 0x02	; 2
    4a02:	b9 01       	movw	r22, r18
    4a04:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <EXTI_u8SetCallBack>

	PP_u8initPlayer(&Global_RightPlayer);
    4a08:	87 eb       	ldi	r24, 0xB7	; 183
    4a0a:	91 e0       	ldi	r25, 0x01	; 1
    4a0c:	0e 94 17 07 	call	0xe2e	; 0xe2e <PP_u8initPlayer>
while (1)
	{
		PP_u8GameRun(&Global_ball, &Global_RightPlayer);
    4a10:	8f ea       	ldi	r24, 0xAF	; 175
    4a12:	91 e0       	ldi	r25, 0x01	; 1
    4a14:	27 eb       	ldi	r18, 0xB7	; 183
    4a16:	31 e0       	ldi	r19, 0x01	; 1
    4a18:	b9 01       	movw	r22, r18
    4a1a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <PP_u8GameRun>

		PP_voidCheckINTFlag(&Global_flag,&Global_ball,&Global_RightPlayer);
    4a1e:	8a ec       	ldi	r24, 0xCA	; 202
    4a20:	91 e0       	ldi	r25, 0x01	; 1
    4a22:	2f ea       	ldi	r18, 0xAF	; 175
    4a24:	31 e0       	ldi	r19, 0x01	; 1
    4a26:	47 eb       	ldi	r20, 0xB7	; 183
    4a28:	51 e0       	ldi	r21, 0x01	; 1
    4a2a:	b9 01       	movw	r22, r18
    4a2c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <PP_voidCheckINTFlag>
    4a30:	ef cf       	rjmp	.-34     	; 0x4a10 <main+0x38>

00004a32 <__divmodhi4>:
    4a32:	97 fb       	bst	r25, 7
    4a34:	09 2e       	mov	r0, r25
    4a36:	07 26       	eor	r0, r23
    4a38:	0a d0       	rcall	.+20     	; 0x4a4e <__divmodhi4_neg1>
    4a3a:	77 fd       	sbrc	r23, 7
    4a3c:	04 d0       	rcall	.+8      	; 0x4a46 <__divmodhi4_neg2>
    4a3e:	49 d0       	rcall	.+146    	; 0x4ad2 <__udivmodhi4>
    4a40:	06 d0       	rcall	.+12     	; 0x4a4e <__divmodhi4_neg1>
    4a42:	00 20       	and	r0, r0
    4a44:	1a f4       	brpl	.+6      	; 0x4a4c <__divmodhi4_exit>

00004a46 <__divmodhi4_neg2>:
    4a46:	70 95       	com	r23
    4a48:	61 95       	neg	r22
    4a4a:	7f 4f       	sbci	r23, 0xFF	; 255

00004a4c <__divmodhi4_exit>:
    4a4c:	08 95       	ret

00004a4e <__divmodhi4_neg1>:
    4a4e:	f6 f7       	brtc	.-4      	; 0x4a4c <__divmodhi4_exit>
    4a50:	90 95       	com	r25
    4a52:	81 95       	neg	r24
    4a54:	9f 4f       	sbci	r25, 0xFF	; 255
    4a56:	08 95       	ret

00004a58 <__udivmodsi4>:
    4a58:	a1 e2       	ldi	r26, 0x21	; 33
    4a5a:	1a 2e       	mov	r1, r26
    4a5c:	aa 1b       	sub	r26, r26
    4a5e:	bb 1b       	sub	r27, r27
    4a60:	fd 01       	movw	r30, r26
    4a62:	0d c0       	rjmp	.+26     	; 0x4a7e <__udivmodsi4_ep>

00004a64 <__udivmodsi4_loop>:
    4a64:	aa 1f       	adc	r26, r26
    4a66:	bb 1f       	adc	r27, r27
    4a68:	ee 1f       	adc	r30, r30
    4a6a:	ff 1f       	adc	r31, r31
    4a6c:	a2 17       	cp	r26, r18
    4a6e:	b3 07       	cpc	r27, r19
    4a70:	e4 07       	cpc	r30, r20
    4a72:	f5 07       	cpc	r31, r21
    4a74:	20 f0       	brcs	.+8      	; 0x4a7e <__udivmodsi4_ep>
    4a76:	a2 1b       	sub	r26, r18
    4a78:	b3 0b       	sbc	r27, r19
    4a7a:	e4 0b       	sbc	r30, r20
    4a7c:	f5 0b       	sbc	r31, r21

00004a7e <__udivmodsi4_ep>:
    4a7e:	66 1f       	adc	r22, r22
    4a80:	77 1f       	adc	r23, r23
    4a82:	88 1f       	adc	r24, r24
    4a84:	99 1f       	adc	r25, r25
    4a86:	1a 94       	dec	r1
    4a88:	69 f7       	brne	.-38     	; 0x4a64 <__udivmodsi4_loop>
    4a8a:	60 95       	com	r22
    4a8c:	70 95       	com	r23
    4a8e:	80 95       	com	r24
    4a90:	90 95       	com	r25
    4a92:	9b 01       	movw	r18, r22
    4a94:	ac 01       	movw	r20, r24
    4a96:	bd 01       	movw	r22, r26
    4a98:	cf 01       	movw	r24, r30
    4a9a:	08 95       	ret

00004a9c <__divmodsi4>:
    4a9c:	97 fb       	bst	r25, 7
    4a9e:	09 2e       	mov	r0, r25
    4aa0:	05 26       	eor	r0, r21
    4aa2:	0e d0       	rcall	.+28     	; 0x4ac0 <__divmodsi4_neg1>
    4aa4:	57 fd       	sbrc	r21, 7
    4aa6:	04 d0       	rcall	.+8      	; 0x4ab0 <__divmodsi4_neg2>
    4aa8:	d7 df       	rcall	.-82     	; 0x4a58 <__udivmodsi4>
    4aaa:	0a d0       	rcall	.+20     	; 0x4ac0 <__divmodsi4_neg1>
    4aac:	00 1c       	adc	r0, r0
    4aae:	38 f4       	brcc	.+14     	; 0x4abe <__divmodsi4_exit>

00004ab0 <__divmodsi4_neg2>:
    4ab0:	50 95       	com	r21
    4ab2:	40 95       	com	r20
    4ab4:	30 95       	com	r19
    4ab6:	21 95       	neg	r18
    4ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aba:	4f 4f       	sbci	r20, 0xFF	; 255
    4abc:	5f 4f       	sbci	r21, 0xFF	; 255

00004abe <__divmodsi4_exit>:
    4abe:	08 95       	ret

00004ac0 <__divmodsi4_neg1>:
    4ac0:	f6 f7       	brtc	.-4      	; 0x4abe <__divmodsi4_exit>
    4ac2:	90 95       	com	r25
    4ac4:	80 95       	com	r24
    4ac6:	70 95       	com	r23
    4ac8:	61 95       	neg	r22
    4aca:	7f 4f       	sbci	r23, 0xFF	; 255
    4acc:	8f 4f       	sbci	r24, 0xFF	; 255
    4ace:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad0:	08 95       	ret

00004ad2 <__udivmodhi4>:
    4ad2:	aa 1b       	sub	r26, r26
    4ad4:	bb 1b       	sub	r27, r27
    4ad6:	51 e1       	ldi	r21, 0x11	; 17
    4ad8:	07 c0       	rjmp	.+14     	; 0x4ae8 <__udivmodhi4_ep>

00004ada <__udivmodhi4_loop>:
    4ada:	aa 1f       	adc	r26, r26
    4adc:	bb 1f       	adc	r27, r27
    4ade:	a6 17       	cp	r26, r22
    4ae0:	b7 07       	cpc	r27, r23
    4ae2:	10 f0       	brcs	.+4      	; 0x4ae8 <__udivmodhi4_ep>
    4ae4:	a6 1b       	sub	r26, r22
    4ae6:	b7 0b       	sbc	r27, r23

00004ae8 <__udivmodhi4_ep>:
    4ae8:	88 1f       	adc	r24, r24
    4aea:	99 1f       	adc	r25, r25
    4aec:	5a 95       	dec	r21
    4aee:	a9 f7       	brne	.-22     	; 0x4ada <__udivmodhi4_loop>
    4af0:	80 95       	com	r24
    4af2:	90 95       	com	r25
    4af4:	bc 01       	movw	r22, r24
    4af6:	cd 01       	movw	r24, r26
    4af8:	08 95       	ret

00004afa <__prologue_saves__>:
    4afa:	2f 92       	push	r2
    4afc:	3f 92       	push	r3
    4afe:	4f 92       	push	r4
    4b00:	5f 92       	push	r5
    4b02:	6f 92       	push	r6
    4b04:	7f 92       	push	r7
    4b06:	8f 92       	push	r8
    4b08:	9f 92       	push	r9
    4b0a:	af 92       	push	r10
    4b0c:	bf 92       	push	r11
    4b0e:	cf 92       	push	r12
    4b10:	df 92       	push	r13
    4b12:	ef 92       	push	r14
    4b14:	ff 92       	push	r15
    4b16:	0f 93       	push	r16
    4b18:	1f 93       	push	r17
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	cd b7       	in	r28, 0x3d	; 61
    4b20:	de b7       	in	r29, 0x3e	; 62
    4b22:	ca 1b       	sub	r28, r26
    4b24:	db 0b       	sbc	r29, r27
    4b26:	0f b6       	in	r0, 0x3f	; 63
    4b28:	f8 94       	cli
    4b2a:	de bf       	out	0x3e, r29	; 62
    4b2c:	0f be       	out	0x3f, r0	; 63
    4b2e:	cd bf       	out	0x3d, r28	; 61
    4b30:	09 94       	ijmp

00004b32 <__epilogue_restores__>:
    4b32:	2a 88       	ldd	r2, Y+18	; 0x12
    4b34:	39 88       	ldd	r3, Y+17	; 0x11
    4b36:	48 88       	ldd	r4, Y+16	; 0x10
    4b38:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b40:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b42:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b44:	b9 84       	ldd	r11, Y+9	; 0x09
    4b46:	c8 84       	ldd	r12, Y+8	; 0x08
    4b48:	df 80       	ldd	r13, Y+7	; 0x07
    4b4a:	ee 80       	ldd	r14, Y+6	; 0x06
    4b4c:	fd 80       	ldd	r15, Y+5	; 0x05
    4b4e:	0c 81       	ldd	r16, Y+4	; 0x04
    4b50:	1b 81       	ldd	r17, Y+3	; 0x03
    4b52:	aa 81       	ldd	r26, Y+2	; 0x02
    4b54:	b9 81       	ldd	r27, Y+1	; 0x01
    4b56:	ce 0f       	add	r28, r30
    4b58:	d1 1d       	adc	r29, r1
    4b5a:	0f b6       	in	r0, 0x3f	; 63
    4b5c:	f8 94       	cli
    4b5e:	de bf       	out	0x3e, r29	; 62
    4b60:	0f be       	out	0x3f, r0	; 63
    4b62:	cd bf       	out	0x3d, r28	; 61
    4b64:	ed 01       	movw	r28, r26
    4b66:	08 95       	ret

00004b68 <do_rand>:
    4b68:	a0 e0       	ldi	r26, 0x00	; 0
    4b6a:	b0 e0       	ldi	r27, 0x00	; 0
    4b6c:	ea eb       	ldi	r30, 0xBA	; 186
    4b6e:	f5 e2       	ldi	r31, 0x25	; 37
    4b70:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__prologue_saves__+0x10>
    4b74:	ec 01       	movw	r28, r24
    4b76:	a8 80       	ld	r10, Y
    4b78:	b9 80       	ldd	r11, Y+1	; 0x01
    4b7a:	ca 80       	ldd	r12, Y+2	; 0x02
    4b7c:	db 80       	ldd	r13, Y+3	; 0x03
    4b7e:	a1 14       	cp	r10, r1
    4b80:	b1 04       	cpc	r11, r1
    4b82:	c1 04       	cpc	r12, r1
    4b84:	d1 04       	cpc	r13, r1
    4b86:	41 f4       	brne	.+16     	; 0x4b98 <do_rand+0x30>
    4b88:	84 e2       	ldi	r24, 0x24	; 36
    4b8a:	a8 2e       	mov	r10, r24
    4b8c:	89 ed       	ldi	r24, 0xD9	; 217
    4b8e:	b8 2e       	mov	r11, r24
    4b90:	8b e5       	ldi	r24, 0x5B	; 91
    4b92:	c8 2e       	mov	r12, r24
    4b94:	87 e0       	ldi	r24, 0x07	; 7
    4b96:	d8 2e       	mov	r13, r24
    4b98:	c6 01       	movw	r24, r12
    4b9a:	b5 01       	movw	r22, r10
    4b9c:	2d e1       	ldi	r18, 0x1D	; 29
    4b9e:	33 ef       	ldi	r19, 0xF3	; 243
    4ba0:	41 e0       	ldi	r20, 0x01	; 1
    4ba2:	50 e0       	ldi	r21, 0x00	; 0
    4ba4:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <__divmodsi4>
    4ba8:	27 ea       	ldi	r18, 0xA7	; 167
    4baa:	31 e4       	ldi	r19, 0x41	; 65
    4bac:	40 e0       	ldi	r20, 0x00	; 0
    4bae:	50 e0       	ldi	r21, 0x00	; 0
    4bb0:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    4bb4:	7b 01       	movw	r14, r22
    4bb6:	8c 01       	movw	r16, r24
    4bb8:	c6 01       	movw	r24, r12
    4bba:	b5 01       	movw	r22, r10
    4bbc:	2d e1       	ldi	r18, 0x1D	; 29
    4bbe:	33 ef       	ldi	r19, 0xF3	; 243
    4bc0:	41 e0       	ldi	r20, 0x01	; 1
    4bc2:	50 e0       	ldi	r21, 0x00	; 0
    4bc4:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <__divmodsi4>
    4bc8:	ca 01       	movw	r24, r20
    4bca:	b9 01       	movw	r22, r18
    4bcc:	2c ee       	ldi	r18, 0xEC	; 236
    4bce:	34 ef       	ldi	r19, 0xF4	; 244
    4bd0:	4f ef       	ldi	r20, 0xFF	; 255
    4bd2:	5f ef       	ldi	r21, 0xFF	; 255
    4bd4:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    4bd8:	6e 0d       	add	r22, r14
    4bda:	7f 1d       	adc	r23, r15
    4bdc:	80 1f       	adc	r24, r16
    4bde:	91 1f       	adc	r25, r17
    4be0:	97 ff       	sbrs	r25, 7
    4be2:	04 c0       	rjmp	.+8      	; 0x4bec <do_rand+0x84>
    4be4:	61 50       	subi	r22, 0x01	; 1
    4be6:	70 40       	sbci	r23, 0x00	; 0
    4be8:	80 40       	sbci	r24, 0x00	; 0
    4bea:	90 48       	sbci	r25, 0x80	; 128
    4bec:	68 83       	st	Y, r22
    4bee:	79 83       	std	Y+1, r23	; 0x01
    4bf0:	8a 83       	std	Y+2, r24	; 0x02
    4bf2:	9b 83       	std	Y+3, r25	; 0x03
    4bf4:	9b 01       	movw	r18, r22
    4bf6:	3f 77       	andi	r19, 0x7F	; 127
    4bf8:	c9 01       	movw	r24, r18
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	ea e0       	ldi	r30, 0x0A	; 10
    4c00:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <__epilogue_restores__+0x10>

00004c04 <rand_r>:
    4c04:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <do_rand>
    4c08:	08 95       	ret

00004c0a <rand>:
    4c0a:	83 e9       	ldi	r24, 0x93	; 147
    4c0c:	91 e0       	ldi	r25, 0x01	; 1
    4c0e:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <do_rand>
    4c12:	08 95       	ret

00004c14 <srand>:
    4c14:	a0 e0       	ldi	r26, 0x00	; 0
    4c16:	b0 e0       	ldi	r27, 0x00	; 0
    4c18:	80 93 93 01 	sts	0x0193, r24
    4c1c:	90 93 94 01 	sts	0x0194, r25
    4c20:	a0 93 95 01 	sts	0x0195, r26
    4c24:	b0 93 96 01 	sts	0x0196, r27
    4c28:	08 95       	ret

00004c2a <__mulsi3>:
    4c2a:	62 9f       	mul	r22, r18
    4c2c:	d0 01       	movw	r26, r0
    4c2e:	73 9f       	mul	r23, r19
    4c30:	f0 01       	movw	r30, r0
    4c32:	82 9f       	mul	r24, r18
    4c34:	e0 0d       	add	r30, r0
    4c36:	f1 1d       	adc	r31, r1
    4c38:	64 9f       	mul	r22, r20
    4c3a:	e0 0d       	add	r30, r0
    4c3c:	f1 1d       	adc	r31, r1
    4c3e:	92 9f       	mul	r25, r18
    4c40:	f0 0d       	add	r31, r0
    4c42:	83 9f       	mul	r24, r19
    4c44:	f0 0d       	add	r31, r0
    4c46:	74 9f       	mul	r23, r20
    4c48:	f0 0d       	add	r31, r0
    4c4a:	65 9f       	mul	r22, r21
    4c4c:	f0 0d       	add	r31, r0
    4c4e:	99 27       	eor	r25, r25
    4c50:	72 9f       	mul	r23, r18
    4c52:	b0 0d       	add	r27, r0
    4c54:	e1 1d       	adc	r30, r1
    4c56:	f9 1f       	adc	r31, r25
    4c58:	63 9f       	mul	r22, r19
    4c5a:	b0 0d       	add	r27, r0
    4c5c:	e1 1d       	adc	r30, r1
    4c5e:	f9 1f       	adc	r31, r25
    4c60:	bd 01       	movw	r22, r26
    4c62:	cf 01       	movw	r24, r30
    4c64:	11 24       	eor	r1, r1
    4c66:	08 95       	ret

00004c68 <_exit>:
    4c68:	f8 94       	cli

00004c6a <__stop_program>:
    4c6a:	ff cf       	rjmp	.-2      	; 0x4c6a <__stop_program>
